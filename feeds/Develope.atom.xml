<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hackecho</title><link href="http://hackecho.com/" rel="alternate"></link><link href="http://hackecho.com/feeds/Develope.atom.xml" rel="self"></link><id>http://hackecho.com/</id><updated>2013-01-01T18:03:00-06:00</updated><entry><title>Magnet Link 和 Torrent</title><link href="http://hackecho.com/2013/01/intro-to-magnet-link/" rel="alternate"></link><updated>2013-01-01T18:03:00-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2013-01-01:2013/01/intro-to-magnet-link/</id><summary type="html">&lt;p&gt;今天是美国的元旦（New-Year），本来打算到工程院度过一天，没想到整个学校到处都是大门紧闭。回家后准备下载一部电影，于是折腾中对磁力链接和种子产生了兴趣。不做深究，只谈表层原理。&lt;/p&gt;
&lt;p&gt;著名的BT搜索站海盗湾已经声明，不再托管任何种子文件，将全部更改为提供磁力链接（Magnet Links）。如果你还没有使用过磁力链接，这里将告诉你磁力链接和种子文件的关系（当然，磁力链接本身不仅限于种子文件）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;磁力链接和种子文件的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你下载一个种子文件时，其实是下载了一个包含了资源文件信息的小文件，这个小文件告诉BT客户端资源文件的名称、tracker的URI等。然后BT客户端会根据种子文件计算一个hash值（就像ISBN一样），再根据哈希值找到此刻正在分享这个资源的用户，然后开始P2P的传输。&lt;/p&gt;
&lt;p&gt;而磁力链接就像上述过程的一个中间人。最基本的磁力链接包含了上述过程中计算出来的hash值，好让BT客户端可以直接搜索资源。磁力链接不需要tracker，因为其使用了DHT网络（&lt;a href="http://lifehacker.com/5411311/bittorrents-future-dht-pex-and-magnet-links-explained"&gt;阅读更多&lt;/a&gt;），也不需要你下载任何文件，只需要一串文本字符即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;怎样使用磁力链接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;磁力链接的形式是以magnet:开头的一串字符，你只需要直接点击磁力链接或把它复制到支持磁力下载的客户端即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有什么意义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这有什么意义呢？只是把种子文件换了一种形式而已。如果你这样以为就错了，否则海盗湾也不会全站进行转换。&lt;/p&gt;
&lt;p&gt;最重要原因是，使用磁力链接可以使像海盗湾这样的种子站摆脱法律纠缠。因为海盗湾本身将不再存储任何链接到受版权保护的资源上（比如.torrent文件）。这样将无法说海盗湾本身&lt;em&gt;直接&lt;/em&gt;允许用户下载版权保护内容了。不知道以后会不会有新的法律法规颁布，但目前来看，海盗湾大可高枕无忧了。&lt;/p&gt;
&lt;p&gt;如果你想了解更多关于磁力链接的知识，请阅读&lt;a href="http://en.wikipedia.org/wiki/Magnet_uri"&gt;维基百科&lt;/a&gt;。&lt;/p&gt;</summary><category term="Magnet_Link"></category><category term="Torrent"></category></entry><entry><title>Linux文件系统备忘录</title><link href="http://hackecho.com/2012/07/fhs-introduction/" rel="alternate"></link><updated>2012-07-01T10:15:00-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-07-01:2012/07/fhs-introduction/</id><summary type="html">&lt;p&gt;与Windows将硬盘看做“C盘”、“D盘”几个独立的分区不同，Linux将整个文件系统看做一棵树，这棵树的树根叫做根文件系统，用/表示。各个分区通过“挂载”（Mount）以文件夹的形式访问。&lt;/p&gt;
&lt;p&gt;在/中的文件夹很多，本文介绍常见文件夹的意义。Linux的目录结构确实比较复杂，但设置合理、层次鲜明。本文以&lt;a href="http://www.pathname.com/fhs/"&gt;FHS 2.3&lt;/a&gt;为例进行介绍。&lt;/p&gt;
&lt;h2&gt;根文件系统&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;/bin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一目录中存放了供所有用户使用的完成基本维护任务的命令。其中bin是binary的缩写，表示二进制文件，通常为可执行文件。一些常用的系统命令，如cp、ls等保存在该目录中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/boot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里存放的是启动Linux时使用的一些核心文件。如操作系统内核、引导程序Grub等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/dev&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在此目录中包含所有的系统设备文件。从此目录可以访问各种系统设备。如CD-ROM，磁盘驱动器，调制解调器和内存等。在该目录中还包含有各种实用功能，如用于创建设备文件的MAKEDEV。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/etc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该目录中包含系统和应用软件的配置文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/etc/passwd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该目录中包含了系统中的用户描述信息，每行记录一个用户的信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/home&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储普通用户的个人文件。每个用户的主目录均在/home下以自己的用户名命名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/lib&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个目录里存放着系统最基本的共享链接库和内核模块。共享链接库在功能上类似于Windows里的.dll文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/lib64&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;64位系统有这个文件夹，64位程序的库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/lost+found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这并不是Linux目录结构的组成部分，而是ext3文件系统用于保存丢失文件的地方。不恰当的关机操作和磁盘错误均会导致文件丢失，这意味着这些被标注为“在使用”，但却并未列于磁盘上的数据结构上。正常情况下，引导进程会运行fsck程序，该程序能发现这些文件。除了“/”分区上的这个目录外，在每个分区上均有一个lost+found目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/media&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可移动设备的挂载点，当前的操作系统通常会把U盘等设备自动挂载到该文件夹下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/mnt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;临时用于挂载文件系统的地方。一般情况下这个目录是空的，而在我们将要挂载分区时在这个目录下建立目录，再将我们将要访问的设备挂载在这个目录上，这样我们就可访问文件了。（注意在GNOME中，只有挂载到/media的文件夹才会显示在“计算机”中，挂载到/mnt不会做为特殊设备显示，详见自动挂载分区）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/opt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多数第三方软件默认安装到此位置，如Adobe Reader、google-earth等。并不是每个系统都会创建这个目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/proc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它是存在于内存中的虚拟文件系统。里面保存了内核和进程的状态信息。多为文本文件，可以直接查看。如/proc/cpuinfo保存了有关CPU的信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/root&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是根用户的主目录。与保留给个人用户的/home下的目录很相似，该目录中还包含仅与根用户有关的条目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/sbin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;供超级用户使用的可执行文件，里面多是系统管理命令，如fsck, reboot, shutdown, ifconfig等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/tmp&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该目录用以保存临时文件。该目录具有Sticky特殊权限，所有用户都可以在这个目录中创建、编辑文件。但只有文件拥有者才能删除文件。为了加快临时文件的访问速度，有的实现把/tmp放在内存中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态的用户级应用程序等，见下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动态的程序数据等，见下文。&lt;/p&gt;
&lt;h2&gt;/usr目录结构&lt;/h2&gt;
&lt;p&gt;/usr通常是一个庞大的文件夹，其下的目录结构与根目录相似，但根目录中的文件多是系统级的文件，而/usr中是用户级的文件，一般与具体的系统无关。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="err"&gt;最早是&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;的缩写，&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="err"&gt;的作用与现在的&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="err"&gt;相同。而目前其通常被认为是&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt; &lt;span class="n"&gt;Resources&lt;/span&gt; &lt;span class="err"&gt;的缩写，其中通常是用户级的软件等，与存放系统级文件的根目录形成对比。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;应注意，程序的配置文件、动态的数据文件等都不会存放到/usr，所以除了安装、卸载软件外，一般无需修改/usr中的内容。说在系统正常运行时，/usr甚至可以被只读挂载。由于这一特性，/usr常被划分在单独的分区，甚至有时多台计算机可以共享一个/usr。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/bin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多数日常应用程序存放的位置。如果/usr被放在单独的分区中，Linux的单用户模式不能访问/usr/bin，所以对系统至关重要的程序不应放在此文件夹中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/include&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存放C/C++头文件的目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/lib&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统的库文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/local&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新装的系统中这个文件夹是空的，可以用于存放个人安装的软件。安装了本地软件的/usr/local里的目录结构与/usr相似&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/sbin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在单用户模式中不用的系统管理程序，如apache2等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/share&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与架构无关的数据。多数软件安装在此。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/X11R6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该目录用于保存运行X-Window所需的所有文件。该目录中还包含用于运行GUI要的配置文件和二进制文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/usr/src&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;源代码&lt;/p&gt;
&lt;h2&gt;/var目录结构&lt;/h2&gt;
&lt;p&gt;/var中包括了一些数据文件，如系统日志等。/var的存放使得/usr被只读挂载成为可能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/cache&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用程序的缓存文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/lib&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用程序的信息、数据。如数据库的数据等都存放在此文件夹。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/local&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;/usr/local中程序的信息、数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/lock&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;锁文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/log&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;日志文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/opt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;/opt中程序的信息、数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正在执行着的程序的信息，如PID文件应存放于此&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/spool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存放程序的假脱机数据（即spool data）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/var/tmp&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;临时文件&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pathname.com/fhs/"&gt;FHS网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="TLDP:%20Linux%20Filesystem%20Hierarchy"&gt;TLDP: Linux Filesystem Hierarchy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Linux"></category><category term="HFS"></category></entry><entry><title>3 Software Architecture Style</title><link href="http://hackecho.com/2012/06/three-software-architecture-style/" rel="alternate"></link><updated>2012-06-02T22:49:56-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-06-02:2012/06/three-software-architecture-style/</id><summary type="html">&lt;p&gt;I'm heistate to compose this article for it is easy to understand and quantities of great materials have been published on net. But I think it will be a process of gaining knowledge and experience so I write it here to accept your criticism correction.&lt;/p&gt;
&lt;p&gt;This brief introduction of three software architecture style is from my homework of Software Architecture Course. Thanks for the guidance of Prof. Zhenyan Ji. All right reserved by hackecho.com.&lt;/p&gt;
&lt;p&gt;Actually there are nine SA styles right in class and in this task I'm responsible of Event Driven, SOA and C2 style. I'm very glad to share it with you and if there is anything wrong in my article please leave a comment and let's have a discussion. Thank you.&lt;/p&gt;
&lt;h3&gt;Event Driven Style&lt;/h3&gt;
&lt;p&gt;事件驱动的意思是指程序执行流程是由使用者的动作（如鼠标的按键，键盘的按键动作）或者是由其他程序的信息来决定的。事件驱动模型有三大要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事件源：能够接受外部事件的源体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;侦听器：能够接受事件源通知的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件处理程序：用于处理事件的对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来讲有两种事件驱动控制模型：&lt;/p&gt;
&lt;p&gt;1.Broadcast models&lt;/p&gt;
&lt;p&gt;这种模型中，有两种广播方式：第一种是无目的广播，靠接收者自行决定是否加以处理或简单抛弃。第二种是选择广播式，各个组件（即事件处理程序）会在事件源中注册侦听器，当此侦听器被触发后，系统再调用相应的组件。&lt;/p&gt;
&lt;p&gt;2.Interrupt-driven models&lt;/p&gt;
&lt;p&gt;这种模型大多数应用于实时响应的系统中，在这些系统中有一个中断处理器（事件源）来监测外部的中断信号，然后再调用响应的组件（事件处理程序）处理中断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Broadcast models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;系统描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本案例取自我们平常编程时经常使用的调试器（Debugger）工作原理。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;设计思路&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;编辑器与变量检测器向调试器注册，接收“断点事件”；一旦遇到断点，调试器发布事件，从而触发“编辑器”与“变量监测器”；这时编辑器将源代码滚动到断点处，变量监测器则更新当前变量值并显示出来。&lt;/p&gt;
&lt;p&gt;&lt;em&gt; 架构图&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2012/06/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Interrupt-driven models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;系统描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本案例取自我们学习的课程《操作系统基本概念》。&lt;/p&gt;
&lt;p&gt;在操作系统中，中断是用以提高计算机工作效率、增强计算机功能的一项重要技术。最初引入硬件中断，只是出于性能上的考量。如果计算机系统没有中断，则处理器与外部设备通信时，它必须在向该设备发出指令后进行忙等待(Busy waiting)，反复轮询该设备是否完成了动作并返回结果。这就造成了大量处理器周期被浪费。引入中断以后，当处理器发出设备请求后就可以立即返回以处理其他任务，而当设备完成动作后，发送中断信号给处理器，后者就可以再回过头获取处理结果。这样，在设备进行处理的周期内，处理器可以执行其他一些有意义的工作，而只付出一些很小的、切换上下文所引发的时间代价。后来被用于CPU外部与内部紧急事件的处理、机器故障的处理、时间控制等多个方面，并产生通过软件方式进入中断处理（软中断）的概念。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;设计思路&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在硬件实现上，中断可以是一个包含控制线路的独立系统，也可以被整合进存储器子系统中。&lt;/p&gt;
&lt;p&gt;对于前者，在IBM个人机上，广泛使用可编程中断控制器（Programmable Interrupt Controller，PIC）来负责中断响应和处理。PIC被连接在若干中断请求设备和处理器的中断引脚之间，从而实现对处理器中断请求线路的复用。&lt;/p&gt;
&lt;p&gt;作为另一种中断实现的形式，即存储器子系统实现方式，可以将中断端口映射到存储器的地址空间，这样对特定存储器地址的访问实际上是中断请求。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;架构图&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;第一种实现（中断是包含控制线路的独立系统）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2012/06/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;第二种实现（中断被整合进存储器子系统中）：&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/06/3.png"&gt;&lt;img alt="" src="/static/images/2012/06/3.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;SOA&lt;/h3&gt;
&lt;p&gt;面向服务的体系结构（Service-Oriented Architecture，SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种这样的系统中的服务可以一种统一和通用的方式进行交互。&lt;/p&gt;
&lt;p&gt;SOA中的三种角色：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务提供者&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发布服务，并对使用服务的请求进行响应&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务代理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注册已经发布的服务提供者，对其进行分类，并提供服务搜索功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务请求者&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;利用服务代理查找所需服务，然后使用服务&lt;/p&gt;
&lt;p&gt;&lt;em&gt;系统描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SOA本身是个概念性非常强的东西，为了更好地说明，这里以一个简单的网上买书来理解一下这个概念。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;设计思路&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;加入说一个人现在想在网上买书，流程大概是这样的：首先要登录网站，找到要买的书，然后在线付款。如果用面向对象思维去考虑，这些过程应该是一个工程的不同类。但事实上卖书的网站是不可能拿到银行的付款类并操作银行的数据库的。所以这时候我们用SOA的思维去考虑。卖书的网站提供一个服务，你可以在这里选择书并订购；银行提供一个服务，是检查你的帐户上是否有钱，并取得一定金额；此时再返回网站提供的服务进行结帐，交易成功之后，银行那边的服务也会做出结算。这样就完成了一次交易。&lt;/p&gt;
&lt;p&gt;在这个系统中，银行和网站都是服务提供者，他们将各自的服务注册到服务代理（这个可以由网站来做），然后需要用的时候请求服务即可。其间的数据大部分情况时通过XML来进行传递。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;架构图&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2012/06/4.png" /&gt;&lt;/p&gt;
&lt;h3&gt;C2&lt;/h3&gt;
&lt;p&gt;C2是一种基于构件和消息的架构风格，可用于创建灵活的、可伸缩的软件系统。可以将C2架构看做是按照一定的规则由连接件（如消息路由设备）连接的许多构件组成的层次网络：系统中的构件和连接件都有一个“顶部”和“底部”。一个构件的“顶部”或“底部”可以连接到另一个连接件的“顶部”或“底部”。对于一个连接件，和其相连的构件或连接件的数量没有限制，但是构件和构件之间不能直接相连。&lt;/p&gt;
&lt;p&gt;C2风格定义了两种类型的消息：向上发送的请求消息（Request）和向下发送的通知消息（Notification）。请求是通过向上层构件发送消息以获得某种服务，而通知则是告知构件的内部状态发生了改变。连接件负责消息的路由、过滤和广播，构件之间不存在直接的通信手段，而只能通过交换连接件发送的异步消息进行通信。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;系统描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们以《软件体系结构》这门课补课安排为例，简单理解一下C2风格。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;设计思路&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这个例子中包含三种构件：教师构件、学生构件、教学科构件。&lt;/p&gt;
&lt;p&gt;需要补课的时候，冀老师首先分别向学生和教学科发出补课请求，并提供一个自己期望的补课时间和地点的集合；同时，冀老师分别向学生和教学科发出请求获取学生和教学科期望的补课时间和地点的集合。学生与教学科收到老师的补课请求和参数（时间和地点）后，结合自身情况和教室的使用情况，选出学生和教学科期望老师补课的时间和地点的集合后返回给老师。老师接收到学生与教学科的返回集合后，再结合自己的期望集合最后得出准确的补课时间和地点，并通知学生与教学科。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;架构图&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2012/06/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;再次感谢冀振燕老师的指导，如若转载请注明出处。&lt;/p&gt;</summary><category term="Architecture"></category></entry><entry><title>Sequences and Proxy Services in WSO2 ESB</title><link href="http://hackecho.com/2012/06/sequences-and-proxy-services-in-wso2-esb/" rel="alternate"></link><updated>2012-06-02T04:32:31-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-06-02:2012/06/sequences-and-proxy-services-in-wso2-esb/</id><summary type="html">&lt;p&gt;&lt;img alt="" src="/static/images/2012/06/esb-header-logo.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Recently I'm busy doing my SOA project which is using WSO2 ESB system as part of it. The official's documentation is so long that I have to find some articles that will provide a simple hello world of WSO2 ESB clearly to give me a bright view of it. Luckly, a great man, Hiranya Jayathilka, who worked in WSO2 Inc, give me a shock at the basic of this ESB system. Here is Hiranya's blog from blogspot, I copy it here since blogspot is blocked in China and I want to share it with my patners and others who may need it. &lt;a href="http://techfeast-hiranya.blogspot.jp/2009/11/wso2-esb-tips-tricks-01-sequences-and.html"&gt;Here&lt;/a&gt; is the original article source. All right reserved by Hiranya Jayathilka.&lt;/p&gt;
&lt;p&gt;The main objective of this post is to introduce two very important functional components of the ESB, namely sequences and proxy services. These are perhaps the most commonly used functional components of WSO2 ESB. They can be used to implement even the most complex of messaging systems and enterprise integration patterns using the service bus. During the course of this article I will briefly explain some of the use cases of sequences and proxy services along with some useful information on how to use them in WSO2 ESB.&lt;/p&gt;
&lt;p&gt;WSO2 ESB supports four modes of operation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Service mediation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message mediation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task scheduling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eventing&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the service mediation mode, WSO2 ESB acts as a proxy to a real Web Service hosted in a Web Services container like Apache Axis2 or WSO2 WSAS. The ESB exposes a virtual Web Service which can accept requests from clients. The requests are processed, mediated and forwarded to the actual service implementation by the ESB. Any responses coming from the service implementation are mediated and forwarded to the clients. Proxy services are used to get the ESB operating in this mode.&lt;/p&gt;
&lt;p&gt;In the message mediation mode, WSO2 ESB functions as a message router. It can filter, transform, drop messages or forward them to remote endpoints for further processing when operating in this mode. Sequences are used to define the message mediation behavior of the ESB. A sequence is a series of mediators, where each mediator is an entity that can accept messages and carry out a predefined task on them. WSO2 ESB provides you with a wide range of mediators designed to carry out various processing tasks on the messages. You can mix and match these available mediators to develop sequences. For instance a sequence comprising of the log mediator and the send mediator will act as a simple log-and-forward message flow. You can have any number of mediators in a sequence and a sequence can also dispatch messages to other sequences if needed.&lt;/p&gt;
&lt;p&gt;A proxy service is a combination of three sequences and a target endpoint. The target endpoint is for the actual service implementation to which the messages will be forwarded after mediation. The three sequences are as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In-sequence: All the incoming requests to the proxy service are dispatched to the in-sequence. This sequence defines how the requests should be processed before forwarding them to the target endpoint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Out-sequence: All the responses coming back from the backend service implementation are dispatched to this sequence. It defines how the responses should be handled before sending them back to the clients. The out sequence can also forward the responses to a given service endpoint, thus effectively linking up multiple services. This way a single request to the proxy service will trigger multiple service invocations. The response from the 1st service is fed to the 2nd service as the request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fault sequence: If an error occurs during service mediation the faulty message is handed to the fault sequence for error handling work. Depending on our requirements the fault sequence can be used log the error, ignore it or send a SOAP fault back to the client indicating that something went wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that you have a basic understanding of sequences and proxy services let’s take a look at some of the use cases where these components come in handy. Proxy services can be used to expose an existing service over a different schema (message format). In scenarios like this one, proxy services can transform the messages flowing back and forth. Also since proxy services can be exposed over multiple transports they can be used to expose an existing service over a different transport. For an example we can take a simple HTTP service and expose it over JMS by creating a proxy service for the HTTP service and exposing it over JMS. The ESB will take care of switching the communication protocols. In addition, proxy services are useful in adding QoS features (security, RM etc) to ordinary message flows. As an example, we can take an unsecured service, create a proxy service for it and engage security on the proxy service to add security to the backend service implementation.&lt;/p&gt;
&lt;p&gt;Sequences can be used to audit, filter, control and transform messages flowing through a network. Certain advanced features like access control, load balancing and fail over are also possible with sequences. In WSO2 ESB all the incoming messages which are not destined to a proxy service are dispatched to the “main” sequence. The main sequence can further distribute them to other sequences and they in turns can call even more sequences. This is somewhat analogous to how a C program works. The application runtime invokes the main procedure and it in turns can call other procedures.&lt;/p&gt;
&lt;p&gt;Enough with the theory! Let’s get practical and see how to create sequences and proxy services in WSO2 ESB. Here actually you have several options. You can either use the XML based Synapse configuration language to define sequences and proxy services, or use the set of graphical tools that come with WSO2 ESB. To create a sequence graphically, first start the ESB server and logon to the management console. (By default the web based console is accessible at https://localhost:9443/carbon) Sign in as an administrator (By default the username and the password are both “admin”). Click on the “Sequences” option in the left panel. This will show you a list of existing sequences. By default the “main” sequence and the global “fault” sequence is listed on this page.&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/06/seq_list.png"&gt;&lt;img alt="" src="/static/images/2012/06/seq_list.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To create a new sequence, click on “Add Sequence”. This will bring up the on-line sequence editor. Start by giving a name to the sequence. Then go ahead and start adding mediators.&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/06/seq_editor.png"&gt;&lt;img alt="" src="/static/images/2012/06/seq_editor.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To further customize the behavior of a mediator instance click on the mediator and a dialog box will appear just below the sequence editor panel. Once you are done creating the sequence click on “Save” to save and close the editor. The newly created sequence will now show up on the list of available sequences.&lt;/p&gt;
&lt;p&gt;Ceating a proxy service is just as easy. Click on the Proxy Service link in the left panel to start the proxy service creation wizard.&lt;/p&gt;
&lt;p&gt;Simply go through the 3-step wizard and specify an in-sequence, target endpoint, out-sequence and a fault sequence for the proxy service. When specifying these items you can either import an already existing sequence/endpoint or create one on the spot by selecting the “Anonymous” option.&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/06/seq_epr.png"&gt;&lt;img alt="" src="/static/images/2012/06/seq_epr.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you finish the wizard the new service will get created and deployed on the server. If you gave the name “FooProxy” to the service it will be exposed on the HTTP endpoint http://localhost:8280/services/FooProxy.&lt;/p&gt;
&lt;p&gt;Now if you click on the “Synapse” link on the left navigation bar you can see that the overall ESB configuration has been updated with your changes.&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/06/synapse.png"&gt;&lt;img alt="" src="/static/images/2012/06/synapse.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The UI also allows you to enable statistics collection on sequences and proxy services, enable tracing on them and modifying their configuration. Play around with the various options available to you and get familiar with sequences, proxy services and the ESB management console. We will be using these a lot in the days to come.&lt;/p&gt;
&lt;p&gt;Thanks Hiranya Jayathilka.&lt;/p&gt;</summary><category term="ESB"></category><category term="WSO2"></category></entry><entry><title>解决MySQL无法通过localhost连接问题</title><link href="http://hackecho.com/2012/05/mysql-localhost-connect-problem/" rel="alternate"></link><updated>2012-05-27T00:33:00-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-05-27:2012/05/mysql-localhost-connect-problem/</id><summary type="html">&lt;p&gt;今晚一朋友问到，为什么Mac上自己装了MySQL后只能通过127.0.0.1连接，却无法通过localhost连接？想到我以前也遇到过同样的问题，但当时因为通过127.0.0.1连接就可以解决，也就没有多在意，只记得是与mysql.sock文件的位置有关。今日本着解决问题的心态，再次检索这个问题。&lt;/p&gt;
&lt;p&gt;悲剧，前两天重装系统后，还没安装MySQL呢...不过，还记的上一篇文章吗，正好试下Homebrew神器的刀锋。&lt;/p&gt;
&lt;h3&gt;安装MySQL&lt;/h3&gt;
&lt;p&gt;依次执行下列三个命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
&lt;span class="n"&gt;unset&lt;/span&gt; &lt;span class="n"&gt;TMPDIR&lt;/span&gt;
&lt;span class="n"&gt;mysql_install_db&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;whoami&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(brew --prefix mysql)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;datadir&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tmpdir&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体为什么有后两条命令，你安装的时候就知道了。&lt;/p&gt;
&lt;h3&gt;解决localhost问题&lt;/h3&gt;
&lt;p&gt;我们看它的错误提示：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;MySQL&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;既然文件mysql.sock出问题了，那我们就拿它下手。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Terminal不给面子，给出一行错误提示：No such file or directory。&lt;/p&gt;
&lt;p&gt;既然文件不存在，那我们就找到它呗。（此处省略一万字）在Mac上，mysql.sock文件的正确地址是：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;终极解决办法：&lt;/p&gt;
&lt;p&gt;修改php.ini的相关配置&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到mysql.default_socket和mysqli.default_socket，将其值修改为/tmp/mysql.sock。保存，退出，重启Apache。&lt;/p&gt;
&lt;p&gt;OK，搞定。&lt;/p&gt;
&lt;p&gt;当然，如果你的电脑上mysql.sock和php.ini文件和我的不一样（默认的话应该一样），要修改相关命令中的路径。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;更新：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;还有一种解决办法，创建一个符号链接过去：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="MySQL"></category></entry><entry><title>开发者神器 - Homebrew简介</title><link href="http://hackecho.com/2012/05/super-tool-homebrew/" rel="alternate"></link><updated>2012-05-25T12:28:27-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-05-25:2012/05/super-tool-homebrew/</id><summary type="html">&lt;p&gt;Homebrew&lt;a href="http://mxcl.github.com/homebrew/"&gt;官网&lt;/a&gt;页面最下方大大地写了一句话：“Homebrew is the bee’s knees, friends. So far it’s a perfect replacement for MacPorts.” 哈哈，这不是公开的挑战MacPorts是什么，不过，作为用过一段时间MacPorts的非标准程序员，个人感觉Homebrew真的要好用一些：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2012/05/homebrew.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;什么是Homebrew呢？Homebrew is the easiest and most flexible way to install the UNIX tools Apple didn't include with OS X. 官方的解释非常明了，Homebrew是一个包管理器，用于在Mac上安装一些OS X没有的UNIX工具（比如著名的wget）。&lt;/p&gt;
&lt;p&gt;Homebrew将这些工具统统安装到了 /usr/local/Cellar 目录中，并在 /usr/local/bin 中创建符号链接。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;
 &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;Cellar&lt;/span&gt;
 &lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;
 &lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt;
 &lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;man&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;man1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;

 &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;
 &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;Homebrew是基于Ruby的，安装超简单的有木有，把下面的代码粘贴到Terminal中执行：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个脚本会把Homebrew安装到  /usr/local 目录，因此在用Homebrew执行安装操作时都不需要 sudo ，而且一键式编译，无需参数干扰。&lt;/p&gt;
&lt;p&gt;不过，Homebrew对安装环境还是有一定要求的，比如必须安装Command Line Tools for Xcode，为了装这个东西我180MB流量又没了啊有木有！这个月已经超了9个G了有木有！（不好意思，跑题了...）&lt;/p&gt;
&lt;h3&gt;路径结构&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="err"&gt;         &lt;/span&gt; &lt;span class="err"&gt;用于存放所安装程序的启动链接（相当于快捷方式）&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="err"&gt;      &lt;/span&gt; &lt;span class="err"&gt;所以&lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="err"&gt;安装的程序，都将以&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;程序名&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;版本号&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;存放于本目录下&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="err"&gt;         &lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="err"&gt;安装程序的配置文件默认存放路径&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="err"&gt;     &lt;/span&gt; &lt;span class="n"&gt;Homebrew&lt;/span&gt; &lt;span class="err"&gt;系统自身文件夹&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;Formula&lt;/span&gt;&lt;span class="err"&gt;    &lt;/span&gt; &lt;span class="err"&gt;程序的下载路径和编译参数及安装路径等配置文件存放地&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;Homebrew&lt;/span&gt;&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="err"&gt;程序自身命令集&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;p&gt;神器来了，欢呼吧少年。&lt;/p&gt;
&lt;p&gt;查看brew的帮助&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装软件&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;卸载软件&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;uninstall&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;搜索软件&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显示已经安装软件列表&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新软件，把所有的Formula目录更新，并且会对本机已经安装并有更新的软件用星号标明。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新某具体软件&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看软件信息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FORMULA&lt;/span&gt;&lt;span class="p"&gt;...]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;删除程序，和upgrade一样，单个软件删除和所有程序老版删除。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看那些已安装的程序需要更新&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;outdated&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各位继续Enjoy，我要继续准备TOEFL去了...&lt;/p&gt;</summary><category term="Homebrew"></category></entry><entry><title>Homebrew VS MacPorts</title><link href="http://hackecho.com/2012/05/homebrew-vs-macports/" rel="alternate"></link><updated>2012-05-22T23:20:57-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-05-22:2012/05/homebrew-vs-macports/</id><summary type="html">&lt;p&gt;Source: http://tedwise.com/2010/08/28/homebrew-vs-macports/&lt;/p&gt;
&lt;p&gt;If you do development on a Mac and you have a Unix background, you immediately start noticing missing tools and utilities. OS/X doesn’t have an apt-get for package management (or even one of the lousy RPM variants). There are options though. Two of them have been around for quite a while, MacPorts and Fink.&lt;/p&gt;
&lt;p&gt;MacPorts is strongly influenced by the BSD ‘ports’ system. Ports are essentially recipes for taking source code and build scripts and making them compile and install on the target operating system. BSD ports organize the recipes and source code into a tree that make adding software easy.&lt;/p&gt;
&lt;p&gt;Fink takes a different approach. It’s based around Debian’s packaging tools and apt-get. Fink mainly manages pre-compiled/pre-built applications. So the applications you install using Fink don’t need to be compiled and built on your system.&lt;/p&gt;
&lt;p&gt;Between the two of them, MacPorts tends to be the easier solution. Software is more up to date, there are more options, it’s somewhat less intrusive into your system and you get new versions faster when Apple updates OS/X. Ironic when you consider that MacPorts code is compiled on your system while Fink is just downloading binaries.&lt;/p&gt;
&lt;p&gt;But MacPorts is still no walk in the park. Even though it’s less intrusive then Fink, it still isn’t a great citizen on OS/X. MacPorts eschews many of the system libraries and software already available in OS/X for other variants. Installing a seemingly simple utility might somehow require a new version of Perl, Python or other set of large software.&lt;/p&gt;
&lt;p&gt;Homebrew is a reaction to the complexity of MacPorts. It’s extremely simple. Homebrew appears to be targeted more at individual packages. If you want to pull in the entire world of open source software and want every package, then you’re better off with MacPorts or Fink. But if you’re looking for the occasional tool or utility, Homebrew is for you.&lt;/p&gt;
&lt;p&gt;Installation is dead simple:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(curl -fsS http://gist.github.com/raw/323731/install_homebrew.rb)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That downloads the installer and executes it. Homebrew is based on Ruby and the install script is no exception.&lt;/p&gt;
&lt;p&gt;By default Homebrew will try to take over your /usr/local directory. If you’ve already installed anything there (MySQL, etc.) then Homebrew will complain. You can install Homebrew anywhere, but then you’ll have to add that directory to your PATH.&lt;/p&gt;
&lt;p&gt;Homebrew also assumes that you’re on a single user system. If that’s not you, then you definitely want to install it to a user-specific location and alter your PATH. But, for most people, the default works just fine.&lt;/p&gt;
&lt;p&gt;Once installed, you control Homebrew using the brew command. You can find packages using brew search, install them using brew install and remove them using brew uninstall. Just like any other package manager, Homebrew tracks package dependencies so it will pull in dependent packages as needed and warn you if you try to uninstall a required package.&lt;/p&gt;
&lt;p&gt;The major benefits of Homebrew over MacPorts are simplicity, lack of intrusiveness, and speed. Homebrew’s recipes try very hard to use the existing tools and libraries in OS/X, so they tend to build much faster and require fewer dependent libraries. The recipes themselves are Ruby scripts and are small, simple to understand and easy to create and modify. But, honestly, if all you want is to install wget and newer versions of git and other open source tools, you’ll never need to look at or understand Homebrew’s recipes. Just brew install wget, brew install git and be happy.&lt;/p&gt;</summary><category term="Homebrew"></category><category term="MacPorts"></category></entry><entry><title>利用.htaccess简单实现的10个功能</title><link href="http://hackecho.com/2012/04/ten-extra-functions-with-htaccess-file/" rel="alternate"></link><updated>2012-04-12T21:12:48-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-04-12:2012/04/ten-extra-functions-with-htaccess-file/</id><summary type="html">&lt;p&gt;简单来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。&lt;/p&gt;
&lt;p&gt;通过htaccess文件，可以帮我们实现一些实用的功能，这里简单列举了10个，如果有更好的欢迎补充。（顺便推荐一个&lt;a href="http://www.wangqu.org/htaccess/"&gt;htaccess文件在线生成器&lt;/a&gt;）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防盗链&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;天堂皓月的几篇文章被人整篇复制了过去，图片地址都没变。不过数量不多，还可以承受。但对于流量较大的网站来说，图片盗链可是流量灾难。可以通过以下配置来防止别人盗用你的图片：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;RewriteBase&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;RewriteCond&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;HTTP_REFERER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!^&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="n"&gt;RewriteCond&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;HTTP_REFERER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!^&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//(www.)?yoursite.com/.*$ [NC]&lt;/span&gt;
&lt;span class="n"&gt;RewriteRule&lt;/span&gt; &lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;swf&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;flv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;302&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;防止目录浏览&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有时候目录浏览是有用的，但大部分情况会有安全问题。为了让网站更安全，可以通过如下配置来禁用这个功能：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Options&lt;/span&gt; &lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Indexes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;301永久重定向&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;博主前段时间将uutroy.com更换为hackecho.com时，就将原域名做了301永久重定向，不但流量没有丢失，搜索引擎也迅速更新了收录。或者当要更改网站URL结构的时候，做301重定向也是一个好方法：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Redirect&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.yoursite.com/article.html http://www.yoursite.com/archives/article&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;个性化 404 错误页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;404页面是什么就不用解释了吧，通过下面的简单配置可以自定义404页面：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ErrorDocument&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;404.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;设置目录的默认页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假如需要为不同的目录设置不同的默认页面，可以很容易的通过 .htaccess 实现：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;DirectoryIndex&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;基于referer来限制网站访问&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你想屏蔽一些网站的访问时（比如垃圾评论网站），可以这样配置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class="err"&gt;mod_rewrite.c&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
RewriteEngine on  RewriteCond %{HTTP_REFERER} spamteam.com &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ow"&gt;OR&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
RewriteCond %{HTTP_REFERER} trollteam.com &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ow"&gt;OR&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
RewriteRule .* – &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;F&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ifModule&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;限制PHP上传文件大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个是设置最大的上传文件大小，第二个是设置最大的POST请求大小，第三个PHP脚本最长的执行时间，最后一个是脚本解析上传文件的最长时间：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;php_value&lt;/span&gt; &lt;span class="n"&gt;upload_max_filesize&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="n"&gt;php_value&lt;/span&gt; &lt;span class="n"&gt;post_max_size&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="n"&gt;php_value&lt;/span&gt; &lt;span class="n"&gt;max_execution_time&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="n"&gt;php_value&lt;/span&gt; &lt;span class="n"&gt;max_input_time&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;压缩文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以通过压缩文件来减少网络流量和页面装载时间：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xhtml&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;javascript&lt;/span&gt;
&lt;span class="n"&gt;AddOutputFilterByType&lt;/span&gt; &lt;span class="n"&gt;DEFLATE&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;javascript&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;缓存文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一点还需要解释吗？&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;FilesMatch&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;.(flv|gif|jpg|jpeg|png|ico|swf|js|css|pdf)$&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Header set Cache-Control &amp;quot;max-age=2592000&amp;quot;
&lt;span class="nt"&gt;&amp;lt;/FilesMatch&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;添加尾部的反斜杠&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很多人都说添加尾部反斜杠有益于SEO：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class="err"&gt;mod_rewrite.c&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
RewriteCond %{REQUEST_URI} /+&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;+$
RewriteRule ^(.+&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)$ %{REQUEST_URI}/ &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="htaccess"></category></entry><entry><title>WordPress与Suhosin冲突的解决办法</title><link href="http://hackecho.com/2012/03/solution-to-the-conflict-of-wordpress-and-suhosin/" rel="alternate"></link><updated>2012-03-23T15:18:14-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-03-23:2012/03/solution-to-the-conflict-of-wordpress-and-suhosin/</id><summary type="html">&lt;p&gt;最近时不时收到宕机邮件，然后查一下VPS的使用情况，发现CPU飙升，IO飙升，SSH进去之后，满屏的out_of_memory（PHP进程高负载）！查各种日志都找不到具体原因，往往是重启一下VPS就好了。昨天晚上突然又出现了这种情况，于是决定好好把日志研究一下了。&lt;/p&gt;
&lt;p&gt;排除了木马和后门的因素，在syslog里发现出现最多的是这个：&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/03/wp-suhosin.jpg"&gt;&lt;img alt="" src="/static/images/2012/03/wp-suhosin.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实至今我也不是很清楚到底是什么原因，参考了几篇网上的文章，改过之后暂时正常了。但这种情况为什么最近会出现还是个疑问。&lt;/p&gt;
&lt;p&gt;主要参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/droko/archive/2012/03/06/2381966.html"&gt;《PHP进程高负载》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://changblog.com/582"&gt;《大战suhosin》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://changblog.com/981"&gt;《解决wordpress引起的suhosin报错》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://core.trac.wordpress.org/ticket/13847"&gt;《WP increasing the memory above other server limit》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://demon.tw/software/suhosin-php.html"&gt;《Suhosin，PHP保护神？》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先观察些时日再说。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;补充（2012-3-23 20:40）：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;放上我的临时解决办法：&lt;/p&gt;
&lt;p&gt;对于上面日志中的问题，原因是suhosin的memory_limit限制了脚本内存的分配。解决办法是在php.ini中搜索memory_limit关键字，修改如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于get和post数据大小限制的问题，修改/etc/php5/conf.d/suhosin.ini，增加下列配置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;

&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_vars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_varname_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_vars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_name_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_vars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_value_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_name_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_vars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_totalname_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;
&lt;span class="n"&gt;suhosin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_name_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果此方法不生效或找到更好的办法，本文会继续更新。&lt;/p&gt;</summary><category term="Suhosin"></category></entry><entry><title>如何搭建个人独立博客</title><link href="http://hackecho.com/2012/03/how-to-create-a-personal-blog/" rel="alternate"></link><updated>2012-03-22T15:09:09-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-03-22:2012/03/how-to-create-a-personal-blog/</id><summary type="html">&lt;p&gt;最近一些朋友问起怎样搭建独立博客，想到以前自己折腾时的迷茫和走过的一些弯路，觉得有必要稍微总结一下。这里简单描述一下整体上的步骤吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;严正声明：&lt;/strong&gt;由于文章的特殊性，其中难免会涉及到一些域名商、主机商等，绝不存在任何广告嫌疑或其它意图，特此声明。&lt;/p&gt;
&lt;p&gt;文章结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;独立博客与BSP的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申请域名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器主机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域名绑定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;独立博客与BSP的区别&lt;/h3&gt;
&lt;p&gt;BSP是指Blog Service Provider，意指第三方博客服务提供商，如新浪博客、搜狐博客等。BSP提供给你的是一个写博客的平台，对于整站程序或模板都无法实现自定义，而且域名只能是二级域名或三级域名（如xxx.blog.sina.com.cn）。而独立博客之所以“独立”，是因为其高度的自定义。比如域名是顶级的，还可以自选，博客程序自己可以选择，还可以定制，模板的话也可以自由定制。只要你能想到的，都可以做到。&lt;/p&gt;
&lt;p&gt;但独立博客也有其缺点，如域名和主机要自己买，数据备份要自己做（弄不好会全站丢失数据），人气需要自己建立等等。不过这些对于我们来讲都是可以学习的，而且这些知识对于我们软件学院学生来讲迟早都要接触到，为何不早点利用呢。&lt;/p&gt;
&lt;p&gt;写独立博客还有很多很多好处，写得时间久了自然能体会到。具体可以参看这篇文章&lt;a href="http://www.hackecho.com/archives/38.html"&gt;《为什么你应该从现在开始就写博客》&lt;/a&gt;，这里呢只说一点我的小感受，就是每天晚上的时候自己都会想，今天要写什么博客呢，然后就会在脑海中把整整一天都干了些什么、学了些什么回想一遍。但大多情况都发现自己一天其实没学到什么...然后就会BS自己一下，不断告诉自己，每天都要创造价值！&lt;/p&gt;
&lt;h3&gt;申请域名&lt;/h3&gt;
&lt;p&gt;既然是独立博客，当然要有一个独立域名，所以申请域名是第一步。个人不是很建议在国内注册域名，原因大家心里都明白哈。&lt;/p&gt;
&lt;p&gt;首先是域名的选取问题。.com是比较合适的，当然也有人倡导个人博客用.me域名更酷。仁者见仁，智者见智，除了.org/.gov/.edu等专有域名外，其它都是可以的。.cn由于国家的最新政策，个人已经不允许申请了，那个cn域名白菜价的时代已经过去了：）至于域名名称，全凭个人爱好了，以前我的是uutroy.com，后来换成了现在Hackecho.com，原域名做了一个永久301重定向，依旧能用。域名最好一次选好，不要频繁更换，否则影响很大...&lt;/p&gt;
&lt;p&gt;对于域名注册商，Godaddy.com和name.com口碑不错，Godaddy支持支付宝，网上还有很多优惠码，推荐使用。&lt;/p&gt;
&lt;h3&gt;服务器主机&lt;/h3&gt;
&lt;p&gt;这是最头疼的一个问题。以前瞎折腾的时候，主机这儿吃过不少亏，总的来说，建议大家买香港或美国的主机，如果想尽情折腾可以考虑使用VPS。很重要的一点：大多数博客程序（如Wordpress）都是PHP系统，所以一定要买PHP的主机，当然如果是其它语言的系统，就买相应的主机即可。&lt;/p&gt;
&lt;p&gt;香港的主机我在衡天小张那里买过几款，使用情况还不错，ping值也不是很高，推荐一下。另外Wopus的主机也可以（新软攀峰官网的主机使用的是Wopus的VPS合租，可以&lt;a href="http://bjtuxrpf.com"&gt;点击这里&lt;/a&gt;测试）。&lt;/p&gt;
&lt;p&gt;美国主机商很多很多，我们可以选择的也很多。这里简单列举几家，因为没有全部试用过，所以不做具体评论。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bluehost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hawkhost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HostGator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HostMonster&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DreamHost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等等等等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VPS的话推荐Linode VPS，现在我用的就是Linode Fremont机房的512配置。&lt;/p&gt;
&lt;p&gt;关于各种主机之间的差别，比如是否独立IP，DA或CPanel面板的区别，子目录绑定啥的，现在还不比完全弄明白，慢慢地也就知道了：）&lt;/p&gt;
&lt;p&gt;IDC市场水太深，涉足需谨慎。&lt;/p&gt;
&lt;h3&gt;域名绑定&lt;/h3&gt;
&lt;p&gt;有了域名，有了主机，接下来就是把域名绑定到主机上，就可以通过域名访问主机了。下面以Godaddy为例：&lt;/p&gt;
&lt;p&gt;由于Godaddy自己提供的DNS服务器在中国几乎全线被封，所以一般第一步我们要更换DNS解析服务器。我用的是国内的DNSPOD，还不错。具体怎样更改，完全又可以写篇博客了，而且网上现有的教程很多，本着高重用性的原则，这里不再赘述，请自行Google之。&lt;/p&gt;
&lt;p&gt;更改DNS服务器一般几十分钟或1-2个小时生效，然后就可以在DNSPOD里管理自己的域名解析了。&lt;/p&gt;
&lt;p&gt;最基本的是要添加两条A记录解析到主机IP，一条www的，一条@的，分别对应www.example.com和example.com。更多的请参考DNSPOD的帮助文档，非常详细。&lt;/p&gt;
&lt;p&gt;DNSPOD的解析生效速度简直就是神速，我这里一般情况下几十秒生效。当然也有几个小时生效的可能性发生，那就只能等了。&lt;/p&gt;
&lt;h3&gt;安装程序&lt;/h3&gt;
&lt;p&gt;解析生效后，就可以安装博客程序了。可以选择Wordpress，或者国人开发的Typecho或Emlog等等。我使用的是Wordpress，推荐一下，相信你也会喜欢上它的。&lt;/p&gt;
&lt;p&gt;将Wordpress的文件上传到服务器站点目录，建立好数据库，然后访问你的域名，一路“下一步”就OK了。&lt;/p&gt;
&lt;h3&gt;开始使用&lt;/h3&gt;
&lt;p&gt;OK，Enjoy it！&lt;/p&gt;</summary><category term="Wordpress"></category><category term="独立博客"></category></entry><entry><title>[转载] 给浮躁的软件业同仁</title><link href="http://hackecho.com/2012/03/letter-to-software-colleagues/" rel="alternate"></link><updated>2012-03-22T00:18:09-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-03-22:2012/03/letter-to-software-colleagues/</id><summary type="html">&lt;p&gt;&lt;strong&gt;文章来源：网络    作者：未知&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中国有很多小朋友，他们18,9岁或21,2岁，通过自学也写了不少代码，他们有的代码写的很漂亮，一些技术细节相当出众，也很有钻研精神，但是他们被一些错误的认识和观点左右，缺乏对系统，对程序的整体理解能力，这些人，一个网上的朋友说得很好，他们实际是fans，压根没有资格称为程序员，但是据我所知，不少小网络公司的Cfans,拿着吓人的工资，做着吓人的项目，项目的结局通常也很吓人。&lt;/p&gt;
&lt;p&gt;程序员基本素质：&lt;/p&gt;
&lt;p&gt;作一个真正合格的程序员，或者说就是可以真正合格完成一些代码工作的程序员，应该具有的素质：&lt;/p&gt;
&lt;p&gt;1.团队精神和协作能力&lt;/p&gt;
&lt;p&gt;把它作为基本素质，并不是不重要，恰恰相反，这是程序员应该具备的最基本的，也是最重要的安身立命之本。把高水平程序员说成独行侠的都是在呓语，任何个人的力量都是有限的，即便如linus这样的天才，也需要通过组成强大的团队来创造奇迹，那些遍布全球的为linux写核心的高手们，没有协作精神是不可想象的。独行侠可以作一些赚钱的小软件发点小财，但是一旦进入一些大系统的研发团队，进入商业化和产品化的开发任务，缺乏这种素质的人就完全不合格了。&lt;/p&gt;
&lt;p&gt;2.文档习惯&lt;/p&gt;
&lt;p&gt;说高水平程序员从来不写文档的肯定是乳臭未干的毛孩子，良好的文档是正规研发流程中非常重要的环节，作为代码程序员，30％的工作时间写技术文档是很正常的，而作为高级程序员和系统分析员，这个比例还要高很多。缺乏文档，一个软件系统就缺乏生命力，在未来的查错，升级以及模块的复用时就都会遇到极大的麻烦。&lt;/p&gt;
&lt;p&gt;3.规范化，标准化的代码编写习惯&lt;/p&gt;
&lt;p&gt;作为一些外国知名软件公司的规矩，代码的变量命名，代码内注释格式，甚至嵌套中行缩进的长度和函数间的空行数字都有明确规定，良好的编写习惯，不但有助于代码的移植和纠错，也有助于不同技术人员之间的协作。&lt;/p&gt;
&lt;p&gt;fans叫嚣高水平程序员写的代码旁人从来看不懂，这种叫嚣只能证明他们自己压根不配自称程序员。代码具有良好的可读性，是程序员基本的素质需求。&lt;/p&gt;
&lt;p&gt;再看看整个linux的搭建，没有规范化和标准化的代码习惯，全球的研发协作是绝对不可想象的。&lt;/p&gt;
&lt;p&gt;4.需求理解能力&lt;/p&gt;
&lt;p&gt;程序员需要理解一个模块的需求，很多小朋友写程序往往只关注一个功能需求，他们把性能指标全部归结到硬件，操作系统和开发环境上，而忽视了本身代码的性能考虑，有人曾经放言说写一个广告交换程序很简单，这种人从来不知道在百万甚至千万数量级的访问情况下的性能指标是如何实现的，对于这样的程序员，你给他深蓝那套系统，他也做不出太极链的并访能力。性能需求指标中，稳定性，并访支撑能力以及安全性都很重要，作为程序员需要评估该模块在系统运营中所处的环境，将要受到的负荷压力以及各种潜在的危险和恶意攻击的可能性。就这一点，一个成熟的程序员至少需要2到3年的项目研发和跟踪经验才有可能有心得。&lt;/p&gt;
&lt;p&gt;5.复用性，模块化思维能力&lt;/p&gt;
&lt;p&gt;经常可以听到一些程序员有这样的抱怨，写了几年程序，变成了熟练工，每天都是重复写一些没有任何新意的代码，这其实是中国软件人才最大浪费的地方，一些重复性工作变成了熟练程序员的主要工作，而这些，其实是完全可以避免的。&lt;/p&gt;
&lt;p&gt;复用性设计，模块化思维就是要程序员在完成任何一个功能模块或函数的时候，要多想一些，不要局限在完成当前任务的简单思路上，想想看该模块是否可以脱离这个系统存在，是否可以通过简单的修改参数的方式在其他系统和应用环境下直接引用，这样就能极大避免重复性的开发工作，如果一个软件研发单位和工作组能够在每一次研发过程中都考虑到这些问题，那么程序员就不会在重复性的工作中耽误太多时间，就会有更多时间和精力投入到创新的代码工作中去。&lt;/p&gt;
&lt;p&gt;一些好的程序模块代码，即便是70年代写成的，拿到现在放到一些系统里面作为功能模块都能适合的很好，而现在我看到的是，很多小公司软件一升级或改进就动辄全部代码重写，大部分重复性工作无谓的浪费了时间和精力。&lt;/p&gt;
&lt;p&gt;6.测试习惯&lt;/p&gt;
&lt;p&gt;作为一些商业化正规化的开发而言，专职的测试工程师是不可少的，但是并不是说有了专职的测试工程师程序员就可以不进行自测；软件研发作为一项工程而言，一个很重要的特点就是问题发现的越早，解决的代价就越低，程序员在每段代码，每个子模块完成后进行认真的测试，就可以尽量将一些潜在的问题最早的发现和解决，这样对整体系统建设的效率和可靠性就有了最大的保证。&lt;/p&gt;
&lt;p&gt;测试工作实际上需要考虑两方面，一方面是正常调用的测试，也就是看程序是否能在正常调用下完成基本功能，这是最基本的测试职责，可惜在很多公司这成了唯一的测试任务，实际上还差的远那；第二方面就是异常调用的测试，比如高压力负荷下的稳定性测试，用户潜在的异常输入情况下的测试，整体系统局部故障情况下该模块受影响状况的测试，频发的异常请求阻塞资源时的模块稳定测试等等。当然并不是程序员要对自己的每段代码都需要进行这种完整测试，但是程序员必须清醒认识自己的代码任务在整体项目中的地位和各种性能需求，有针对性的进行相关测试并尽早发现和解决问题，当然这需要上面提到需求理解能力。&lt;/p&gt;
&lt;p&gt;7.学习和总结的能力&lt;/p&gt;
&lt;p&gt;程序员是人才很容易被淘汰，很容易落伍的职业，因为一种技术可能仅仅在三两年内具有领先性，程序员如果想安身立命，就必须不断跟进新的技术，学习新的技能。&lt;/p&gt;
&lt;p&gt;善于学习，对于任何职业而言，都是前进所必需的动力，对于程序员，这种要求就更加高了。但是学习也要找对目标，一些小coding有些codingTO就是这样的coding上只是一些Cfans们，他们也津津乐道于他们的学习能力，一会学会了asp，一会儿学会了php，一会儿学会了jsp，他们把这个作为炫耀的资本，盲目的追逐一些肤浅的，表面的东西和名词，做网络程序不懂通讯传输协议，做应用程序不懂中断向量处理，这样的技术人员，不管掌握了多少所谓的新语言，永远不会有质的提高。&lt;/p&gt;
&lt;p&gt;善于总结，也是学习能力的一种体现，每次完成一个研发任务，完成一段代码，都应当有目的的跟踪该程序的应用状况和用户反馈，随时总结，找到自己的不足，这样逐步提高，一个程序员才可能成长起来。&lt;/p&gt;
&lt;p&gt;一个不具备成长性的程序员，即便眼前看是个高手，建议也不要选用，因为他落伍的时候马上就到了。具备以上全部素质的人，应当说是够格的程序员了，请注意以上的各种素质都不是由IQ决定的，也不是大学某些课本里可以学习到的，需要的仅仅是程序员对自己工作的认识，是一种意识上的问题。&lt;/p&gt;
&lt;p&gt;那么作为高级程序员，以至于系统分析员，也就是对于一个程序项目的设计者而言，除了应该具备上述全部素质之外，还需要具备以下素质：&lt;/p&gt;
&lt;p&gt;1.需求分析能力&lt;/p&gt;
&lt;p&gt;对于程序员而言，理解需求就可以完成合格的代码，但是对于研发项目的组织和管理者，他们不但要理解客户需求，更多时候还要自行制定一些需求，为什么这么说呢？&lt;/p&gt;
&lt;p&gt;一般而言，进行研发任务，也许是客户提出需求，也许是市场和营销部门提出的需求，这时候对于研发部门，他们看到的不是一个完整的需求，通常而言，该需求仅仅是一些功能上的要求，或者更正规些，可能获得一个完整的用户视图；但是这都不够，因为客户由于非技术因素多一些，他们可能很难提出完整和清晰，或者说专业性的性能需求，但是对于项目组织者和规划者，他必须能够清醒认识到这些需求的存在并在完成需求分析报告的时候适当的提出，同时要完整和清晰的体现在设计说明书里面，以便于程序员编码时不会失去这些准则。&lt;/p&gt;
&lt;p&gt;程序设计者必须正确理解用户需求所处的环境，并针对性做出需求的分析，举例而言，同样一个软件通过ASP租用方式发布和通过License方式发布，性能需求可能就是有区别的，前者强调的是更好的支撑能力和稳定性，而后者则可能更强调在各种平台下的普适性和安装使用的简捷性。&lt;/p&gt;
&lt;p&gt;2.项目设计方法和流程处理能力&lt;/p&gt;
&lt;p&gt;程序设计者必须能够掌握不少于两到三种的项目设计方法（比如自顶至下的设计方法，比如快速原型法等等），并能够根据项目需求和资源搭配来选择合适的设计方法进行项目的整体设计。设计方法上选择不当，就会耽误研发周期，浪费研发资源，甚至影响研发效果。&lt;/p&gt;
&lt;p&gt;一个程序设计者还需要把很多功夫用在流程图的设计和处理上，他需要做数据流图以确立数据词典；他需要加工逻辑流图以形成整体的系统处理流程。一个流程有问题的系统，就算代码多漂亮，每个模块多精致，也不会成为一个好的系统。当然，做好流程分析并选择好项目设计方法，都需要在需求分析能力上具有足够的把握。&lt;/p&gt;
&lt;p&gt;3.复用设计和模块化分解能力&lt;/p&gt;
&lt;p&gt;这个似乎又是老调重谈，前面基本素质上不是已经说明了这个问题吗？作为一个从事模块任务的程序员，他需要对他所面对的特定功能模块的复用性进行考虑，而作为一个系统分析人员，他要面对的问题复杂的多，需要对整体系统按照一种模块化的分析能力分解为很多可复用的功能模块和函数，并针对每一模块形成一个独立的设计需求。举个例子，好比是汽车生产，最早每辆汽车都是独立安装的，每个部件都是量身定做的，但是后来不一样了，机器化大生产了，一个汽车厂开始通过流水线来生产汽车，独立部件开始具有一定的复用性，在后来标准化成为大趋势，不同型号，品牌甚至不同厂商的汽车部件也可以进行方便的换装和升级，这时候，汽车生产的效率达到最大化。软件工程也是同样的道理，一个成熟的软件行业，在一些相关项目和系统中，不同的部件是可以随意换装的，比如微软的许多桌面软件，在很多操作模块（如打开文件，保存文件等等）都是复用的同一套功能模块，而这些接口又通过一些类库提供给了桌面应用程序开发者方便挂接，这就是复用化的模块设计明显的一个佐证。&lt;/p&gt;
&lt;p&gt;将一个大型的，错综复杂的应用系统分解成一些相对独立的，具有高度复用性的，并能仅仅依靠几个参数完成数据联系的模块组合，是作为高级程序员和系统分析员一项最重要的工作，合适的项目设计方法，清晰的流程图，是实现这一目标的重要保证。&lt;/p&gt;
&lt;p&gt;4.整体项目评估能力&lt;/p&gt;
&lt;p&gt;作为系统设计人员，必须能够从全局出发，对项目又整体的清醒认识，比如公司的资源配置是否合理和到位，比如工程进度安排是否能最大化体现效率又不至于无法按期完成。评估项目整体和各个模块的工作量，评估项目所需的资源，评估项目可能遇到的困难，都需要大量的经验积累，换言之，这是一种不断总结的累计才能达到的境界。在西方一些软件系统设计的带头人都是很年长的，比如4，50岁，甚至更老，他们在编码方面已经远远不如年轻人那样活络，但是就项目评估而言，他们几十年的经验积累就是最重要和宝贵的财富。中国缺这么一代程序员，主要还不是缺那种年纪的程序员，而是那种年纪的程序员基本上都是研究单位作出来的，都不是从专业的产品化软件研发作出来的，他们没有能积累那种产品化研发的经验，这也是没有办法的事情。&lt;/p&gt;
&lt;p&gt;5.团队组织管理能力&lt;/p&gt;
&lt;p&gt;完成一个项目工程，需要团队的齐心协力，作为项目设计者或研发的主管人，就应当有能力最大化发挥团队的整体力量，技术管理由于其专业性质，不大同于一般的人事管理，因为这里面设计了一些技术性的指标和因素。&lt;/p&gt;
&lt;p&gt;首先是工作的量化，没有量化就很难做到合适的绩效考核，而程序量化又不是简单的代码行数可以计算的，因此要求技术管理人员需要能真正评估一个模块的复杂性和工作量。&lt;/p&gt;
&lt;p&gt;其次是对团队协作模式的调整，一般而言，程序开发的协作通常分为小组进行，小组有主程序员方式的，也有民主方式的，根据程序员之间的能力水平差距，以及根据项目研发的需求，选择合适的组队方式，并能将责权和成员的工作任务紧密结合，这样才能最大发挥组队的效率。&lt;/p&gt;
&lt;p&gt;一个代码水平高的人，未必能成为一个合格的项目研发主管，这方面的能力欠缺往往是容易被忽视的。&lt;/p&gt;
&lt;p&gt;综上可以看到，作为一个主管研发的负责人，一个项目设计者，所需要具备的素质和能力并不是程序代码编写的能力，当然一般情况下，一个程序员通过不断的总结提高达到了这种素质的时候，他所具有的代码编写能力也已经相当不简单了，但是请注意这里面的因果关系，一个高水平的项目设计者通常已经是代码编写相当优秀的人了，但是并不是一个代码相当优秀的程序员就可以胜任项目设计的工作，这里面存在的也不是智商和课本的问题，还是在于一个程序员在积累经验，逐步提升的时候没有意识到应当思考哪方面的东西，没有有意识的就项目的组织和复用设计进行揣摩，没有经常性的文档习惯和总结习惯，不改变这些，我们的合格的项目设计者还是非常欠缺。&lt;/p&gt;
&lt;p&gt;另外，为防止有无聊的人和我较真，补充一点，本文针对目标是作商业化的软件项目和工程，那些科研机构的编程高手，比如算法高手，比如图象处理高手，他们的工作是研究课题而非直接完成商业软件（当然最终间接成为商业产品，比如微软研究院在作的研究课题），因此他们强调的素质可能是另外的东西，这些人（专家），并不能说是程序员，不能用程序员的标准去衡量。&lt;/p&gt;
&lt;p&gt;最后补充一点东西，一个软件项目研发的设计流程是怎样的呢？以通常标准的设计方法为例，（不过笔者喜欢快速原型法）。&lt;/p&gt;
&lt;p&gt;第一个步骤是市场调研，技术和市场要结合才能体现最大价值。&lt;/p&gt;
&lt;p&gt;第二个步骤是需求分析，这个阶段需要出三样东西，用户视图，数据词典和用户操作手册。用户视图是该软件用户（包括终端用户和管理用户）所能看到的页面样式，这里面包含了很多操作方面的流程和条件。数据词典是指明数据逻辑关系并加以整理的东东，完成了数据词典，数据库的设计就完成了一半多。用户操作手册是指明了操作流程的说明书。&lt;/p&gt;
&lt;p&gt;注意，用户操作流程和用户视图是由需求决定的，因此应该在软件设计之前完成，完成这些，就为程序研发提供了约束和准绳，很遗憾太多公司都不是这样做的，因果颠倒，顺序不分，开发工作和实际需求往往因此产生隔阂脱节的现象。&lt;/p&gt;
&lt;p&gt;需求分析，除了以上工作，笔者以为作为项目设计者应当完整的做出项目的性能需求说明书，因为往往性能需求只有懂技术的人才可能理解，这就需要技术专家和需求方（客户或公司市场部门）能够有真正的沟通和了解。&lt;/p&gt;
&lt;p&gt;第三个步骤是概要设计，将系统功能模块初步划分，并给出合理的研发流程和资源要求。作为快速原型设计方法，完成概要设计就可以进入编码阶段了，通常采用这种方法是因为涉及的研发任务属于新领域，技术主管人员一上来无法给出明确的详细设计说明书，但是并不是说详细设计说明书不重要，事实上快速原型法在完成原型代码后，根据评测结果和经验教训的总结，还要重新进行详细设计的步骤。&lt;/p&gt;
&lt;p&gt;第四个步骤是详细设计，这是考验技术专家设计思维的重要关卡，详细设计说明书应当把具体的模块以最‘干净’的方式(黑箱结构）提供给编码者，使得系统整体模块化达到最大；一份好的详细设计说明书，可以使编码的复杂性减低到最低，实际上，严格的讲详细设计说明书应当把每个函数的每个参数的定义都精精细细的提供出来，从需求分析到概要设计到完成详细设计说明书，一个软件项目就应当说完成了一半了。换言之，一个大型软件系统在完成了一半的时候，其实还没有开始一行代码工作。那些把作软件的程序员简单理解为写代码的，就从根子上犯了错误了。&lt;/p&gt;
&lt;p&gt;•第五个步骤是编码，在规范化的研发流程中，编码工作在整个项目流程里最多不会超过1/2，通常在1/3的时间，所谓磨刀不误砍柴功，设计过程完成的好，编码效率就会极大提高，编码时不同模块之间的进度协调和协作是最需要小心的，也许一个小模块的问题就可能影响了整体进度，让很多程序员因此被迫停下工作等待，这种问题在很多研发过程中都出现过。编码时的相互沟通和应急的解决手段都是相当重要的，对于程序员而言，bug永远存在，你必须永远面对这个问题，大名鼎鼎的微软，可曾有连续三个月不发补丁的时候吗？从来没有！&lt;/p&gt;
&lt;p&gt;第六个步骤是测试&lt;/p&gt;
&lt;p&gt;测试有很多种：按照测试执行方，可以分为内部测试和外部测试；按照测试范围，可以分为模块测试和整体联调；按照测试条件，可以分为正常操作情况测试和异常情况测试；按照测试的输入范围，可以分为全覆盖测试和抽样测试。以上都很好理解，不再解释。&lt;/p&gt;
&lt;p&gt;总之，测试同样是项目研发中一个相当重要的步骤，对于一个大型软件，3个月到1年的外部测试都是正常的，因为永远都会又不可预料的问题存在。&lt;/p&gt;
&lt;p&gt;完成测试后，完成验收并完成最后的一些帮助文档，整体项目才算告一段落，当然日后少不了升级，修补等等工作，只要不是想通过一锤子买卖骗钱，就要不停的跟踪软件的运营状况并持续修补升级，知道这个软件被彻底淘汰为止。&lt;/p&gt;
&lt;p&gt;写这些步骤算不上卖弄什么，因为实话讲我手边是一本《软件工程》，在大学里这是计算机专业的必修课程，但是我知道很多程序员似乎从来都只是热衷于什么《30天精通VC》之类的，他们有些和我一样游击队出身，没有正规学过这个专业，还有一些则早就在混够学分后就把这些真正有用的东西还给了老师。&lt;/p&gt;
&lt;p&gt;fans乱嚷嚷，混淆视听，实际上真正的技术专家很少在网上乱发帖子的，如笔者这样不知天高地厚的，其实实在是算不上什么高手，只不过看不惯这种对技术，对程序员的误解和胡说，只好挺身而出，做拨乱反正之言，也希望那些还fans们能认真想想，走到正途上，毕竟那些聪明的头脑还远远没有发挥应有的价值。沉迷于一些错误人士的coding&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;从程序员升级到工程师大多数象我这样对软件有浓厚兴趣的人，毕业后义无反顾地走进了企业，开始了程序员的生涯。那时，我们迷恋“大全”、“秘籍”一类的书籍，心中只有代码。当我看到一行行枯燥的代码变成了能够打电话的设备，变成了屏幕上漂亮的表格，变成了动听的音乐，成就感油然而生。我觉得自己也是一个出色的程序员了。在用户的机房中苦熬三昼夜解决软件的bug，也成了一种可以夸耀的资历。五年前的某一天，我把曾经让我兴奋自豪的大量代码和少得可怜的文档移交之后，来到了华为。这里有更多的年轻人，我如鱼得水，可以充分发挥自己的想象力。依然是代码，依然是匆匆地在纸上记下稍纵即逝的灵感（我们把它称作文档），依然是无休止地和bug作斗争。当有一天，一个新来的同事拿着署着我的大名的文档，小心翼翼地来问我时，我发现自己好象有点不认识它了。我心里有点沮丧，再看看代码，发现文档上记录的一些灵感已面目全非。我当时不知道那位新来的同事感受如何，但我从那时起，好象意识到什么。现在来看，那时的很多事情都是事倍功半。&lt;/p&gt;
&lt;p&gt;去年年底，公司派我到印度从事项目开发，学习印度的软件开发管理方法。一种久违的冲动在心底升起。印度，我已去过两次，虽说是走马观花，但是，印象还是比较深刻。我在访问过程中和印度的工程师交流过，他们言谈中透着自信。他们给我讲解正在做的软件的测试环境，给我看他们写的单元测试文档。当我看到一个软件模块的单元测试用例有三百多页时，我觉得心里很是沉重。当我第三次踏上这片土地时，我又见到了熟悉的人们，明亮的眼睛，温和的笑容，随意的穿着，风驰电掣的摩托，还有大学校园中穿着拖鞋，手抱书本的年轻人。&lt;/p&gt;
&lt;p&gt;我也见到了我的项目经理，一个个子较高，瘦瘦的年轻人，据说刚从美国回来，已工作了五、六年。我听了心里很高兴，这回要一招一式地学两手。需求分析的时间是一个月，项目经理和我们（实际上代表客户）讨论了proposal中的内容，确定每一项都是需要的。然后他把模块大致划分了一下，开始进入计划中的学习阶段。每个人在学习阶段要写出功能描述的胶片，给其他人讲解，不知不觉中，项目组的所有人对项目有了整体的了解。&lt;/p&gt;
&lt;p&gt;他还安排了一些培训，如他们公司的软件开发模型、项目组中各角色的定义，以后及时的培训不断，只要项目组中有需求，他总是把qa或相关的人请来，培训很专业。需求分析完成后提交了一份四十多页的文档，当我看到这份英文文档中我写的部分整整齐齐地列在其中时，我的感觉很复杂，有些喜悦，但更多的是苦涩，我以前怎么就从来没有这样做过需求分析呢。&lt;/p&gt;
&lt;p&gt;在我写文档的过程中，qa给我们培训过srs的写作模板，后来我还是不放心，让他们一个有经验的工程师写了一段，我们再琢磨着照着写。这份srs虽然是多个人合写，但风格一致，内容详实。更为可贵的是，一直到最后，这份需求分析的内容都没有改过，以至于我们没有机会走一下他们的需求更改流程。&lt;/p&gt;
&lt;p&gt;需求分析是项目的第一阶段，第二阶段的开发时间要根据需求分析的结果来确定。当对方的首席技术官（相当于我们业务部的总体组长）来和我们讨论计划时，他们已列出了对每个模块的代码行数的预测，可能存在的风险。根据他们公司的生产率－－300行/人月，他得出了项目第二阶段需要多少周。&lt;/p&gt;
&lt;p&gt;我们当时就提出了异议：1）公司对该项目需求很急；2）每月300行是否太少；3）我们还有下载的源代码参考。他解释说，300行/人月是使得项目能达到他们质量标准的经验数据，考虑到有源代码参考，生产率最多不能超过350行/人月。&lt;/p&gt;
&lt;p&gt;当他问我们公司的生产率时，我脑袋里转了三个圈，没敢多说，大概六、七百行吧。他沉默了一会儿，然后坚定地说，我们这个计划是建立在确保质量的基础上的，我想你们到印度来开发软件，首先看中的应该是我们印度公司的质量保证。我知道你们不缺乏软件开发人员，你们为什么不选择下载的软件呢。几句话说到了我的痛处，现在国内的弟兄们还在为使用下载软件移植的产品四处奔波呢！&lt;/p&gt;
&lt;p&gt;随后的开发活动有条不紊，我们老老实实地跟着做。系统测试计划、用例，概要设计，集成测试计划、用例，详细设计，单元测试计划、用例，编码，单元测试，集成测试，系统测试。一个完整的v模型开发过程，其中每个过程都有review。当我们对一些设计的方法不太明白时，项目经理给我们发来了相关的资料，我不知道他当时是怎么想的，一些基本的分析、设计方法是十年，甚至二十年前的软件工程书中就讲到的，印度每个计算机专业的人员都是必修这些内容的。而我们除了对一些具体协议的代码很熟之外，对这些常用的方法似乎一无所知。我感到一些羞愧，进城直奔书店，把他给我开列的书找了出来，晚上躺在床上，仔细研读，我仿佛突然又遇到了能给我指点迷津的良师益友。现在印度所已形成了强烈的学习风气。我回来后也推销了700多本书，这些书教我们如何用工程化的方法开发软件，是成为一个软件工程师必读的资料。&lt;/p&gt;
&lt;p&gt;我们的项目经理的计划控制能力很强，当有什么影响到项目计划的事情发生时，如人员辞职、实验室搬家、某一模块预测不准（该模块是我们预测的），他总是采取必要的措施，减少延期，调整计划。刚开始，我们对他们每天上午11点，下午4点下楼喝咖啡还有点意见，后来也跟着喝去了，原来，喝咖啡时的交流非常丰富，从项目管理到设计方法，从技术发展到风土人情，无所不包，对我们互相之间的理解，对团队的气氛很有帮助。我们项目的qa也在适当的时候出现在我们的面前，我们对她的工作只有一些感性认识。她每次参加会议时，手里时常拿着一个check list，项目经理准备相应的资料，回答一些问题，她打着勾，或写着项目经理的解释。她给我们做培训时也很耐心，体现出很好的职业素养，我至今还在怀念她给我们的帮助。&lt;/p&gt;
&lt;p&gt;我从事软件开发已有九个年头了，可我现在仍然不能说自己是个合格的软件工程师，更不用谈什么合格的管理者。我看到一份报道说，瑞士洛桑一权威机构把中国的科技综合竞争力从原来的第十三位调到二十多位，原因是他们调整了一些评估标准，其中有一条是中国合格工程师的可获得性非常低。想着弟兄们熬红的双眼，四处奔波升级的疲惫身影，我有一个强烈的愿望：快把我们自己升级成合格的工程师吧!&lt;/p&gt;
&lt;p&gt;（全文系转载，但原作者未知。如果侵犯到您的合法权益，请尽快联系我）&lt;/p&gt;</summary><category term="程序员"></category></entry><entry><title>[转]快速构建实时定向抓取集群</title><link href="http://hackecho.com/2012/03/how-to-build-real-time-directional-crawl-cluster/" rel="alternate"></link><updated>2012-03-10T00:53:15-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-03-10:2012/03/how-to-build-real-time-directional-crawl-cluster/</id><summary type="html">&lt;p&gt;定义：&lt;/p&gt;
&lt;p&gt;首先，我们定义一下定向抓取，定向抓取是一种特定的抓取需求，目标站点是已知的，站点的页面是已知的。本文的介绍里面，主要是侧重于如何快速构建一个实时的抓取系统，并不包含通用意义上的比如链接分析，站点发现等等特性。&lt;/p&gt;
&lt;p&gt;在本文提到的实例系统里面，主要用到linux+mysql+redis+django+scrapy+webkit，其中scrapy+webkit作为抓取端，redis作为链接库存储，mysql作为网页信息存储，django作为爬虫管理界面，快速实现分布式抓取系统的原型。&lt;/p&gt;
&lt;h3&gt;名词解析：&lt;/h3&gt;
&lt;p&gt;1.抓取环：抓取环指的是spider在存储中获取url，从互联网上下载网页，然后将网页存储到数据库里面，最后在从存储里面获取下一个URL的一个流程。&lt;/p&gt;
&lt;p&gt;2.Linkbase：链接库的存储模块，包含一般的链接信息；是抓取系统的核心，使用redis存储。&lt;/p&gt;
&lt;p&gt;3.&lt;a href="http://www.w3school.com.cn/xpath/index.asp"&gt;XPATH&lt;/a&gt;：一门在 XML 文档中查找信息的语言，XPath 可用来在 XML 文档中对元素和属性进行遍历， 是 W3C XSLT 标准的主要元素。使用XPATH以及相关工具lib进行链接抽取和信息抽取。&lt;/p&gt;
&lt;p&gt;4.XPathOnClick：一个chrome的插件，支持点击页面元素，获取XPATH路径，用于编辑配置模板。&lt;/p&gt;
&lt;p&gt;5.&lt;a href="http://redis.io/"&gt;Redis&lt;/a&gt;：一个开源的KV的内存数据库，具备很好的数据结构的特征和很高的存取性能。用于存储linkbase信息&lt;/p&gt;
&lt;p&gt;6.&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;：爬虫管理工具，用于模板配置，系统监控反馈。Django在这里主要是用来管理一个数据库，使用Admin功能。&lt;/p&gt;
&lt;p&gt;7.Pagebase：页面库，主要是存储网页抓取的结果，以及页面抽取的结果，和dump交互，使用mysql实现。&lt;/p&gt;
&lt;p&gt;8.&lt;a href="http://scrapy.org/"&gt;Scrapy&lt;/a&gt;：一个开源的机遇twisted框架的python的单机爬虫，该爬虫实际上包含大多数网页抓取的工具包，用于爬虫下载端以及抽取端。&lt;/p&gt;
&lt;p&gt;9.列表页：指的商品页面之外的所有页面&lt;/p&gt;
&lt;p&gt;10.详情页：比如商品B2C的抓取中，特指商品页面，比如：http://item.tmall.com/item.htm?id=10321272374&lt;/p&gt;
&lt;h3&gt;系统架构&lt;/h3&gt;
&lt;p&gt;一：存储 redis+mysql&lt;/p&gt;
&lt;p&gt;链接库（linkbase）是抓取系统的核心，基于性能和效率的考虑，本文采用基于内存的redis和磁盘的mysql为主，对于linkbase主要是存储抓取必须的链接信息，比如url，anchor，等等；对于mysql，则是存放抓取的网页，便于后续的抽取和处理。&lt;/p&gt;
&lt;p&gt;a)PageBase：使用Mysql分库分表，存放网页，如下图：&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/03/pagebase0.png"&gt;&lt;img alt="" src="/static/images/2012/03/pagebase0.png" /&gt;&lt;/a&gt; b)Linkbase：使用Redis集群，存储linkbase信息。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/03/linkbase1.png"&gt;&lt;img alt="" src="/static/images/2012/03/linkbase1.png" /&gt;&lt;/a&gt; 几个基本的数据结构：&lt;/p&gt;
&lt;p&gt;1：抓取队列 (candidate list)&lt;/p&gt;
&lt;p&gt;分为待抓取的url队列和更新的url队列；队列存放urlhash，使用redis的list数据结构，对于新提取的url，push到对应的列表里面，对于spider抓取模块，从list pop得到。对于一个站点而言，抓取队列有两种类型：列表页抓取队列和详情页抓取队列。&lt;/p&gt;
&lt;p&gt;2：链接库 (linkbase)&lt;/p&gt;
&lt;p&gt;链接库实际上是存储链接信息的DB；Key是urlhash，Value是linkinfo，包含url，purl，anchor，xpath。。。；在redis使用hash存储，直接存放在redis的里面。KV链接库，不区分页面类型。&lt;/p&gt;
&lt;p&gt;3：已抓取集合（crawled_set）&lt;/p&gt;
&lt;p&gt;已抓取集合指的是当前已经下载的页面的urlhash，存放已经抓取的网页，使用redis的set实现，set的key是urlhash，score是时间戳，已抓取集合主要是用来记录哪一些页面已经抓取和抓取的时间，用于后续的更新页面调度以及抓取信息的统计。同抓取队列一样，每一个站点有两种类型的已抓取集合，详情页和列表页&lt;/p&gt;
&lt;p&gt;二：调度模块：&lt;/p&gt;
&lt;p&gt;调度模块是抓取系统的关键，调度系统的好坏决定了抓取系统的效率；这块是主要是在redis linkbase之上的数据结构，主要有抓取队列、抓取集合、抓取优先级等等数据结构组成；对于一个抓取循环来说：获取URL，提交到抓取模块的待抓取队列，启动抓取，抓取完成之后对新链接进行抽取，最后进入等待抓取的队列里面。&lt;/p&gt;
&lt;p&gt;调度系统的基本配置：&lt;/p&gt;
&lt;p&gt;a)频率（间隔多少秒）&lt;/p&gt;
&lt;p&gt;b)各个抓取列表的选取比例：get_detail，mod_detail，get_list，mod_list&lt;/p&gt;
&lt;p&gt;链接抽取：抽取页面的链接，进行除重，对于新的链接，插入到待抓取列表里&lt;/p&gt;
&lt;p&gt;内容抽取：按照模块的配置XPATH，抽取页面信息，并写入到pagebase中。&lt;/p&gt;
&lt;p&gt;离线调度：按照更新的比例，从crawled_set里面，定期选取url进入Mod队列里面进行刷新。&lt;/p&gt;
&lt;p&gt;三：抓取模块：&lt;/p&gt;
&lt;p&gt;抓取模块是抓取的必要条件，抓取模块来说，重要的是应付互联网上各式的问题，以及如何实现对对方站点的ip平衡，当然，这块是和调度系统的紧密结合的，对于抓取模块而言，本文主要使用scrapy工具包里面的下载模块。&lt;/p&gt;
&lt;p&gt;首先，抓取模块从linkbase获取对应站点的抓取url，进行页面下载，然后将页面信息写回到pipeline中，并完成链接抽取和页面抽取，同时调用调度模块，插入到linkbase和pagebase中。&lt;/p&gt;
&lt;p&gt;下载端设计：&lt;/p&gt;
&lt;p&gt;IP：每台机器需要配置多个物理公网IP，下载的时候，随机选择一个IP下载
抓取频度调整：读取配置文件，按照配置文件的抓取频率进行选取url&lt;/p&gt;
&lt;p&gt;四：配置界面：&lt;/p&gt;
&lt;p&gt;配置界面主要是对抓取系统的管理和配置，包括：站点feed、页面模块抽取、报表系统的反馈等等。&lt;/p&gt;
&lt;p&gt;类似于通用的抓取架构，本文提到的抓取系统架构如下图：&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/03/archicture1.png"&gt;&lt;img alt="" src="/static/images/2012/03/archicture1.png" /&gt;&lt;/a&gt; 一个完整的抓取数据流：&lt;/p&gt;
&lt;p&gt;1：用户提供种子URL&lt;/p&gt;
&lt;p&gt;2：种子URL进入linkbase中新URL队列中&lt;/p&gt;
&lt;p&gt;3：调度模块选取url进入到抓取模块的待抓取队列中&lt;/p&gt;
&lt;p&gt;4：抓取模块读取站点的配置文件，按照执行的频率进行抓取&lt;/p&gt;
&lt;p&gt;5：抓取的结果返回到pipeline接口中，并完成连接的抽取&lt;/p&gt;
&lt;p&gt;6：新发现的连接在linkbase里面进行dedup，并push到linkbase的新URL模块里面&lt;/p&gt;
&lt;p&gt;7：调度模块选取url进入抓取模块的待抓取队列，goto 4&lt;/p&gt;
&lt;p&gt;8：end&lt;/p&gt;
&lt;h3&gt;系统扩展&lt;/h3&gt;
&lt;p&gt;本文提到的抓取系统，核心是调度和存储模块；其中，抓取，存储，调度都是通过数据进行交互的，因此，模块之间可以任意平行扩展，对于系统规模来说，只需要平行扩展mysql和redis存储服务集群以及抓取集群即可。当然，简单的扩展会带来一些问题：比如垃圾列表页的泛滥，链接库的膨胀等等问题，这些问题后续再讨论吧。&lt;/p&gt;
&lt;p&gt;enjoy&lt;/p&gt;</summary><category term="Django"></category><category term="Scrapy"></category><category term="定向抓取"></category></entry><entry><title>带偏好的爬虫——优先级队列</title><link href="http://hackecho.com/2012/03/preferences-spider-with-priority-queue/" rel="alternate"></link><updated>2012-03-07T15:18:37-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-03-07:2012/03/preferences-spider-with-priority-queue/</id><summary type="html">&lt;p&gt;有时候URL队列不一定要符合“先进先出”的方式，而是把重要的URL优先进行抓取。这种策略也叫做页面选择（Page Selection）。&lt;/p&gt;
&lt;p&gt;那么怎样来判断网页的重要性呢？&lt;/p&gt;
&lt;p&gt;其因素很多，主要有链接的欢迎度、链接的重要度和平均链接深度、网站质量、历史权重等。&lt;/p&gt;
&lt;p&gt;链接的欢迎度主要由反向链接（Backlinks）的数量和质量决定，我们定义为IB(P)。&lt;/p&gt;
&lt;p&gt;链接的重要度，是一个关于URL字符串的函数，仅仅考察字符串本身，比如认为".com"和"home"的URL重要度比".cc"和"map"高，我们定义为IL(P)。&lt;/p&gt;
&lt;p&gt;平均连接深度，计算出全站的平均链接深度，然后认为距离种子站点越近的重要性越高。我们定义为ID(P)。&lt;/p&gt;
&lt;p&gt;如果定义网页的重要性为I(P)，那么其重要度有下面的公式决定：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;IB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;IL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，X和Y两个参数用来调整IB(P)和IL(P)的比例大小，ID(P)由宽度优先的遍历规则保证，因此不作为重要的指标函数。&lt;/p&gt;
&lt;p&gt;实现优先爬虫最简单的方式可以使用优先级队列实现TODO表，并且把每个URL的重要性作为队列元素的优先级。&lt;/p&gt;</summary><category term="优先级队列"></category><category term="爬虫"></category></entry><entry><title>初探Scrapy的架构</title><link href="http://hackecho.com/2012/02/glimpse-of-the-architechture-of-scrapy/" rel="alternate"></link><updated>2012-02-27T13:40:39-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-02-27:2012/02/glimpse-of-the-architechture-of-scrapy/</id><summary type="html">&lt;p&gt;本文由&lt;a href="http://www.hackecho.com"&gt;天堂皓月&lt;/a&gt;翻译自&lt;a href="http://doc.scrapy.org/en/latest/topics/architecture.html"&gt;这篇文章&lt;/a&gt;，转载请注明出处。&lt;/p&gt;
&lt;p&gt;这篇文章将描述Scrapy的架构设计以及它各组件之间的配合。因有些地方发觉翻译之后反不如原文简练易懂，因此部分地方保留了原文。&lt;/p&gt;
&lt;h3&gt;概览&lt;/h3&gt;
&lt;p&gt;下面这幅图简单描述了Scrapy的整体架构，其中绿色的箭头表示Scrapy的数据处理流程。（点击图片可放大）&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/02/scrapy_architecture.png"&gt;&lt;img alt="" src="/static/images/2012/02/scrapy_architecture.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;组件介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Scrapy Engine（Scrapy引擎）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Scrapy引擎主要负责控制各个组件之间的数据处理过程，并在特定动作发生时触发相应的事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scheduler（调度控制器）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;调度控制器从Scrapy引擎接受请求，并将请求列入队列，当Scrapy引擎发出请求时再返回给引擎。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downloader（下载器）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载器主要负责获取网页并将网页返回给Scrapy引擎和Spiders。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spiders（蜘蛛）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spiders are custom classes written by Scrapy users to parse responses and extract items (aka scraped items) from them or additional URLs (requests) to follow.Each spider is able to handle a specific domain (or group of domains).&lt;/p&gt;
&lt;p&gt;For more information see &lt;a href="http://doc.scrapy.org/en/latest/topics/spiders.html#topics-spiders"&gt;&lt;em&gt;Spiders&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Item Pipeline（项目管道）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Item Pipeline is responsible for processing the items once they have been extracted (or scraped) by the spiders. Typical tasks include cleansing, validation and persistence (like storing the item in a database).&lt;/p&gt;
&lt;p&gt;For more information see &lt;a href="http://doc.scrapy.org/en/latest/topics/item-pipeline.html#topics-item-pipeline"&gt;&lt;em&gt;Item Pipeline&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downloader middlewares（下载器中间件）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Downloader middlewares are specific hooks that sit between the Engine and the Downloader and process requests when they pass from the Engine to the Downloader, and responses that pass from Downloader to the Engine. They provide a convenient mechanism for extending Scrapy functionality by plugging custom code.&lt;/p&gt;
&lt;p&gt;大致意思是说，下载器中间件是位于Scrapy引擎和下载器之间的特殊钩子，负责处理Scrapy引擎与下载器之间的请求及响应。通过自定义代码可以方便地拓展Scrapy的功能。&lt;/p&gt;
&lt;p&gt;For more information see &lt;a href="http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#topics-downloader-middleware"&gt;&lt;em&gt;Downloader Middleware&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spider middlewares（蜘蛛中间件）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spider middlewares are specific hooks that sit between the Engine and the Spiders and are able to process spider input (responses) and output (items and requests). They provide a convenient mechanism for extending Scrapy functionality by plugging custom code.&lt;/p&gt;
&lt;p&gt;具体含义可参考下载器中间件。&lt;/p&gt;
&lt;p&gt;For more information see &lt;a href="http://doc.scrapy.org/en/latest/topics/spider-middleware.html#topics-spider-middleware"&gt;&lt;em&gt;Spider Middleware&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Data flow（&lt;strong&gt;数据处理&lt;/strong&gt;）&lt;/h3&gt;
&lt;p&gt;The data flow in Scrapy is controlled by the Engine, and goes like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The Engine opens a domain, locates the Spider that handles that domain, and asks the spider for the first URLs to crawl.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Engine gets the first URLs to crawl from the Spider and schedules them in the Scheduler, as Requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Engine asks the Scheduler for the next URLs to crawl.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Scheduler returns the next URLs to crawl to the Engine and the Engine sends them to the Downloader, passing through the Downloader Middleware (request direction).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the page finishes downloading the Downloader generates a Response (with that page) and sends it to the Engine, passing through the Downloader Middleware (response direction).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Engine receives the Response from the Downloader and sends it to the Spider for processing, passing through the Spider Middleware (input direction).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Spider processes the Response and returns scraped Items and new Requests (to follow) to the Engine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Engine sends scraped Items (returned by the Spider) to the Item Pipeline and Requests (returned by spider) to the Scheduler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The process repeats (from step 2) until there are no more requests from the Scheduler, and the Engine closes the domain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Event-driven networking（事件驱动的网络框架）&lt;/h3&gt;
&lt;p&gt;Scrapy是由&lt;a href="http://twistedmatrix.com/trac/"&gt;Twisted &lt;/a&gt;编写的一个基于Python事件驱动的网络框架，采用非堵塞的方式（a.k.a.异步）处理并发。&lt;/p&gt;
&lt;p&gt;如果要获取更多关于异步编程和Twisted的信息，请参考下面两条链接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://twistedmatrix.com/projects/core/documentation/howto/async.html"&gt;Asynchronous Programming with Twisted&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jessenoller.com/2009/02/11/twisted-hello-asynchronous-programming/"&gt;Twisted - hello, asynchronous programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Scrapy"></category><category term="Python"></category></entry><entry><title>配置MacVim的Pyhton编程环境</title><link href="http://hackecho.com/2012/02/macvim-with-python/" rel="alternate"></link><updated>2012-02-25T22:27:25-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-02-25:2012/02/macvim-with-python/</id><summary type="html">&lt;p&gt;文章由&lt;a href="http://www.hackecho.com"&gt;天堂皓月&lt;/a&gt;翻译自&lt;a href="http://paintincode.blogspot.com/2011/04/mac-vim-setup-for-python-programming.html"&gt;这篇文章&lt;/a&gt;，图片均来自原作者，转载请注明出处。&lt;/p&gt;
&lt;p&gt;已经有很多博客介绍怎样配置Vim的Python编程环境了，这周末我将这些优秀的文章读了一遍，并将我在MacVim配置python编程环境的步骤记录在这篇文章里。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/02/macvim_python.png"&gt;&lt;img alt="" src="/static/images/2012/02/macvim_python.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;安装MacVim和Python&lt;/h3&gt;
&lt;p&gt;下列两种方式中的任一种均可用来安装MacVim。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：通过Mac ports&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先确保你的Mac ports是最新版：&lt;/p&gt;
&lt;p&gt;1 $ sudo port -v selfupdate&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;macvim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;cscope&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;python26&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;方式二：自己编译&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/b4winckler/macvim.git&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;macvim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pythoninterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;macsdk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;10.6&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后键入：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;MacVim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并把MacVim图表拖到/Applications文件夹。&lt;/p&gt;
&lt;p&gt;(source: &lt;a href="https://github.com/b4winckler/macvim/wiki/Building"&gt;MacVim Github&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;外观&lt;/h3&gt;
&lt;p&gt;默认的主题似乎不是那么吸引人。我发现黑色背景对眼睛更好一点，亮色的背景对眼睛刺激性太强。要安装一个新的配色的话，首先需要新建一个文件夹：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，到&lt;a href="http://www.vim.org/scripts/script_search_results.php?keywords=&amp;amp;script_type=color+scheme&amp;amp;order_by=creation_date&amp;amp;direction=descending&amp;amp;search=search"&gt;这里&lt;/a&gt;选择一个配色方案，将下载下来的.vim文件放到刚刚新建的文件夹中。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=2536"&gt;Lucius这个配色&lt;/a&gt;还不错，而且支持亮色和蓝色方案。我们将lucius放到colors文件夹中，然后编辑.vimrc文件，开启语法高亮并设置主题。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;lucius&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vimrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;内容如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;nocompatible&lt;/span&gt;
&lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;
&lt;span class="n"&gt;colorscheme&lt;/span&gt; &lt;span class="n"&gt;lucius&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;colorscheme mustang&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于字体，可以这样设置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;gfn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Monaco&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;h12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是一些其它有用的设置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;tabstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;shiftwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;expandtab&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;softtabstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;smartindent&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;autoindent&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;hlsearch&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;incsearch&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;showmatch&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在新标签中打开文件&lt;/h3&gt;
&lt;p&gt;通常情况下，在Terminal中键入"vi a_new_file"会在一个新的窗口中打开文件。你也许想将新的文件在一个新的tab中打开。&lt;/p&gt;
&lt;p&gt;编辑mvim:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mvim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将下列语句添加在最上方.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后将文件末尾的if结构替换为下面的语句：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Last step: fire up vim.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$gui&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="err"&gt;`$&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;serverlist&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;VIM&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]];&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$binary&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;silent&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$binary&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt; 
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$binary&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;CTags and Tag List&lt;/h3&gt;
&lt;p&gt;安装ctags：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ctags&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装taglist：&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://www.vim.org/scripts/script.php?script_id=273"&gt;这里&lt;/a&gt;下载taglist，并将taglist.vim复制到~/.vim/plugin&lt;/p&gt;
&lt;p&gt;在~/.vimrc中添加：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;
&lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在你的项目目录中运行ctags来生成tags文件，文件中包含了所有类、成员和函数的位置信息。例如，我们在"my_django_project"中运行：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;my_django_project&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ctags&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在.vimrc中，我们将绑定到ctags命令实现快捷的生成tags文件：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;nnoremap&lt;/span&gt; &lt;span class="o"&gt;:!/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ctags&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kinds&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="/static/images/2012/02/tag_list.png"&gt;&lt;img alt="" src="/static/images/2012/02/tag_list.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于ctags的更多用法请Google之。&lt;/p&gt;
&lt;p&gt;在MacVim中，键入:TlistToggle来打开tag list.使用组合键来在窗口之间切换，当光标停留在某个变量上时可以用来跳到变量的定义，用回到之前的位置。在tag list窗口中按空格键打开相应的方法签名。对于tag list中的所有快捷键，参照&lt;a href="http://vim.wikia.com/wiki/Browsing_programs_with_tags"&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;Omni Complete&lt;/h3&gt;
&lt;p&gt;如果你之前用过Visual Studio或Eclipse等IDE，我想你已经知道Omni Complete是干什么的了。&lt;/p&gt;
&lt;p&gt;在~/.vimrc中添加下列代码来打开vim中python的自动完成。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;autocmd&lt;/span&gt; &lt;span class="n"&gt;FileType&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;omnifunc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pythoncomplete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="/static/images/2012/02/omni_complete.png"&gt;&lt;img alt="" src="/static/images/2012/02/omni_complete.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Task list&lt;/h3&gt;
&lt;p&gt;在你的代码中标记TODO和FIXME是个良好的习惯，TaskList插件为我们完成这一任务。&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://www.vim.org/scripts/script.php?script_id=2607"&gt;这里&lt;/a&gt;下载，然后复制到~/.vim/plugin文件夹。&lt;/p&gt;
&lt;p&gt;在MacVim中键入:TaskList打开列表。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/02/task_list.png"&gt;&lt;img alt="" src="/static/images/2012/02/task_list.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Pyflakes&lt;/h3&gt;
&lt;p&gt;Pyflakes用来分析并找出python程序中的错误，对于我来讲这个插件必不可少。&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://www.vim.org/scripts/script.php?script_id=2441"&gt;这里&lt;/a&gt;下载，然后解压到~/.vim/文件夹：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;pyflakes&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="/static/images/2012/02/pyflakes.png"&gt;&lt;img alt="" src="/static/images/2012/02/pyflakes.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;SnipMate&lt;/h3&gt;
&lt;p&gt;TextMate最酷的功能之一就是snippet，如键入"for"按下Tab键就可以自动将for语句块生成。用SnipMate插件，Vim也可以做到这一点。&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://www.vim.org/scripts/script.php?script_id=2540"&gt;这里&lt;/a&gt;下载，解压到~/.vim/文件夹。&lt;/p&gt;
&lt;p&gt;^_^&lt;/p&gt;
&lt;p&gt;更多有趣有用的插件请参考原文，这里不再一一翻译。但其插件不限于原文介绍的那些，大家如果有什么私家珍藏的插件欢迎分享：）&lt;/p&gt;</summary><category term="MacVim"></category><category term="Python"></category></entry><entry><title>找不到libmysqlclient.18.dylib库的解决办法</title><link href="http://hackecho.com/2012/02/solution-to-missing-libmysqlclient-18-dylib/" rel="alternate"></link><updated>2012-02-18T21:16:56-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-02-18:2012/02/solution-to-missing-libmysqlclient-18-dylib/</id><summary type="html">&lt;p&gt;一个问题刚刚搞定（&lt;a href="http://www.hackecho.com/archives/779.html"&gt;见这里&lt;/a&gt;），另一个问题接踵而来。感谢万能的StackOverFlow.&lt;/p&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;在Python Shell中，执行 import MySQLdb ，出现如下提示：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MySQLdb&lt;/span&gt;  
&lt;span class="nx"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;recent&lt;/span&gt; &lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;build/bdist.macosx-10.6-intel/egg/MySQLdb/__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;build/bdist.macosx-10.6-intel/egg/_mysql.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;build/bdist.macosx-10.6-intel/egg/_mysql.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;__bootstrap__&lt;/span&gt;  
&lt;span class="nx"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(/&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;zhaoyulee&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;.python&lt;/span&gt;&lt;span class="na"&gt;-eggs&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;MySQL_python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2.3&lt;/span&gt;&lt;span class="na"&gt;-py2.7-macosx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.6&lt;/span&gt;&lt;span class="na"&gt;-intel.egg-tmp&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_mysql.so&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Library&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;libmysqlclient.18.dylib&lt;/span&gt;  
&lt;span class="nx"&gt;Referenced&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;zhaoyulee&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;.python&lt;/span&gt;&lt;span class="na"&gt;-eggs&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;MySQL_python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2.3&lt;/span&gt;&lt;span class="na"&gt;-py2.7-macosx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.6&lt;/span&gt;&lt;span class="na"&gt;-intel.egg-tmp&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_mysql.so&lt;/span&gt;  
&lt;span class="nx"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;Just creat a symbolic link to the library.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libmysqlclient&lt;/span&gt;&lt;span class="mf"&gt;.18&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libmysqlclient&lt;/span&gt;&lt;span class="mf"&gt;.18&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/6383310/python-mysqldb-library-not-loaded-libmysqlclient-18-dylib"&gt;《Python mysqldb: Library not loaded: libmysqlclient.18.dylib》&lt;/a&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="MySQL"></category></entry><entry><title>Mac OS X上装MySQL for Python的辛酸经历</title><link href="http://hackecho.com/2012/02/install-mysql-for-python-on-mac/" rel="alternate"></link><updated>2012-02-18T20:44:35-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-02-18:2012/02/install-mysql-for-python-on-mac/</id><summary type="html">&lt;p&gt;折腾了一下午，只为一个MySQL for Python...&lt;/p&gt;
&lt;p&gt;记得寒假的时候在家就为装这个折腾了半天，遇到的是同样的问题，但后来稀里糊涂装好了，也没有做笔记。没想到今天又遇到了相同的问题，解决之后，特地记下解决方法。相信跟我同样问题的人很多，而网上却丝毫找不到相关的资料...&lt;/p&gt;
&lt;p&gt;首先说一下安装环境：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;操作系统：Mac OS X Lion&lt;/p&gt;
&lt;p&gt;Python版本：2.7&lt;/p&gt;
&lt;p&gt;MySQL for Python版本：1.2.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;问题：&lt;/h3&gt;
&lt;p&gt;编译MySQL for Python的源码时，出现如下错误提示：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;span class="nl"&gt;error:&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="err"&gt;′&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后第一反应当然是Google之，关于这个error的结果还真不少，但是，如果您正在读这篇文章，就请把Google或百度结果页面关掉吧。我可以非常肯定的告诉你，前几十页之内，没有一个搜索结果可以解决这个问题！&lt;/p&gt;
&lt;p&gt;这个问题的原因，其实是与苹果系统的GCC编译器有关（其实苹果的gcc编译器叫做LLVM，还有一段非常的历史，我记得在某期的《程序员》杂志上看到过，有兴趣的读者可以看这篇文章&lt;a href="http://www.programmer.com.cn/9436/"&gt;《Mac OS X 背后的故事（八）三好学生Chris Lattner的LLVM编译工具链》&lt;/a&gt;。）关于我的一系列苦逼的修复过程我就不重复了，直接公布解决办法吧。&lt;/p&gt;
&lt;h3&gt;解决办法：&lt;/h3&gt;
&lt;p&gt;做连接gcc-4.2到命令llvm-gcc-4.2即可。（当然，这只是一种最笨的方法，更高明方法还没想到）&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;llvm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这条命令的关键是：连接源一定要是llvm-gcc-4.2，不能是gcc，否则会出现更多搜都搜不到的错误！&lt;/p&gt;
&lt;p&gt;然后运行编译命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装成功：&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Processing&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;MySQL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.2.3&lt;/span&gt;  
&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;MySQL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.2.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="MySQL"></category><category term="Python"></category></entry><entry><title>Mac下GBK与UTF8编码文件的批量转换</title><link href="http://hackecho.com/2012/02/convertion-of-gbk-and-utf8-on-mac/" rel="alternate"></link><updated>2012-02-17T00:34:02-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-02-17:2012/02/convertion-of-gbk-and-utf8-on-mac/</id><summary type="html">&lt;p&gt;下载了一个Python改写的C语言100例，结果原作者使用的编码都是GBK，而我现在使用的Sublime Text 2和Textmate等都不支持GBK编码，导致打开全是乱码。网上也没有找到相应的转换工具，只好另辟蹊径。&lt;/p&gt;
&lt;p&gt;关键时刻还是 Terminal 给力，介绍一条shell命令：iconv&lt;/p&gt;
&lt;p&gt;就不细细介绍了，看下面的例子，就都懂了：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;iconv&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;显示可识别的编码名称&lt;/span&gt;
&lt;span class="n"&gt;iconv&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;infomation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;显示可识别的编码名称，将信息存入&lt;/span&gt;&lt;span class="n"&gt;infomation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="err"&gt;文件中&lt;/span&gt;
&lt;span class="n"&gt;iconv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;GB2312&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;转换&lt;/span&gt;&lt;span class="n"&gt;GB2312&lt;/span&gt;&lt;span class="err"&gt;编码的文件&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;为&lt;/span&gt;&lt;span class="n"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;编码，存入&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;iconv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;GB2312&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;BIG5&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;转换&lt;/span&gt;&lt;span class="n"&gt;GB2312&lt;/span&gt;&lt;span class="err"&gt;编码的文件&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;为&lt;/span&gt;&lt;span class="n"&gt;BIG5&lt;/span&gt;&lt;span class="err"&gt;编码，存入&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入正题，我们先cd进入保存所有文件的文件夹，然后执行下列命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;iconv -f GB18030 -t UTF8 {} &amp;gt; {}.py&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面命令中的GB18030，如果你转换前的编码为GB2312，将 GB18030 代替为 GB2312 即可。&lt;/p&gt;
&lt;p&gt;OK，搞定！&lt;/p&gt;
&lt;h3&gt;补充说明：&lt;/h3&gt;
&lt;p&gt;这只是为&lt;strong&gt;批量转换&lt;/strong&gt;而生的方法，如果只是转换一两个文件，则可以直接在右键菜单中选择 服务-&amp;gt;转换选定的简体中文文件 即可。当然，也可以用一款支持GBK的编辑器打开文件后存储一份新的UTF8格式的文件即可。&lt;/p&gt;</summary><category term="GBK"></category><category term="Mac"></category><category term="UTF8"></category></entry><entry><title>[原创Chrome插件]去除Google搜索结果的自动跳转</title><link href="http://hackecho.com/2012/02/how-to-remove-auto-jump-in-google-search-results/" rel="alternate"></link><updated>2012-02-15T17:54:52-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-02-15:2012/02/how-to-remove-auto-jump-in-google-search-results/</id><summary type="html">&lt;p&gt;也许大家和我有一样的体验，在“我们这儿”使用Google搜索时，本来一切正常，突然因为点击了某条结果而导致连接被重置... 不管是与Google的结果统计有关，还是与网络内容审查有关，总之这种跳转极大的影响了我们的使用体验。&lt;/p&gt;
&lt;p&gt;网络上有很多解决办法，比如采用先访问&lt;a href="http://www.google.com/ncr"&gt;www.google.com/ncr&lt;/a&gt;的方法，有将浏览器首选语言更改为英语（美国）的方法，但这些方法都不是最稳定最保险的。为了治本，我们来研究一下此跳转的原理。请看下图：&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/02/1.jpg"&gt;&lt;img alt="" src="/static/images/2012/02/1.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原来，对于每个链接，都有一个onmousedown事件，当我们点击鼠标时，真正的链接地址就会被跳转。&lt;/p&gt;
&lt;p&gt;于是，解决办法：去掉每个a标签的onmousedown事件。&lt;/p&gt;
&lt;p&gt;使用这款插件后，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2012/02/2.jpg"&gt;&lt;img alt="" src="/static/images/2012/02/2.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到：每个a标签的onmousedown事件都被去掉了，点击后链接直接打开！&lt;/p&gt;
&lt;p&gt;当然，这只是非常简单的一个小功能，后续有机会的话会加入更多的功能，敬请期待：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插件下载地址&lt;/strong&gt;：暂无 &lt;/p&gt;</summary><category term="Chrome"></category></entry><entry><title>Git 学习笔记</title><link href="http://hackecho.com/2012/01/git-notes/" rel="alternate"></link><updated>2012-01-29T23:35:33-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-01-29:2012/01/git-notes/</id><summary type="html">&lt;p&gt;学习Git的笔记，会不定期更新。&lt;/p&gt;
&lt;p&gt;我的Github地址：&lt;a href="https://github.com/uutroy"&gt;https://github.com/uutroy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先推荐两篇非常好的入门：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gitimmersion.com/"&gt;Git Immersion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ralfebert.de/tutorials/git/#commit_a"&gt;Git Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般流程：取代码 → 更新到最新版本 → 修改代码 → 提交&lt;/p&gt;
&lt;h2&gt;Creating a new repository&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;取代码及修改全局设置&lt;/h2&gt;
&lt;p&gt;git在创建提交的时候会记录你的名字和email地址，所以你应该告诉git这些内容。可以使用’git config’命令来设置，如果传递参数’-global’ ，它会将这些值记录在~/.gitconfig文件里，作为这些配置的默认值。&lt;/p&gt;
&lt;p&gt;设置用户名与邮箱&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git config –global user.name “name”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git config –global user.email “username@email.com”&lt;/p&gt;
&lt;p&gt;查看设置值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git config user.name&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从已有的git库中提取代码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone git@github.com:appname.git myrepo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;每次更改代码的操作&lt;/h2&gt;
&lt;p&gt;更新本地代码到最新版本（需要merge才能合到本地代码中）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git fetch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;合并更新后的代码到本地&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git merge&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更新代码方式的另一种方法(git pull是git fetch和git merge命令的一个组合)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git pull&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改代码后，查看已修改的内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git diff –cached&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将新增加文件加入到git中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add file1 file2 file3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从git中删除文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git rm file1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git rm -r dir1&lt;/p&gt;
&lt;p&gt;提交修改&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit -m ‘this is memo’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果想省掉提交之前的 git add 命令，可以直接用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit -a -m ‘this is memo’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;commit和commit -a的区别,：&lt;/p&gt;
&lt;p&gt;commit -a相当于：&lt;/p&gt;
&lt;p&gt;第一步：自动地add所有改动的代码，使得所有的开发代码都列于index file中&lt;/p&gt;
&lt;p&gt;第二步：自动地删除那些在index file中但不在工作树中的文件&lt;/p&gt;
&lt;p&gt;第三步：执行commit命令来提交&lt;/p&gt;
&lt;p&gt;提交所有修改到远程服务器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;其它常用命令&lt;/h2&gt;
&lt;p&gt;显示commit日志&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不仅显示commit日志，而且同时显示每次commit的代码改变。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git log -p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回滚代码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git revert HEAD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你也可以revert更早的commit，例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git revert HEAD^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将branchname分支合并到当前分支中。(如果合并发生冲突，需要自己解决冲突)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git merge branchname&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决冲突&lt;/p&gt;
&lt;p&gt;当merge命令自身无法解决冲突的时候，它会将工作树置于一种特殊的状态，并且给用户提供冲突信息，以期用户可以自己解决这些问题。当然在这个时候，未发生冲突的代码已经被git merge登记在了index file里了。如果你这个时候使用git diff，显示出来的只是发生冲突的代码信息。&lt;/p&gt;
&lt;p&gt;在你解决了冲突之前，发生冲突的文件会一直在index file中被标记出来。这个时候，如果你使用git commit提交的话，git会提示：filename.txt needs merge&lt;/p&gt;
&lt;p&gt;在发生冲突的时候，如果你使用git status命令，那么会显示出发生冲突的具体信息。&lt;/p&gt;
&lt;p&gt;在你解决了冲突之后，你可以使用如下步骤来提交：&lt;/p&gt;
&lt;p&gt;第一步(如果需要增加文件)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add file1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考资料：&lt;a href="http://blog.enjoyrails.com/2008/12/31/git%E4%B8%80%E5%88%86%E9%92%9F%E6%95%99%E7%A8%8B/"&gt;《Git一分钟教程》&lt;/a&gt;&lt;/p&gt;</summary><category term="Git"></category></entry><entry><title>Python之禅 - The Zen of Python</title><link href="http://hackecho.com/2012/01/the-zen-of-python/" rel="alternate"></link><updated>2012-01-24T01:36:01-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-01-24:2012/01/the-zen-of-python/</id><summary type="html">&lt;p&gt;初入门Python，在学习Django的数据库操作时被告知，Django在选择所有数据时不是用的SELECT * ，而是会显式地列出所有字段，原因是这样会加快查询速度，同时遵循了Python的一个信条：明确比不明确好。那么Python的这些信条(Zen)到底都有哪些呢，我们来看一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Python Shell中输入 import this 就可以打开The Zen of Python了&lt;/strong&gt;，下面是主要内容：&lt;/p&gt;
&lt;h2&gt;The Zen of Python, by Tim Peters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Beautiful is better than ugly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple is better than complex.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complex is better than complicated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flat is better than nested.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sparse is better than dense.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Readability counts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Special cases aren’t special enough to break the rules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although practicality beats purity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Errors should never pass silently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unless explicitly silenced.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There should be one– and preferably only one –obvious way to do it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although that way may not be obvious at first unless you’re Dutch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now is better than never.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although never is often better than &lt;em&gt;right&lt;/em&gt; now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the implementation is hard to explain, it’s a bad idea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the implementation is easy to explain, it may be a good idea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Namespaces are one honking great idea — let’s do more of those&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浅显易懂，就不再翻译了。共勉。&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>Wordpress提示填写FTP信息的解决办法</title><link href="http://hackecho.com/2012/01/solution-to-need-of-ftp-account-in-wordpress/" rel="alternate"></link><updated>2012-01-14T14:37:12-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-01-14:2012/01/solution-to-need-of-ftp-account-in-wordpress/</id><summary type="html">&lt;p&gt;在上一篇文章《&lt;a href="http://www.hackecho.com/archives/710.html"&gt;VPS折腾记&lt;/a&gt;》中提到在升级Wordpress或添加删除主题和插件的时候需要填写FTP账户信息的问题，提示一般如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要执行请求的操作，WordPress 需要访问您网页服务器的权限。 请输入您的 FTP 登录凭据以继续。 如果您忘记了您的登录凭据（如用户名、密码），请联系您的网站托管商。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，虚拟主机很少会出现这样的情况，如果使用 VPS 的话，这种情况就会比较多。主要原因是网站服务器运行PHP的用户和Wordpress文件夹的所有者不一样，目的就是为了安全，Wordpress在升级时会创建一个临时文件看看owner是不是和当前运行的PHP是否一样，如果不一样，就会出现这个界面。&lt;/p&gt;
&lt;p&gt;第一种解决办法很简单，就是直接在wp-config.php 中加入FTP的配置代码：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// ** FTP SETTINGS FOR AUTO-UPDATE ** //&lt;/span&gt;
&lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="no"&gt;FTP_HOST&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="no"&gt;FTP_USER&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="err"&gt;帐号’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="no"&gt;FTP_PASS&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="err"&gt;密码’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然我们更想从根本上解决问题，那么第二种个方法，就要从用户组下手了。&lt;/p&gt;
&lt;p&gt;针对有高级管理权限的用户，如服务器或 VPS 等管理员，只需将 PHP 和网站目录设置成同一个用户组即可。一般是 www 用户组跑 PHP，所以将网站所在目录内所有文件夹和文件设置成www用户组即可，输入命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;chown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wwwroot&lt;/span&gt;  
&lt;span class="n"&gt;chgrp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wwwroot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;记住将上述命令中的网站目录路径改为自己的路径即可。&lt;/p&gt;</summary><category term="Wordpress"></category></entry><entry><title>VPS折腾记</title><link href="http://hackecho.com/2012/01/vps-struggle/" rel="alternate"></link><updated>2012-01-14T13:58:58-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2012-01-14:2012/01/vps-struggle/</id><summary type="html">&lt;p&gt;实在不爽虚拟主机的性能问题和每天几十封宕机警告，而且主机的一切环境都是虚拟主机商配置好的，没有自由发挥的余地。于是果断决定给博客找个好点的VPS，也为以后博客改版做准备。当然，还有VPN哈哈。&lt;/p&gt;
&lt;p&gt;因为Linode VPS口碑还不错，而且支持ipv6，所以就选它了。折腾了整整一下午一晚上，终于把小博客搬了过来，简单总结一下整个过程以备忘。&lt;/p&gt;
&lt;h2&gt;SSH登陆&lt;/h2&gt;
&lt;p&gt;在Windows上，可以使用Putty来使用SSH。在Mac上，可以直接使用Terminal。命令很简单：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh username@server -p portNumber&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后面的-p portNumber只在主机不是使用标准端口时需要加上，使用时将username和server替换成自己的用户名和地址就可以了。&lt;/p&gt;
&lt;h2&gt;安装LNMP&lt;/h2&gt;
&lt;p&gt;网上普遍说LNMP比LAMP性能要好，虽然我这个小博客也没多少流量，但无折腾不生活，趁年轻多折腾折腾。&lt;/p&gt;
&lt;p&gt;可以选择自己一个一个配置，也可以选择&lt;a href="http://lnmp.org/"&gt;LNMP一键安装包&lt;/a&gt;。当然折腾的前提是要稍微熟悉它，所以暂时用一键安装包了。官方给出了详细的安装步骤（见&lt;a href="http://lnmp.org/install.html"&gt;这里&lt;/a&gt;），这里就不再赘述。对于安装中遇到的各种问题，请看本文第五部分。&lt;/p&gt;
&lt;p&gt;安装完后记住将Nginx和PHP升级到最新版，安装包中的不是最新版。&lt;/p&gt;
&lt;h2&gt;安装Wordpress&lt;/h2&gt;
&lt;p&gt;不知为何，按照LNMP官方教程安装VSFTPD总是不成功，于是放弃之安装了PureFTPd。Wordpress更新时需要FTP支持，所以先配置FTP（这不是必然的，是有一定原因的。）。PureFTPd是直接使用一键安装包中的集成版，非常方便。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./pureftpd.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后根据提示输入相关信息即可。完成后访问http://hackecho.com/ftp即可进行配置，当然首先是给自己添加一个FTP账号了。&lt;/p&gt;
&lt;p&gt;WordPress的安装比较简单，也就是下载、解压，然后访问即可自动安装。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wget http://cn.wordpress.org/wordpress-3.3.1-zh_CN.tar.gz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tar zxvf wordpress-3.3.1-zh_CN.tar.gz&lt;/p&gt;
&lt;p&gt;安装完成后，将先前的博客中的内容导出，在新博客中导入即可。（在导入的过程中出现一个问题，新的系统不识别导出的xml文件，而xml文件是完全没有问题的。经过多次尝试无果，这里采用的方式是直接将原先的整个数据库搬了过来。但直接般库会出现很多问题，一定要仔细修复。）&lt;/p&gt;
&lt;h2&gt;配置伪静态&lt;/h2&gt;
&lt;p&gt;一切都完成后发现博客只有主页可以访问，而其余所有页面都是404。原来是在原先的系统中固定链接采用了自定义结构，而到这里没有对服务器进行伪静态规则配置，所以无法解析地址。尝试改回Wordpress的默认固定链接就可以了，但这会导致博客内所有n页面的地址都发生变化，弄不好谷歌百度会K站的。所以，还是还原回原来的配置吧。&lt;/p&gt;
&lt;p&gt;主要参考了这两篇文章《&lt;a href="http://www.ccvita.com/319.html"&gt;Nginx的Rewrite配置&lt;/a&gt;》《&lt;a href="http://www.ccvita.com/336.html"&gt;Nginx下WordPress的Rewrite&lt;/a&gt;》，完成了伪静态配置。Nginx和Apache还是有区别的。&lt;/p&gt;
&lt;p&gt;以下是我的.htaceess内容：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_filename&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_filename&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_filename&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后记得在Nginx配置文件中的server块中include进去，重启Nginx。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/etc/init.d/nginx restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;遇到的问题及解决办法&lt;/h2&gt;
&lt;p&gt;1、Wordpress无法更新（插件和系统）、无法下载安装插件&lt;/p&gt;
&lt;p&gt;检查目录权限。一般文件夹为755，但我设置成755还是不可以，直接将wp-content文件加777后可以了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;chmod -R 777 wp-content&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、LNMP安装后出现502 Bad Gateway问题&lt;/p&gt;
&lt;p&gt;这个问题在&lt;a href="http://bbs.vpser.net/thread-1144-1-5.html"&gt;这篇帖子&lt;/a&gt;里有详细的叙述，但也许是人品问题，PHP无法编译和启动。后来经过无数次尝试，发现只要将VPS的系统安装为Ubuntu 10.04即可，我原先安装的是ubuntu 11.10。有相同问题的朋友可以试一下。&lt;/p&gt;
&lt;p&gt;3、提示无法定位WordPress Content目录(wp-content)&lt;/p&gt;
&lt;p&gt;在wp-config.php中加入如下代码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if(is_admin()) {add_filter(‘filesystem_method’, create_function(‘$a’, ‘return “direct”;’ ));define( ‘FS_CHMOD_DIR’, 0751 );}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题继续发现中，如果大家还有其它什么问题，欢迎一起讨论。&lt;/p&gt;</summary><category term="VPS"></category></entry><entry><title>[转] 旅行，写作，编程</title><link href="http://hackecho.com/2011/12/journal-writing-and-programming/" rel="alternate"></link><updated>2011-12-11T17:44:47-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-12-11:2011/12/journal-writing-and-programming/</id><summary type="html">&lt;p&gt;感谢外刊IT评论翻译这篇文章，原文地址：&lt;a href="http://www.aqee.net/traveling-writing-programming/"&gt;《旅行，写作，编程》&lt;/a&gt; ，转载请注明原作者地址。&lt;/p&gt;
&lt;p&gt;概括起来，今年到目前为止，我所做的事情包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;花了10个月的时间做世界环游，途经非洲，东南亚，澳洲，中南美洲里的17个国家和地区。这次旅行的主题就是冲浪和摄影。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出席在香港，日本，美国和伦敦举行的会议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启程时给O’Reilly出版公司写了一本书，书名叫做《&lt;a href="http://bit.ly/uFbFJR"&gt;JavaScript Web Applications&lt;/a&gt;》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外写了一本关于&lt;a href="http://arcturo.github.com/library/coffeescript/"&gt;CoffeeScript&lt;/a&gt;的书，很快就会由O’Reilly公司出版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写了大量的开源库，例如&lt;a href="http://spinejs.com/"&gt;Spine&lt;/a&gt;, &lt;a href="https://spinejs.com/mobile"&gt;Spine.Mobile&lt;/a&gt;, &lt;a href="http://maccman.github.com/gfx"&gt;GFX&lt;/a&gt;, 和 &lt;a href="http://github.com/maccman/juggernaut"&gt;Juggernaut&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;筹划了一个创业公司的框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出席伦敦2011&lt;a href="http://futureofwebapps.com/london-2011/"&gt;FOWA&lt;/a&gt;会议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后，我在&lt;a href="https://twitter.com/about/employees"&gt;Twitter&lt;/a&gt;公司找到了一份工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么，让我从一年前开始，那是2010年9月，我刚好从一个我合作创办的公司里出来，尽管这段经历是很有价值的，但无休无止的长时间苦干让我精疲力尽。我回到了英格兰，需要对未来做一些思考。我一直有一个梦想——移居美国(几年就好)，所以，我在Google记事本上写了下面的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生的选择：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;去纽约哥伦比亚大学深造&lt;/p&gt;
&lt;p&gt;坏处 - 非常昂贵，并不一定能学到什么真正有用的东西，无聊?&lt;/p&gt;
&lt;p&gt;好处 - 那是一个纽约的大学！&lt;/p&gt;
&lt;p&gt;写一本书，申请 01 签证&lt;/p&gt;
&lt;p&gt;坏处 - 需要大量的时间，有风险&lt;/p&gt;
&lt;p&gt;好处 - 对事业有好处，有趣&lt;/p&gt;
&lt;p&gt;等待。去纽约度一次假(3个月)。等待创业签证。&lt;/p&gt;
&lt;p&gt;很容易 - 不是那么有趣&lt;/p&gt;
&lt;p&gt;也许选第二个，不行就选3？&lt;/p&gt;
&lt;p&gt;最终我选择了2，我已经对JavaScript web应用研究了很久，我要写一本这方面的书，为什么不边做环游世界的旅行、边写书呢？这也是我一个梦想呀。我从oneworld买了一份环游世界的机票(比你们想象的要便宜)，决定下周去我的第一站，南非。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/rtw.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你从来没有到过非洲，你应该去一次。那里的景色原始而美丽，对那些没有体验过这种景色的人，你很难用言语描绘明白。几年前我就喜欢上了南方，那时我在东海岸做了一个为期3个月的冲浪旅行。这次，我只有一个月的时间，穿越特兰斯凯，从开普敦到德班。当我在南非旅行时，我的写作也开始了，把早期向O’Reilly提交的书的框架里的数章填充了材料。&lt;/p&gt;
&lt;p&gt;特兰斯凯是南非非常具有乡野特色的地方，到处是连绵的小山，一些小村庄和土堆的茅屋。他们仍然沿袭着酋长制度，有一个首领，大多数的当地人靠捕鱼为生。我们在高低不平的土路上颠了两天才到达我心仪的地方，一个美丽的海湾，叫做咖啡湾(Coffee Bay)。在那里，我休整了一下，从网上下载了一些相关资料，为更远的海湾远征做准备。&lt;/p&gt;
&lt;p&gt;我还清晰的记得我们走了数里地来到那个未开垦的海滩，我们从那些一个个被黄沙和小丘孤立的村庄穿行而过。有一个地方，我们要过一条大河，我们需要游过去，我把背包举过头顶，以免里面的相机和iPod遇到水。非洲是一个让你脱离尘世的地方，解放你的思想，重新认识人生最重要的东西是什么。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2011/12/DSC_0164.jpg"&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0164.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一站是香港，在那里，我度过了我的21岁生日，接着，我从陆路由新加坡到越南河内。很多人不相信香港70%的面积由自然公园覆盖，我徒步走了几条精彩的景观路线，非常的精彩壮观，比如：香港龙脊。有几天，我在&lt;a href="http://boot.hk/"&gt;boot.hk&lt;/a&gt;这个网站上闲逛，这是一个协作工作的网站，我顺便教了一个同行的游客如何使用ruby。然后，到了夜里，我跟Soho里的一些&lt;a href="http://couchsurfing.org/"&gt;冲浪爱好者&lt;/a&gt;狂欢到凌晨。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0032.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;从泰国到柬埔寨到越南是我这次旅行中做喜欢的部分，如果你从没有到过亚洲，你绝对应该去一次。这些国家非常的漂亮，气候非常的好，食物美味可口，人们非常友善。吴哥窟是世上最神奇的地方之一，每个人都应该去看看。是&lt;a href="http://stuckincustoms.com/"&gt;Trey Ratcliff的照片&lt;/a&gt;把我吸引到了那里，我的很多其它旅游目的地也是受了他的影响。那个家伙是很多旅游地的第一宣传者。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0031.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在一些无名的小博客中，我听有人说过一个很远的美丽的小岛，在柬埔寨的海边。说小岛的Sihanoukville这个地方有个酒吧，说只能坐小渔船到那里。我，还有几个非常好的朋友，乘坐晚上的大巴，开始寻找这个传说中的酒吧。搜索差不多进行了一整天，每一个问过的酒吧都把我们指向另外一个酒吧。最终，我们问了出来，并在第二天早晨做短程巴士去了那个地方。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0039.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;上面的照片上是海岸边一个10美元一晚的小木屋。从当地居民区离开后，我们的队伍像小岛上唯一的人，我们随性自由的奔跑。白天我们懒懒的躺在海滩上，吃着岛上厨师准备的鲜美可口的水果沙拉，在夜晚，我们在到处是浮游生物的海里游泳。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0115.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;下一站是越南，我们沿着湄公河支流来到一个边界上的小镇，我们是这里唯一的西方人，交流成了最大的问题。幸运的是，我们发现一个也许是镇上唯一会说英语的人，他骑车当我们的向导。当我的信用卡被那里的一个自动取款机吞掉了后，他提供了我很大的帮助！&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0059.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我们的队伍分成了几路，在我到达越南时，我的书正在按计划完成，进行的非常顺利。此时，我在西贡多待了几周，让我在书的好几章上有了重大的进展，正好是中国旧历新年，气氛非常的壮观热闹。&lt;/p&gt;
&lt;p&gt;接着是日本，澳大利亚，新西兰和夏威夷。我很难把我所有的感受都在这篇文章里写出来，但说这是此生难忘的一段历程是不为过的。把如此多的美景都放到一个国家里，太让人赞叹了,我说的正是新西兰。我最喜爱的一段记忆是沿着Wanaka的一个湖边在阳光下跑步，还有就是背着食物和生活用品，徒步数天穿越Routeburn的大山。在这个国家的旅途中，我结识了好几个值得一生相伴的好友。这是一个真正的天堂。&lt;/p&gt;
&lt;p&gt;就在我环绕新西兰的南部岛屿时，我的书终于完成了，提交给了技术编辑校对。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0096.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;接下来是纽约和旧金山，这两个神奇的地方到处是天才的程序员，有些人我很幸运的认识。Techcrunch Disrupt办的很精彩(我高度推荐hackathon)。&lt;/p&gt;
&lt;p&gt;在从纽约到旧金山的中途停留期间，我在各种公司了进行了不少的求职面试，最终在Twitter公司找到了一份做前端开发的工作。要在那里和杰出的团队一起工作，我不能不高兴的颤抖，而去旧金山，同样也是我此生的一个梦想。&lt;/p&gt;
&lt;p&gt;当签证的事办下来了后，我去了中、南美洲旅行，同时开发了我的一个小工程：一个JavaScript MVC框架库，叫做&lt;a href="http://spinejs.com/"&gt;Spine&lt;/a&gt;。我到了哥斯达黎加，巴拿马，秘鲁，Bolvia，和阿根廷。 秘鲁是我的最爱，尽管那里的海拔给我带来了不少麻烦，我大部分的时间都在探险。下面的图片是哥斯达黎加传说中神奇猎鹰，是在我爬下世界最深的峡谷时拍到的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0027.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;当我在哥斯达黎加时，微博上有个叫Roberto的家伙给我发了条信息，说他读了我的书，问我是否有兴趣一起冲浪。我欣然同意，坐上去圣何塞的汽车，在几天后和他会了面。那天我们一起在他海边的公寓里开发Spine和Ruby项目，使用移动硬盘，用汽车电源给笔记本充电。当电量不足后，让太阳能板补充能量，我们去冲浪。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0300.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我推荐大家去写一本书，特别是边旅游边写书。可以想象，如果我不去旧金山去看一看，我可能还在旅途中，做顾问，去创业。当作家并不能让你直接的挣到很多钱，但它绝对能提升你的身份地位，给你带来很多潜在的机会。事实上，写作过程让我真正享受的是，我可以认真深入的研究一个题目。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/12/DSC_0069.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这一年是我这辈子目前为止最好的一年，而我感觉今后的一年会更好。当我如今定居下来后，我并没有感觉旅行对我的吸引力减少了；我始终把签证放到一个口袋里，而另一个口袋里装着钱包，当召唤降临，随时准备离开。&lt;/p&gt;
&lt;p&gt;可是，这篇文章并不是关于我的旅行，它是要发送一个信号：&lt;/p&gt;
&lt;p&gt;对于程序员来说，有个得天独厚的条件，就是这种职业可以远程工作或边旅游边工作，这是其它职业办不到的。当然，也不都是这样，在我的旅途中，我没有碰到第二个跟我的做法相似的程序员。这种情况让人悲哀。我想向程序员们送出的信息是，不要再找借口了，行动起来，你可以做到。一个人只有一生，我可以向你保证，这样的生活才不枉世间走这一遭。&lt;/p&gt;
&lt;p&gt;就像我，我感到极度的幸运，能这样的生活，去发现我的热情所在，去做每天我喜欢做的事情。你可以看出，大部分我现在的境遇并非偶然或侥幸，这是计划，追求，工作的结果。&lt;/p&gt;
&lt;p&gt;一份汗水，一份收成。&lt;/p&gt;
&lt;p&gt;这篇文章的目标不是做一些自我陶醉似的炫耀和大话，而是向大家演示如何立下目标，鼓励大家去做相似的事情。想清楚你现在的处境，这一年内你想得到什么，制定出一系列具体的能让你到达这些目标的步骤。追随你的梦想。&lt;/p&gt;</summary><category term="旅行"></category><category term="写作"></category><category term="编程"></category></entry><entry><title>关于多级分类的一个思考</title><link href="http://hackecho.com/2011/11/thinking-of-multi-level-classification/" rel="alternate"></link><updated>2011-11-19T21:39:56-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-11-19:2011/11/thinking-of-multi-level-classification/</id><summary type="html">&lt;p&gt;最近做的几个项目都设计到了多级分类，不太清楚数据表怎样设计。经过一番探究后，发现一般有以下几种解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每级分类一张表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有一张分类表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一张分类名称表+一张分类关系表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三种方法是参考了Wordpress本身的分类方法，个人感觉用在手里的项目中有点大材小用，于是主要目标是在前两种中选择一种。&lt;/p&gt;
&lt;p&gt;首先来看第一种，这是一般最先想到的方法，而且相对比较简单。但马上一想就会发现这种方法的弊端，如果只有两级分类还可以凑合，但如果涉及到多级分类或无限极分类就麻烦了，如果是五级分类就会有五张表，这明显不以维护而且不符合数据库设计原则。&lt;/p&gt;
&lt;p&gt;再来看第二种方案：&lt;/p&gt;
&lt;p&gt;如果只有一张表，那么我们必须能够标识各个分类之间的层次关系，层级等级。第一次的设计是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cid&lt;/p&gt;
&lt;p&gt;cname（分类名称）&lt;/p&gt;
&lt;p&gt;parentcid（上级分类ID）&lt;/p&gt;
&lt;p&gt;cat_level（当前分类层次）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;貌似很完美的样子，而且支持无限级分类。但在使用过程中发现一个问题：虽然有一个分类层次，但排序后它们的层次还是无法直接显示出来。（在其中一个项目中曾经使用过这种方法，当时的解决方案是在View层又加了一次排序来动态的生成HTML代码，每次排序都要遍历一次父类，很恐怖。）。于是，第二次设计修改如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cid&lt;/p&gt;
&lt;p&gt;cname（分类名称）&lt;/p&gt;
&lt;p&gt;parentcid（上级分类ID）&lt;/p&gt;
&lt;p&gt;cat_level（当前分类层次）&lt;/p&gt;
&lt;p&gt;cat_path（当前分类路径）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中增加了一个字段分类路径，意思是当前分类到顶级分类的完整路径，以一级ID,二级ID，…..，当前级ID的格式存储。如1,2,2。这样的好处是，我们按分类路径进行一下排序会发现它自然地按照层级关系读取出数据来了，层次清晰，简单明了。&lt;/p&gt;
&lt;p&gt;好了，先说到这儿，关于更多的多级分类的数据表设计我们以后再深入讨论。&lt;/p&gt;</summary><category term="多级分类"></category></entry><entry><title>用SSH远程登录Linux</title><link href="http://hackecho.com/2011/11/login-to-linux-with-ssh/" rel="alternate"></link><updated>2011-11-10T23:43:36-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-11-10:2011/11/login-to-linux-with-ssh/</id><summary type="html">&lt;p&gt;今天配好服务器，发现如果直接远程连接主机无法打开控制台，于是果断采用SSH来登录。很简单，只需几步：&lt;/p&gt;
&lt;p&gt;首先需要在服务器安装SSH的服务器端。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;openssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubuntu中默认安装了OpenSSH的client端，我们不用重复安装。如果需要安装，只需将上述命令中的server改为client即可。&lt;/p&gt;
&lt;p&gt;安装好后启动OpenSSH。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后确认一下SSH Server是否启动。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果只有ssh-agent那ssh-server还没有启动。&lt;/p&gt;
&lt;p&gt;最后就是登录了：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="mf"&gt;202.112&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中username是用户名，后面是服务器IP。&lt;/p&gt;
&lt;p&gt;接下来会提示输入密码，然后就成功登录到服务器了。经测试，可以使用sudo -i取得管理员权限，可以执行脚本。哈哈，enjoy it！&lt;/p&gt;</summary><category term="Linux"></category><category term="OpenSSH"></category><category term="SSH"></category></entry><entry><title>ThinkPHP部署二三事儿</title><link href="http://hackecho.com/2011/11/deployment-of-thinkphp/" rel="alternate"></link><updated>2011-11-09T21:15:03-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-11-09:2011/11/deployment-of-thinkphp/</id><summary type="html">&lt;p&gt;费尽周折，终于得以进入信息中心的机房一探究竟了。学校所有的服务器和托管服务器都在这里，内景也跟之前想象的差不多，整齐的一排排机柜，各种颜色的指示灯和密密麻麻的网线，还有很强大的冷却空调。不过唯一不爽的是巨大的噪音。&lt;/p&gt;
&lt;p&gt;今天是去部署ThinkPHP刚做的一套系统，和安秦共同完成的。从上周六到今天，除了上课时间外火力全开，终于如期完成。当然还有不如意的地方，马上进入内测阶段，接受考验，哈哈。&lt;/p&gt;
&lt;p&gt;简单总结一下今天遇到的各种奇奇怪怪的问题，经过我们五个小时的探索，还好都算解决了。不过也看出来自己真正薄弱的地方，下一步继续努力。&lt;/p&gt;
&lt;p&gt;我们把原服务器格式化重新安装了Ubuntu 11.04。之前想安装Windows Server 2003，不过又想正好借机实践一下近期学的Linux知识，于是果断换了Ubuntu系统。考虑到使用方便问题，没有用Server版，桌面版够用。&lt;/p&gt;
&lt;p&gt;安装的过程还算顺利，服务器配置很强大，跑个Ubuntu还是很顺利的。然后就遇到了第一个问题，也是我们今天遇到的最坑爹，最苦恼，最没有办法的问题。。&lt;/p&gt;
&lt;p&gt;由于是内网部署，我们配好静态IP后，竟然发现不能访问！可以ping通，但访问时一直都是Forbidden状态。我们上网查各种方法来试图解决，都无法打通内网和外网这个桥梁。唯一能访问的知识同域内的几个网站，比如特思论坛。更痛苦的是无法连接上交大的开源镜像，导致Ubuntu无法配置PHP服务器环境。。。&lt;/p&gt;
&lt;p&gt;其实问题很简单，管理员的内外网端口映射已经做好，但防火墙配置出现问题，把我们的所有请求都拦截了...也就是说，我们需要联系管理员配置下网络防火墙即可。。。&lt;/p&gt;
&lt;p&gt;接着我们配置好了PHP运行环境，将我们的项目进行部署。这里的问题都是关于ThinkPHP的了，大牛可以直接略过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;乱码问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，不用多说，MySQL编码的问题...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;权限问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ThinkPHP的Runtime文件夹需要755的权限，直接从Windows环境下拷过去的项目一定要重新配置下权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找不到Public模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们用.htaccess配置了URLRewrite，把index.php隐去了，但奇怪的是诸如http://localhost/Public/...的地址全部都显示为“无法找到Public模块。”Public是个共用文件夹，我们把一些图片，CSS和JS放在里面，但ThinkPHP却去加载Public Action，导致无法找到模块。&lt;/p&gt;
&lt;p&gt;起初以为是.htaccess的问题，安秦把重写规则改了好多遍依旧不能解决问题，ThinkPHP的URLMODE试了一遍也不行。我隐约记得以前写过一个ThinkPHP项目中遇到过同样的问题，但后来怎么解决的却始终想不起来。正当问题进入“白热化”阶段，我们准备写一个PublicAction来捕捉所有请求的时候，终于。。。&lt;/p&gt;
&lt;p&gt;问题是，在Windows下面URL是不区分大小写的，但在Linux下面，大家应该都清楚吧，case sensitive！&lt;/p&gt;
&lt;p&gt;好了，问题解决了。&lt;/p&gt;
&lt;p&gt;明天下午继续去解决防火墙问题，不出差错，马上就可以上线咯！&lt;/p&gt;</summary><category term="ThinkPHP"></category><category term="服务器部署"></category></entry><entry><title>深入浅出ThinkPHP系列教程(二) MVC简介</title><link href="http://hackecho.com/2011/09/thinkphp-intro-to-mvc/" rel="alternate"></link><updated>2011-09-28T00:15:27-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-09-28:2011/09/thinkphp-intro-to-mvc/</id><summary type="html">&lt;p&gt;不论是在ThinkPHP的开发中，还是在一般的软件项目开发中，都要用到一种重要的开发思想，即MVC。维基百科中解释为：MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。&lt;/p&gt;
&lt;p&gt;通过这篇教程，让我们来简单熟悉一下MVC的基本思想，这也是使用ThinkPHP开发应用不可或缺的知识，否则你将寸步难行。&lt;/p&gt;
&lt;p&gt;MVC主要由三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;（控制器Controller）- 负责转发请求，对请求进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（视图View） - 界面设计人员进行图形界面设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（模型Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/09/ModelViewControllerDiagramZh.png" /&gt;&lt;/p&gt;
&lt;p&gt;本博客以前发布过一篇关于MVC的简单介绍，详情请点击这里：&lt;a href="http://www.hackecho.com/archives/138.html"&gt;《对MVC架构的简单解读》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;视图是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services.&lt;/p&gt;
&lt;p&gt;如何处理应用程序的界面变得越来越有挑战性。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模型表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;控制器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在我们总结MVC的处理过程&lt;/strong&gt;，&lt;strong&gt;首先&lt;/strong&gt;控制器接收用户的请求，并决定应该调用哪个模型来进行处理，&lt;strong&gt;然后&lt;/strong&gt;模型用业务逻辑来处理用户的请求并返回数据，&lt;strong&gt;最后&lt;/strong&gt;控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。&lt;/p&gt;
&lt;p&gt;其实对于使用ThinkPHP开发，MVC的知识大家了解到这里就可以了，重要的是我们来看一下MVC在ThinkPHP中的运用。在ThinkPHP的每个项目文件夹下，有一个Lib文件夹，其中Action子文件夹中的文件可以理解为是ThinkPHP中的控制器层，Model子文件夹中的文件可以理解为ThinkPHP的模型层。有关项文件夹的目录结构，我们会在后续教程中为大家详细讲解。另外View类和模板问价可以说是ThinkPHP的视图层。我们可以这样来理解：&lt;strong&gt;ThinkPHP接收到一个指令，然后调用相应的控制器，控制器调用相应的模型类完成与数据库的交互，最后调用视图类，将生成的页面呈现给用户。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是一张ThinkPHP的执行流程图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/09/232.gif" /&gt;&lt;/p&gt;
&lt;p&gt;最后要提醒大家的是，ThinkPHP的MVC模式只是提供了一种敏捷开发的手段，而不是拘泥于MVC本身。这一点大家在后面的开发也会有更深的理解。&lt;/p&gt;</summary><category term="ThinkPHP"></category></entry><entry><title>深入浅出ThinkPHP系列教程(一) 初识ThinkPHP</title><link href="http://hackecho.com/2011/09/intro-to-thinkphp/" rel="alternate"></link><updated>2011-09-26T21:01:23-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-09-26:2011/09/intro-to-thinkphp/</id><summary type="html">&lt;p&gt;&lt;img alt="thinkphp_logo" src="/static/images/2011/09/thinkphp_logo_505_92.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家好，从今天开始，天堂皓月博客将开始撰写《深入浅出ThinkPHP系列教程》，希望大家多多支持！本教程中有一部分资料来源于互联网，如有不适和共享的地方请联系博客，谢谢！&lt;/p&gt;
&lt;p&gt;本系列教程学习前提：了解基本的PHP知识，懂得面向对象编程的思想，了解关系型数据库的基础知识，了解基本的网页设计知识。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;什么是PHP框架？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 PHP 的高度灵活、简单易用的特性，导致 PHPer 们常常陷入单调重复而令人生厌的体力活动的窘境。而这正是 PHP框架 要解决的问题。&lt;/p&gt;
&lt;p&gt;PHP框架 是一个 PHP 应用程序的半成品。框架提供了可在应用程序之间共享的可覆用的公共且一致的结构，而不仅仅是一组工具类。&lt;/p&gt;
&lt;p&gt;形象的来说，PHP框架 把 PHP 程序开发摆到了流水线上。换句话说，PHP开发框架有助于促进快速软件开发（RAD），这节约了你的时间，有助于创建更为稳定的程序，并减少开发者的重复编写代码的劳动。这些框架还通过确保正确的数据库操作以及只在表现层编程的方式帮助初学者创建稳定的程序。PHP框架 使得你可以花更多的时间去创造真正的 Web 程序，而不是编写重复性的代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;为什么要使用PHP框架？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加速开发过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PHP框架 内置了预建的模块，免去了冗长又令人厌烦的编程工作。这样开发者就能够把时间花在开发实际程序上，而不是每一次都要为每一个项目重建基础模块。&lt;/p&gt;
&lt;p&gt;PHP框架 背后的思想被称为 模型—视图—控制器（MVC）。MVC 是这样一种架构模式：它隔离了业务逻辑与 UI，允许其一改变而另一者不受影响；在 MVC 中，模型负责数据，视图负责表现，控制器则是程序主体或者说是负责业务逻辑。从本质上说，MVC 拆分了一个程序的开发过程，这样你就可以修改独立的每一部分，而其他部分不受影响。这是十分重要的，它使得编写 PHP 代码更为快捷简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;成熟稳健性：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是对于大多初级开发者而言，PHP 是如此的简单以至于他们会完全没有意识地写出低质量的代码。这样的 PHP 程序可能在大多数时间内仍正常工作，但你可能已在代码中留下了巨大的安全漏洞，使其易受攻击。而 PHP框架 对一些基本的细节及安全性等做了处理，再次基础上开发出来的 PHP 代码会更加安全可靠。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可扩展性：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PHP框架 往往有着庞大的支持团队，使用者众多，它是不断升级的，你可以直接享受别人升级代码带来的好处。PHP框架 也方便的支持用户根据实际业务需求扩展自己特有的模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;PHP框架解决了什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速开发：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上面使用 PHP框架 的理由所言，PHP框架 模糊了 PHP 程序开发中的基本底层细节，使你可以专注于业务逻辑的开发，大大节约了项目开发时间与精力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编码规范：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PHP框架 的开发规范让大家在基于 PHP框架 开发程序时，所有的开发人员都遵循统一的编码开发规范。如此一来，程序代码将变得容易被其他人理解，项目成员在彼此合作开发时彼此的协作将更加协调，也有利于日后的项目维护及后续开发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免常见的安全性问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PHP框架 已经对常见的安全性如表单检测、SQL注入等常见的安全问题做了一定的内置处理。当然，不是用上 PHP 就绝对安全了，最重要的还是要程序开发人员自己有安全意识与经验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVC 逻辑与交互界面分离：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一份逻辑代码可以支持不同的展现，而展现界面及交互休验的改进，也不用受制于逻辑代码的开发周期，二者可以同时进行。另一个附加的好处是，编写出的 PHP 代码会更加简单、整洁且易懂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据需要构造出漂亮的 URL 等其他功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;PHP框架的不足？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PHP框架 的不足表现在以下几个方面：&lt;/p&gt;
&lt;p&gt;除了学习 PHP 之外，你还需要花费一定时间去学习 PHP框架，尽管这个过程并不复杂。&lt;/p&gt;
&lt;p&gt;当 PHP 成为框架之后，它的效率相对原生 PHP 程序，效率出现下降是不可避免的。&lt;/p&gt;
&lt;p&gt;当你使用 PHP框架 后，你以前的类库或者程序面临着重新改造的风险。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;ThinkPHP简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ThinkPHP是一个&lt;strong&gt;免费开源的，快速、简单的面向对象的轻量级&lt;/strong&gt;PHP开发框架，遵循Apache2开源协议发布，遵循 MVC 模式，在 PHP 的基础上将一些 PHP 细节进行隐藏而组织出实际开发中最需要的功能。开发者在 ThinkPHP 框架的基础上能够进行快速敏捷的项目开发，明显缩短项目开发周期，提高开发效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;为什么要选择ThinkPHP？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当有如下情况之一时，您需要选择一款 PHP 框架或者说选择 ThinkPHP 框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要进行快速的 PHP 开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要基于 MVC 模式开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以前是 Java 程序员或对 Java 熟悉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目是多人协作模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刚具备一定 PHP 基础的初中级学习者。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户指定基于框架开发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt;什么情况下不适合使用ThinkPHP？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当有如下情况之一时，您可能不需要 ThinkPHP 框架或者说 PHP 框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进行 PHP 语法学习。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发很小的功能，如留言板或网站投票。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非常讲究程序运行效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 PHP 框架对已有的系统改造代价巨大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多年开发经验，已经形成了自己惯有的开发模式与类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纯 PHP 代码爱好者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ThinkPHP"></category></entry><entry><title>10款非常酷的 jQuery 内容滑块插件</title><link href="http://hackecho.com/2011/09/10-cool-jquery-slides/" rel="alternate"></link><updated>2011-09-16T11:25:25-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-09-16:2011/09/10-cool-jquery-slides/</id><summary type="html">&lt;p&gt;我们在做网站前端开发的时候经常会用到内容滑块插件，而网上又难以找到系统的、功能强大的完整教程。Troy在这里收藏最最经典而且效果非常酷炫、功能强大的10款 jQuery 内容滑块插件。每个插件下面都有针对这款插件详细介绍的链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.jQuery HTML Content Slider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1pAGZ2hcCfv2CQOJ2flJ0Hl3gzZEHz4EkYHMKve6aLAc78X-8991UHBdVXuV5nCZQuuZQngArt0-XgNY_Lkj3Pcw/1.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bxslider.com/"&gt;More Information on jQuery HTML Content Slider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Awkward Showcase – A jQuery Plugin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1pvP3ooRkPU05ZmPb1qP6CBv6EYC3aUQZk8QwQwqAOBUzbJ38CN7e9HLt5nLMaJQLgciNHm_mhFVeguTD8OyhSKA/2.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.awkwardgroup.com/sandbox/awkward-showcase-a-jquery-plugin/"&gt;More Information on Awkward Showcase – A jQuery Plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.Diapo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1phjrx18GpoUiAIlZB90sHvOO1ux7UQHzaHEx_36xUDnhKGs-7aT1kYtsAcn4h3SbVt4gLznB3eIQlUiU_AQOJPg/3.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pixedelic.com/plugins/diapo/"&gt;More Information on Diapo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.Smooth Div Scroll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1pyHHBkYkEfsr0fvzitqKR718_X_H2IUCdftFfBVIDp1hNM5GzMkAagwuOFFpERnDyfGAVX5GKfaa4QDoFhusRJg/4.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.smoothdivscroll.com/#quickdemo"&gt;More Information on Smooth Div Scroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.Box Slider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1pzgEPMkO2GMY1peDQbSplYd4hH0tBa5R17VjRl6OxfS9DehkPrYAIcb0q-UBkuIpLrIEVEKmOchg00YoDsN6irg/5.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nv.github.com/box-slider/"&gt;More Information on Box Slider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.FlexSlider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1pwFu_lzHY5iVNipga0rBq9S6PKGjAQv1uAeUWHFASmNS4t3DBdy8M5nUzhMRxS-6h7YWRnJxIfE-gDMzvofW-0g/6.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flex.madebymufffin.com/"&gt;More Information on FlexSlider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.Cloud Carousel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1pqgPbbJqlNVTWRtM9l_wZ_sHCxFJfe8jE_AhRnpx-iWQj0nF6Dq9_9BA_IYFwzG9fC1t-xPdfgzxF6XuQGul6IA/7.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.professorcloud.com/mainsite/carousel.htm"&gt;More Information on Cloud Carousel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.Sudo Slider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1p7I1kTcMbSnr-uLJ8WoxTbdFJ0EMb2t7bpWwFLjt1M9jHuGOlYMq8gjb6mjVmL-uxQg700go_keoykqqU88X9vA/8.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://webbies.dk/SudoSlider/#2"&gt;More Information on Sudo Slider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9.Easy Gallery&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1pPByPBC8kOuGhHkaksY5hdGKPh6PF9HM6sl2xkF2WeE-OI6vl9bbTxYhSf_mPreuXTiGifkErwSkrRY5O7NlyTQ/9.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.freelancer-id.com/easy-gallery/"&gt;More Information on Easy Gallery&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10.Jquery – Lite Content Slider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sn2files.storage.live.com/y1p14ombGwz2371VZnRZcGLNofBVjlAOLDLmWxJNUumlpJyXMVEz_Xk9epdlyHWd7DMYcGdRI5X0IDnwM101muIlw/10.PNG?psid=1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.aakashweb.com/resources/pages/demos/jquery-lite-content-slider/"&gt;More Information on Jquery – Lite Content Slider&lt;/a&gt;&lt;/p&gt;</summary><category term="jQuery"></category></entry><entry><title>关于Google+的种种</title><link href="http://hackecho.com/2011/07/something-about-google-plus/" rel="alternate"></link><updated>2011-07-08T01:21:37-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-07-08:2011/07/something-about-google-plus/</id><summary type="html">&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/Google-Plus1-e1310058522662.png" /&gt;&lt;/p&gt;
&lt;p&gt;应好友&lt;a href="http://yihuxingkong.kuandao.com/"&gt;@一湖星空&lt;/a&gt;的邀请，第一时间体验了Google最新推出的社交项目Google+，看看这位在社交领域屡次失败的巨头是怎样发动最后一轮进攻的。&lt;/p&gt;
&lt;h3&gt;Google+是什么&lt;/h3&gt;
&lt;p&gt;Google+是Google高管维克·冈多特拉(Vic Gundotra)和布拉德利·霍洛维茨(Bradley Horowitz)负责的一项社交服务项目，其用户界面出自苹果前Mac软件团队设计师安迪·赫兹菲尔德(Andy Hertzfeld)之手。Gundotra和Horowitz认为Google+不只是一个产品，也不是一种战略方案，而是一个扩展后的Google。Google+目的是让Google在线资产在日常生活中更普及，而不只是网上冲浪时偶然点击、搜索一个网站。Google+于2011年6月28日亮相，仍处于测试阶段。&lt;/p&gt;
&lt;p&gt;在过去的一年里，Google+的开发一直秘密进行着，期间传闻不断，也有过官方辟谣，但最终它还是出现了。&lt;/p&gt;
&lt;h3&gt;Google+项目负责人谈产品&lt;/h3&gt;
&lt;p&gt;“我们认为在线共享很糟糕，甚至是奇怪。”Gundotra说。“我们相信和其他人保持联系是人类的一项基本需求。在现实生活中，我们一直这么干，但是在线工具却很不自然。它们强迫我们完全公开化。而现实生活中的分享却很微妙而丰富，要把这件事做成软件很难。” 说完这话，Gundotra开始向MG Siegler展示Google+的demo。整体上，MG Siegler觉得这款产品设计的太好，看起来甚至不像是Google的产品。非常显然，Google在Google+的用户界面和用户体验方面下了很大功夫。&lt;/p&gt;
&lt;p&gt;具体的诱人功能目前有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Circles「圈子」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sparks「火花」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instant Upload 「瞬时上传」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Huddle「群信」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hangouts「闲逛」&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些功能就不再一一具体介绍了，大家可以去亲自体验一下或网上搜索一下，本文后面也附有相关的介绍视频。&lt;/p&gt;
&lt;h3&gt;关于Google+你必须知道的50件事【推荐】&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Google+的目的是让你离开Twitter或Facebook，或者同时离开两者，并且这事很快就会发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看上去像FriendFeed？担心很快会死掉？要知道Newt Gingrich已经加入G+。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有了Google+账户，Picasa用户可获得无限免费图片空间。(Flickr和Facebook图片是否感到威胁？)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有了Circles「圈子」，你可以一目了然地控制隐私。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;「关于」部分很强大，支持链接、图片、二维码。营销者欢呼吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果Google+开始影响Page Rank「网页排名」的话，那么对SEO/SEM也有用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果Google Music和YouTube那样也和这个平台整合的话，Google+立刻会成为一个强大的娱乐媒体平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android版Google+「下载地址」早期已经取得一定成功，如果这个平台成功的话，这将改变人们对移动操作系统和支出的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你在Google+上问问题然后和「圈子」共享的话，它可以取代Quora。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视频聊天功能对协作和轮班来说是一把利器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单独的Google+ 应用加上Google Docs可以组成一个非常强大的企业协作环境，可以轻而易举击败大部分白标签企业级社交产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于G+可以看到我们的评论，Google可以更好地开发出社交图景，然后整合AdSense，乃至Google Affiliate。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果Google+提供一个WordPress评论整合功能，我立马会试试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果G+成功的话，几个月前就推出的+1按钮或许不再那么蹩脚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人们总是说Facebook有6亿用户，所以谁也跑不掉。还有人记得美国在线吗？人们会迁移，这种事情不是不会发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前试水Google+的大人物越来越多，这是史无前例的，比如Michael Dell和Mark Zuckerberg。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G+让Gmail的使用频率更高。2天收到了15封非垃圾邮件，要知道我几乎已经两年没收到过非垃圾邮件了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果Google把日历整合到G+中，那么G+就会具备社交日立的功能，更像Tungle。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;几乎快要死掉的Google Buzz会起死回生，尤其是你经常使用Google Reader分享的话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G+的图片显示界面很赞，让G+成为一个很赞的媒体平台。这为企业带来了机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google大力推广ChromeOS，再加上Android的飞速发展，G+已经成为一个非常强大的沟通、媒体、分享平台，生来支持多种平台，并且支持各个平台上的浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hangouts「闲逛」支持Google翻译，为多语言即时通讯提供了便利。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google+非常适合用作社交化客服，只要它能提供类似search.twitter.com一样的搜索功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G+很容易就可以整合Google Voice，增加手机短信功能，并且Gtalk已经支持一对一视频和语聊了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整合Blogger不会改进G+。WordPress已经赢得了博客之战。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G+也不会取代博客，但不会像博客那样在Twitter、Facebook’崛起之后就一蹶不振，G+吸引力更大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;别被上条迷惑了。你的博客才是你的家。在别人地盘上写博客就像是住旅馆，这里你说了不算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter的确像是一个新闻发布室，但G+讲述和发布故事的方法更多。G+里面的一个新闻「圈子」看上去就像是Flipboard一样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G+在Android平板电脑上看上去美极了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;广告整合似乎很简单、明显。商务整合也不难。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你激活了手机的位置功能，G+会根据谁在「附近」创建一个圈子，一个给予位置的弹性社交网络就这样诞生了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果G+在二维码和基于位置的媒体方面有所作为的话，那么你将获得一个强大的媒体/营销机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G+允许你进行有趣的多格式发布：把音频、视频、照片、文本、链接和位置信息整合到一个包裹或项目里，然后你就可以获得一个强大的数字发布平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一场Hangout现场音乐会何时亮相呢？只需一个录音按钮你就可以变得酷味十足，只需给Google Checkout增加一个「自己定价」的功能，你就可以进行即时小额内容销售。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果Google Places整合G+，并且你使用移动/附近功能的话，有趣的“迁移”图景突然间会变成营销者的一个新数据点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google+非盈利的一面很有意思，尤其是Google Pages针对Google+进行了改版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果我在G+里面分享一个Google演示稿文件的话，那么我可以在一个有价值的系统内部分享商业信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google+需要一个「置顶」功能，这样就可以在首页或档案页显示当天的消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当Google+支持站外分享和书签功能，并且增加内置统计功能的短网址服务之后，G+将更加强大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G+没有内置私信功能，但每个人的档案页都有一个发送邮件功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spark「火花」版块还没那么引人入胜，但有了用户生成的内容，并且每个人采用不同的维护管理方法的话，很快我们就会大快朵颐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果我是Google我会收购Alltop，用它取代Spark。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果用户把自己加入一个公开或只有会员才能加入的圈子，Google+带来的将是一款终极会议工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很多人在G+里使用#号标签，但Google还不支持。但还是让我们自己创造一些暗语吧，这么做更有趣。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;福特已经在研究G+了。地理信息、位置、用户好友信息，这些东西加在一起组成一个丰富的营销档案，是非常有用的营销工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google+将变成联署网络营销「affiliate marketing」的最佳环境。如果你推荐的某个关键词导致了他人的购买行为，你就会得到报酬。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有人担心营销者会进入G+捣乱。这种担心不无道理。这是一片新的试验场，营销者不会放弃。但我很乐观。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地点、Google页面和G+的整合对小公司来说也是件好事。一场社交化客服运动正在上演。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当我把一些搜索RSS feed导入G+之后，G+就像是一个兼具媒体制作/管理功能监听站。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据算法不同，热门话题的概念在G+上更有价值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你认为Google+还有那些应用和前景呢？欢迎补充。&lt;/p&gt;
&lt;h3&gt;Google+工程师的闷骚&lt;/h3&gt;
&lt;p&gt;不解释，看图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/google+1.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;相关资源&lt;/h3&gt;
&lt;p&gt;文章&lt;a href="http://tech.qq.com/a/20110704/000303.htm"&gt;《Google+内幕：搜索巨人的社交网络努力》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章（来自36氪）&lt;a href="http://www.36kr.com/google-plus-team-leaders-talk-about-product-details/"&gt;《Google+项目负责人分享产品细节》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章（来自DONGXI）&lt;a href="http://dongxi.net/b08bp"&gt;《关于Google+你不得不知道的50件事》&lt;/a&gt;&lt;/p&gt;</summary><category term="Google+"></category></entry><entry><title>10个非常值得学习的Android开源项目</title><link href="http://hackecho.com/2011/07/10-open-source-android-project/" rel="alternate"></link><updated>2011-07-05T18:57:56-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-07-05:2011/07/10-open-source-android-project/</id><summary type="html">&lt;p&gt;&lt;img alt="android开源项目" src="/static/images/2011/07/2010073016245383.png" /&gt;&lt;/p&gt;
&lt;p&gt;暑假要学习Android的同学们请注意了，这里是非常经典的10个Android开源项目，倘若能深入研究，一定会有所收获。&lt;/p&gt;
&lt;h3&gt;1.Android官方团队提供的示例项目&lt;/h3&gt;
&lt;p&gt;如果不是从学习Android SDK中提供的那些样例代码开始，可能没有更好的方法来掌握在Android这个平台上开发。&lt;/p&gt;
&lt;p&gt;由Android的核心开发团队提供了15个优秀的示例项 目，包含了游戏、图像处理、时间显示、开始菜单快捷方式等。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://code.google.com/p/apps-for-android/"&gt;http://code.google.com/p/apps-for-android/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/Amazed2_3-300x200.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;2.Remote Droid&lt;/h3&gt;
&lt;p&gt;RemoteDroid是一个Android应用，能够让用户使用自己的无线网络使用无线键盘、触摸屏操作手机。&lt;/p&gt;
&lt;p&gt;这个项目为开发者提供了如网络连接、触摸屏手指运动等很好的样例。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://code.google.com/p/remotedroid/"&gt;http://code.google.com/p/remotedroid/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/9867-remdrscr_super.png" /&gt;&lt;/p&gt;
&lt;h3&gt;3.TorProxy和Shadow&lt;/h3&gt;
&lt;p&gt;TorProxy应用实现了Android手机无线电电传通讯(TOR)，和Shadow应用一起使用，可以使用手机匿名上网。&lt;/p&gt;
&lt;p&gt;从该项目源代码中，可以掌握socket连接、管理cookie等方法。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://www.cl.cam.ac.uk/research/dtg/code/svn/android-tor/"&gt;http://www.cl.cam.ac.uk/research/dtg/code/svn/android-tor/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/img02.png" /&gt;&lt;/p&gt;
&lt;h3&gt;4.Android SMSPopup&lt;/h3&gt;
&lt;p&gt;SMSPopup可以截获短信内容显示在一个泡泡形状的窗口中。&lt;/p&gt;
&lt;p&gt;从这个项目中可以掌握到如何使用内置的短信SMS接口。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://code.google.com/p/android-smspopup/"&gt;http://code.google.com/p/android-smspopup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/sms_popup.png" /&gt;&lt;/p&gt;
&lt;h3&gt;5.Standup Timer&lt;/h3&gt;
&lt;p&gt;Standup Timer应用用于控制站立会议时间，类似秒表倒计时，可以提醒每个人的讲话时间已到，从而保证每个与会者使用时间一样。&lt;/p&gt;
&lt;p&gt;从该项目的代码中，可以学会如何使用时间函数。另外，这个项目的代码是采用视图view、模型model严格分离的设计思路。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://github.com/jwood/standup-timer"&gt;http://github.com/jwood/standup-timer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/images.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;6.Foursquare&lt;/h3&gt;
&lt;p&gt;是 Foursquare.com的一个客户端应用，该应用主要分为两个模块：API(com.joelapenna.foursquare)和界面前端(com.joelapenna.foursquared)两部分。&lt;/p&gt;
&lt;p&gt;从该项目代码中，可以学会如何同步、多线程、HTTP连接等技术。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://code.google.com/p/foursquared/"&gt;http://code.google.com/p/foursquared/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/picplz-android-foursquare.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;7.Pedometer&lt;/h3&gt;
&lt;p&gt;Pedometer应用用于记录你每天走路步数的。&lt;/p&gt;
&lt;p&gt;尽管记录不一定精准，但是从这个项目中，可以学习几个不同的技术：加速器交互、语音更新、后台运行服务等。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://code.google.com/p/pedometer/"&gt;http://code.google.com/p/pedometer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/p11_main2.png" /&gt;&lt;/p&gt;
&lt;h3&gt;8.OpenSudoku-android&lt;/h3&gt;
&lt;p&gt;OpenSudoku是一个简单的九宫格数独游戏。&lt;/p&gt;
&lt;p&gt;从代码中可以学习到如何在视图中显示表格数据，以及如何和一个网站交互等技术。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://code.google.com/p/opensudoku-android"&gt;http://code.google.com/p/opensudoku-android&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/screen.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;9.ConnectBot&lt;/h3&gt;
&lt;p&gt;ConnectBot是Android平台的一个客户端安全壳应用。&lt;/p&gt;
&lt;p&gt;从该项目代码中，可以学习到很多Android安全方面的内容，这些是你在开发应用时经常需要考虑的安全问题。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://code.google.com/p/connectbot/"&gt;http://code.google.com/p/connectbot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2011/07/connectbot-top.png" /&gt;&lt;/p&gt;
&lt;h3&gt;10.WordPress的Android应用&lt;/h3&gt;
&lt;p&gt;当然在最后不能不提Wordpress的Android应用了，这是Wordpress官方开发团队提供的一个项目。&lt;/p&gt;
&lt;p&gt;从代码中可以学习到XMLRPC调用（当然还有更多的优秀内容）。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href="http://android.svn.wordpress.org/trunk/"&gt;http://android.svn.wordpress.org/trunk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;希望大家喜欢。&lt;/p&gt;</summary><category term="Android"></category><category term="开源"></category></entry><entry><title>[转] Advice From An Old Programmer</title><link href="http://hackecho.com/2011/06/advice-from-an-old-programmer/" rel="alternate"></link><updated>2011-06-27T00:38:46-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-06-27:2011/06/advice-from-an-old-programmer/</id><summary type="html">&lt;p&gt;本文是《Learn Python The Hard Way， 2nd Edition》这本书的尾声部分。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic003.cnblogs.com/2011/1/201106/2011062108360289.png" /&gt;&lt;/p&gt;
&lt;p&gt;You've finished this book and have decided to continue with programming. Maybe it will be a career for you, or maybe it will be a hobby. You'll need some advice to make sure you continue on the right path, and get the most enjoyment out of your newly chosen activity.&lt;/p&gt;
&lt;p&gt;I've been programming for a very long time. So long that it's incredibly boring to me. At the time that I wrote this book, I knew about 20 programming languages and could learn new ones in about a day to a week depending on how weird they were. Eventually though this just became boring and couldn't hold my interest anymore. This doesn't mean I think programming &lt;em&gt;is&lt;/em&gt; boring, or that &lt;em&gt;you&lt;/em&gt; will think it's boring, only that &lt;em&gt;I&lt;/em&gt; find it uninteresting at this point in my journey.&lt;/p&gt;
&lt;p&gt;What I discovered after this journey of learning is that it's not the languages that matter but what you do with them. Actually, I always knew that, but I'd get distracted by the languages and forget it periodically. Now I never forget it, and neither should you.&lt;/p&gt;
&lt;p&gt;Which programming language you learn and use doesn't matter. Do &lt;em&gt;not&lt;/em&gt; get sucked into the religion surrounding programming languages as that will only blind you to their true purpose of being your tool for doing interesting things.&lt;/p&gt;
&lt;p&gt;Programming as an intellectual activity is the &lt;em&gt;only&lt;/em&gt; art form that allows you to create interactive art. You can create projects that other people can play with, and you can talk to them indirectly. No other art form is quite this interactive. Movies flow to the audience in one direction. Paintings do not move. Code goes both ways.&lt;/p&gt;
&lt;p&gt;Programming as a profession is only moderately interesting. It can be a good job, but you could make about the same money and be happier running a fast food joint. You're much better off using code as your secret weapon in another profession.&lt;/p&gt;
&lt;p&gt;People who can code in the world of technology companies are a dime a dozen and get no respect. People who can code in biology, medicine, government, sociology, physics, history, and mathematics are respected and can do amazing things to advance those disciplines.&lt;/p&gt;
&lt;p&gt;Of course, all of this advice is pointless. If you liked learning to write software with this book, you should try to use it to improve your life any way you can. Go out and explore this weird wonderful new intellectual pursuit that barely anyone in the last 50 years has been able to explore. Might as well enjoy it while you can.&lt;/p&gt;
&lt;p&gt;Finally, I'll say that learning to create software changes you and makes you different. Not better or worse, just different. You may find that people treat you harshly because you can create software, maybe using words like "nerd". Maybe you'll find that because you can dissect their logic that they hate arguing with you. You may even find that simply knowing how a computer works makes you annoying and weird to them.&lt;/p&gt;
&lt;p&gt;To this I have one just piece of advice: they can go to hell. The world needs more weird people who know how things work and who love to figure it all out. When they treat you like this, just remember that this is &lt;em&gt;your&lt;/em&gt; journey, not theirs. Being different is not a crime, and people who tell you it is are just jealous that you've picked up a skill they never in their wildest dreams could acquire.&lt;/p&gt;
&lt;p&gt;You can code. They cannot. That is pretty damn cool.&lt;/p&gt;
&lt;p&gt;（最后一句话的意思可以理解为：你会编程，他们不会，这真他妈的酷毙了。）&lt;/p&gt;</summary><category term="Advice"></category><category term="编程"></category></entry><entry><title>解密人人网应用“好友档案”与“X档案”</title><link href="http://hackecho.com/2011/06/secret-of-truth-of-friends-app-in-renren/" rel="alternate"></link><updated>2011-06-23T16:23:23-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-06-23:2011/06/secret-of-truth-of-friends-app-in-renren/</id><summary type="html">&lt;p&gt;最近人人被“好友档案”的应用刷屏了，大家都玩得不亦乐乎。这个应用同“X档案”一样，可以显示关于你好友中“谁最关心你”、“星座分布”、“人脉地图”等。于是忍不住想看看它的原理到底是什么呢？我们一起来分析一下“谁最关心你”的原理。&lt;/p&gt;
&lt;h3&gt;接口分析&lt;/h3&gt;
&lt;p&gt;首先，人人网每个APP能调用的API列在这里，&lt;a href="http://wiki.dev.renren.com/wiki/API"&gt;http://wiki.dev.renren.com/wiki/API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，并没有获取最近来访或访问次数的API，推测，“谁最关心你”不是根据空间访问来决定的。浏览一遍API，找出和“数量”相关的接口，大概是几个获取回复信息的API：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;status.getComment()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;photos.getComments()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;blog.getComments()&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，每个API都有默认的数量限制，比如获取日志评论，默认50条。完全统计一个人所有的回复，对算法有非常高的要求，人人网信息又如此丰富，所以好友档案不可能完全统计你所有的回复，只能是最近N条的。&lt;/p&gt;
&lt;p&gt;还有一点可以看到，现在还没有有关留言板的API，所以及时两个人留言板聊得再欢，也不会影响排名。&lt;/p&gt;
&lt;h3&gt;算法预测&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取当前用户ID；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取ID的状态，记为sid；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;历遍sid，获取所有的回复者id，记为rid，所有的rid组成一个列表，每当在下一个状态里发现同样的rid，则记录数量＋1；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同理获取照片和blog的rid；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rid列表排序，取前6。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;其中【最关心你的人】分析方式:获取本人50条状态，按好友回复数排名&lt;/p&gt;
&lt;p&gt;【最自恋的人】分析方式:按好友头像相册中头像的个数排名&lt;/p&gt;
&lt;h3&gt;其它&lt;/h3&gt;
&lt;p&gt;这个应用是由几个在校大学生编写的，对他们的创意和技术表示钦佩。&lt;/p&gt;
&lt;p&gt;最后，博主得到了一些此应用的源代码，感兴趣者请看下面。（未结构化，看着乱的话请复制到你自己的编辑器中Format。信息来自网络，如侵权请邮件告知）&lt;/p&gt;
&lt;p&gt;部分源代码如下：（Python）&lt;/p&gt;
&lt;p&gt;因版权和安全原因，源码不再公开。&lt;/p&gt;</summary><category term="人人网"></category><category term="好友档案"></category></entry><entry><title>程序员，你应该知道</title><link href="http://hackecho.com/2011/05/what-the-programmer-should-know/" rel="alternate"></link><updated>2011-05-01T19:47:57-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-05-01:2011/05/what-the-programmer-should-know/</id><summary type="html">&lt;p&gt;（说明：本文转自博客园知识库的一篇原创文章，作者：李瑞宽)&lt;/p&gt;
&lt;p&gt;想象你是一个初出茅庐的小菜鸟，上头交代你做任务，你对其中的一项任务有那么一小点疑问，你怯生生地问：“我觉得这项任务说得不是很清楚，那样做行吗？为什么呢？我觉得应该这样做更好。”项目很紧，上头头大着呢，他很不耐烦地对你说：“不要问那么多！我都考虑清楚了，只要照着做就行！”你应该怎么办呢？你是就这样屁颠屁颠地去做了，还是还是觉得你应该知道为什么要按照他说的做，而不是按照你说的做吗？ 你应该知道。而且你要一直坚持“我应该知道”这种想法，因为这种想法，会带领你走进一片新天地。你可能还意识不到，你现在的是否坚持和你后续的发展休戚相关。坚持了，你会向着更深的层次迈进；放弃了，你就一直呆在原地，没有办法进步。&lt;/p&gt;
&lt;p&gt;依我看来，技术人员的发展，不外乎往深度发展或者往广度发展。&lt;/p&gt;
&lt;p&gt;什么是深度呢？就是你对技术的掌握程度，你一套扎进去，对技术有自己越来越深的理解，你从不会到会，从会到精，你会显著感觉到自己能力的提升，等到精通了技术之后，使用这项技术自然是挥洒自如，易如反掌。&lt;/p&gt;
&lt;p&gt;什么是广度呢？就是十八般武艺，刀枪剑戟棍，.NET, JAVA, Silverlight，逮着什么就是什么，都去参上那么一腿，这个就是广度。你学习了N多技术，每次见到一种新技术新语言你就两眼放光四肢冒汗，你都要根据它们的入门指南操作那么一次，好吧你是很踏实的人，所以你多操作了那么两次，之后你就能够很NB地在简历上面吹牛逼：“本人精通C#、C++、JAVA、PHP、HTML、C、汇编、Python 不拉不拉不拉，神马技术神马语言对于我都是浮云！”说出去唬的别人一愣一愣的，当然，他们并不知道，你只写过这一堆语言的Hello world。&lt;/p&gt;
&lt;p&gt;深度很奥妙，广度很有趣，你应该怎么选？&lt;/p&gt;
&lt;p&gt;如果是二选一，毋庸置疑，你应该选择深度！为啥呢？深度是一个技术人员的核心竞争力。在这个IT从业人员多如过江之鲫的今天，IT民工、码农到处都是；本科如狗，硕士满街走，只有博士还能抖一抖；街边随便哪个修钥匙档上面都贴着广告“200元企业建站！立等可取！”技术人员如何安身立命？&lt;/p&gt;
&lt;p&gt;这个时候，你应该靠你的深度，你也只能靠你的深度了。道理很简单，技术人员靠什么吃饭？靠自己的脑子。从你人生到现在的经历中，你早早就依靠脑子跟别人竞争了。从小学到初中到高中到大学，哪一次升学考试你不是靠自己的脑子将别人PK下去？你知识掌握的越牢固，学得越深入，对那一堆公式定理理解的越深刻，你就越能够在竞争中占据有势，最终赢得求学阶段的胜利。不管现在学校扩招多厉害，名牌大学还是高质量的金字招牌，在普罗大众的眼中熠熠生辉，阿弥陀佛。进入了社会，这样的竞争其实还是很类似的，只要你比人功夫深，你就比人香喷喷。&lt;/p&gt;
&lt;p&gt;深度就是你的内功，它带来效率，它能够让你非常稳健地向前进。我们来看看倚天屠龙记里面对乾坤大挪移的描述：“正如要一个七八岁的小孩去挥舞百斤重的大铁锤，锤法越是精微奥妙，越会将他自己打得头破血流，脑浆迸裂，但若舞锤者是个大力士，那便得其所哉了”。你的深度，就是你自己的力量，你要使用的技术，就一把大铁锤，你要掌控好这把铁锤，没有深度，就等着自己被砸伤吧！深刻地掌握一样东西，不单明白了它什么时候非常适合使用，什么时候能够使用，也能明白它什么时候最好不用。在平时的生活中你是否经常听到这样的话：“微软/Java/etc的XXX技术太难用了！我想要XXX它XXX就是搞不定！”很显然，你碰到了大铁锤的受害者。不排除微软的确是有难用的东西，臭名昭著的就有MSN，但依据我粗浅的技术眼光，至少在开发技术这块，微软还是相当有想法的，而且构建的东西只要摸清它的底，用起来还是颇为畅快的。&lt;/p&gt;
&lt;p&gt;说到深度，就要提到境界。从你选择了深度这条路开始，你已经开始踏入了境界之旅。&lt;/p&gt;
&lt;p&gt;境界是分层次的，学拳的说“招熟，懂劲，神明”，孔子说“三十而立，四十不惑，五十知天命，六十耳顺，七十为所欲为不守规矩！哦，是从心所欲不逾矩”。这两家说的都是不同的境界层次。你在开始境界之旅中的某一个时刻，将会处在某一个特定的境界层次中。不同的境界的认识是不同的，同样的话，境界低的人会看不到什么东西，境界高的人就能一眼看到其中的道理。即使大家都能看到其中有东西，看到的东西本身往往是不一样的。你平时有没有试过在一个问题上面困扰很久，旁边一个人过来一句话就将它解决了？这是因为他的境界比你高出一层不止。&lt;/p&gt;
&lt;p&gt;站在地上往下看，能看见直径1m的范围，有蚂蚁、落叶和浮土；站在4层楼顶上往下看，能看见直径100m的范围，有汽车、马路和绿化带；站在50层楼顶上往下看，能看见直径10000m的范围，有成片的楼群，飘过的直升机和绵延的山岭。境界不同，看到的东西就不同。&lt;/p&gt;
&lt;p&gt;境界不同，有时候交流起来是比较困难的，同样的概念，大家的理解是不一样的，虽然可能在不同的境界中他们都正确。好多东西你觉得很新奇很给力，在更上一层的人看来，那不过是常识罢了。有人说人民日报是最真的媒体，从上面获益良多；有些老板什么电视都不看，天天就看新闻联播；而这些在愤青眼中，只不过是党欺骗P民的谎言，令人作呕。你说谁才是对的？老板看完了，能够摸到政策的动向，赚到实实在在的money；而在同样的愤青群体眼中，他们就会觉得这位受到喉舌毒害的愤青是正确的，就应该呕吐，唾弃它们，鄙视这些五毛党！慈禧年间，有个农妇和别人吹水：“老佛爷吃的煎饼，那可真不得了啊！至少一定得有锅盖那么大！”殊不知连低慈禧N个档次的人，可能都已经不知道煎饼是何物了。这就是境界不同的缘故了。我现在回想起中学学习的思想政治课，开始觉得它们不再如当初的枯燥，变得非常有道理。&lt;/p&gt;
&lt;p&gt;技术的境界和学拳的是非常类似的，一开始你只要学会怎么用，用熟练就好，然后你开始好奇它内在是怎么实现的，开始研究它实现的机制，等你学会了这些机制，你就懂得怎么发力了，你能够将这些机制用到其他地方，招招见血啊！再然后你通过不断的思索总结，你窥到了其中的概念和原理，你悟到了它存在的理由，于是你就神明了，你悟到的这些道理，不单可以用到类似的应用场景中，还可以用到更深远的地方，甚至日常生活之中。譬如事务这个玩意，一开始你只知道它是数据库里面的一个东西，你不知道它是啥，但是上头就是要求你用它。后来你知道它怎么用了，再然后你可以搞定死锁，将它用得很帅。终于有一天，你悟到了事务原来并不是只有一种实现，它是一个概念，是一个协议，它能够达到概念和实现的分离，它可以通过二阶段提交，也可以通过补偿等方式实现，更要命的是它不单可以通过计算机搞，还可以通过手工来搞。事务协调器可以不单只是一段代码，还可以是一封Email，一张贴在墙上的纸……那你才真正明白了事务这个玩意可以怎么玩，然后再明白了怎么去根据这种思路去探索其他的东西。想象你去超市买东西，你先给了钱给收银的美女，然后你还没有踏出大门，你就后悔了——TMD怎么又买了这么多用不着的东西？你对收银MM说：“不好意思咱不买了，你退钱给我吧！”收银MM又PP又通情达理，她在POS机里面将你的消费记录XX掉，将钱退回给你，顺便还送给你一盒益达——是你的益达！这中间，就体现了一种事务的思想。你体会了这种思想，就可以一下子老了四五十岁，达到七十岁的境界，为所欲为。计算机相关的这些东西，集人类智慧之大成，研究这个而能有所感悟，真真正正能达到境界上的提高。&lt;/p&gt;
&lt;p&gt;境界到了最高妙之处，就会由实入虚，从术而道，这时你就悟到了如何将事物的本源跟事物的存在区分开来，你能够看清楚什么是本质，什么是表象，什么是要做到的目标，而什么是具体的行为。你从本质的角度看过去，你就具有了一双慧眼，将这纷扰看得清清楚楚明明白白真真切切，这双慧眼就是做洞察力。&lt;/p&gt;
&lt;p&gt;什么是本质呢？本质就是事物赖以存在的根本原因，若然没有这个原因，这个事物就没有存在的意义，就会消亡。所谓存在即合理，这个合理不是说的合乎情理，而是说存在都是具有它深层次的根本原因的，也就是都是有本质的。不知道你有没有注意到，很多技术书籍第一章都是介绍技术出现的历史的，之前我觉得这些罗里啰嗦，都是废话，直接翻过去直奔技术本身而去也，其实它是全书的总纲（天之道，损有余而补不足，是故虚胜实，不足胜有余……），它论述的是这种技术的存在理由，如果没有这种理由，这种技术都没必要存在了，我们还学它干毛啊。&lt;/p&gt;
&lt;p&gt;我们来说一个普通的项目，它的本质是什么？是它复杂纠结的需求吗？是它深奥精妙的设计吗？是它完全符合CMMI5滴水不漏的流程吗？都不是，它存在的意义，就是为了能为客户产生价值，真真正正消除客户的痛处。本质和表象是很容易混杂的，要将东西乱七八糟混杂在一起很容易，要清清楚楚区分它们，将它们有条有理摆放得整整齐齐是很困难的，这里快刀斩乱麻行不通，你得抽丝剥茧，一条条分得清清楚楚，不然你永远达不到透彻的境界。&lt;/p&gt;
&lt;p&gt;本质是虚的，表象是实的。我们很难捉摸得到虚的东西，而实实在在的东西一直围绕在我们周围，所以我们很容易就能够接受它们，然后我们很容易就被这些东西迷惑，看不到背后还存在深刻的东西。我们需要透过现象看到本质，找到它们。本质坚如磐石，相对不变，只要有存在的理由，它就一直都存在，而表象如行云流水，花开花落，一直都在改变。就如用兵，目标是求胜，这是断然不会改变的，而行军就是兵无常势，水无常形，因时制宜，随机应变。倘若我们混淆了本质和表象，追求的是表象的东西，由于表象千变万化，到头来疲于奔命，却又两手空空，最后郁闷得对天大骂：“TMD这技术变得太快了！老子跟不上不玩了！”。你应该知道，凡是觉得乱的，都是因为没有得到本质。当你具有了深邃的洞察力，你得到了本质，你就能够不役于物，你就能看清变以不变，你就不会再去盲目追求具体的行为。&lt;/p&gt;
&lt;p&gt;当你做项目，你强调的不再是符合某个规范来做，你深深知道规范只是一种具体的行为，你关注你的目标，你能够带给客户的价值，你团队的效率。当现在的规范不符合你的项目，你就大胆裁剪它，甚至抛弃它，而不是盲目将项目往规范上靠——只因为它是CMMI的建议，你所作的一切，都是为了你的这个目标而努力。&lt;/p&gt;
&lt;p&gt;具有洞察力，通晓变与不变，你不但能看清现在的情形，你还能看清今后的趋势，然后针对趋势采取措施。我们可以清楚地看到，技术日新月异，但人们的思想变化却不大，一部道德经，几千年下来我们的思想仍然无法突破它论述的范畴，所以我们可以利用将来可能出现的新技术，结合人们不怎么改变的思想需求，做一些东西出来——不要问我是什么东西，我想到也不会告诉你。&lt;/p&gt;
&lt;p&gt;是不是觉得上面的这些东西都很虚很哲学？虚实只是相对的，当你达到这样的境界，你自然就会明白我说的是什么，当然，当你觉得已经知道我在说什么了，我觉得你还是可以继续再想想，后面再来看，感觉又不一样。张三丰教张无忌太极剑的时候，连续两次教招，却无一式相同。张无忌“细细体会其中圆转如意，绵绵无尽之意”，杨逍殷天正“粗略窥到这个层次”，而周颠则是“大为担心，两遍都不一样，咱们教主怎么记得住？”道理不在于讲，而是在于悟，否则讲得再多也没用，不深刻，没效果。一阵风吹过，吹过松散的茅草屋，那就是一场灾难；吹过石壁，最多也只能带走几颗细沙；吹过水面，能荡起了一圈圈的波浪；吹过风车，则产生了源源不断的电力。苹果掉到牛顿头上，就诞生了万有引力，掉到你我头上，只能产生一个包和一颗苹果核。好吧我们就不讨论假如掉的不是苹果而是椰子的事情了。上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑，不足以为道。邓小平之所以喜欢看金庸的小说，称呼金庸为大师，他必然是看到了小说里面的这些道理。&lt;/p&gt;
&lt;p&gt;虚到九天之上，还是得落地。让我们看看一些稍微实际点的东西。你水平提高了，开始做设计了，开始写设计文档，你应该写些什么？在你记录下你做出来的东西（你搞出了CDM、PDM）的时候，我觉得你还需要记录下你这样做的原因，因为随着时间推移，你设计的东西很可能不适用，但你的想法还是很有用很有参考意义的，你的想法是你CDM存在的原因。别人看你的设计文档，不单能看到死的结果，还能看到活生生的你的思想，然后延续这种思想，让设计具有生命力，能够延续下去。平时我们做需求，也要很清楚地知道什么才是真正的需求。我们来研究一下手机铃声，它表示了一种什么样的需求呢？你写下需求“我们的手机需要一种铃声”，于是，设计就产生了蜂鸣声铃声、十六和弦铃声、MP3铃声，但这就是我们的需求吗？不是的，其实你想说的是“我们需要一种提醒方式，这样在短信、或者电话到来的时候就能提醒使用者注意了”，这样就能设计出各种铃声，还有震动，还有铃声混合震动，在极端情况下，假如用户处于一个高度紧张的环境之下，很难注意到这种提醒，我们还能设计出让手机弹出一根刺，刺他一下的方式，一下不行？来多几下。记得之前看到一个闹钟的笑话：推销员对一个职员说，我们这种闹钟非常好用！它一开始放轻柔的音乐，如果还不醒，那它改放嘈杂的音乐，如果还不醒，它就往你头上洒水，再不醒，它就开始刺你。如果这样都还不醒，它就会打电话给你老板，告诉他你生病了，请假一天。这个闹钟深刻把握了自己的本质啊。&lt;/p&gt;
&lt;p&gt;具有洞察力，我们就能根据行为和目标的契合程度，评价行为是否合理。作为技术人员，我们身边的争论随处可见，语言之争，框架之争，各种流派，各种山寨，比比皆是。“{”到底放在方法定义的最右边，还是放在方法定义的下一行呢，这可不是一件小事，这是一件很严肃的大事情，关乎信仰！从我了解的历史开始，我还没有见到任何一方说服了另外一方。面对这这样疯狂的一个世界，你怎样选择加入哪一方呢？李开复说：“Follow your heart！”我说，你首先看看你的目标，你就知道选择那一方了。譬如说开发语言，我们用它的目标是什么？假如我们需要能够很自然地去面对复杂的问题，而且开发过程中，我们需要能够飞快地利用语言的特性，构建我们的软件，那么C#就是很好的选择，用了汇编你就死翘翘，至少干十年才能把一个增删改查Web系统搞出来；假如我们需要进行很底层的开发，逻辑不复杂，但要做到精确的控制，性能是第一要义，那么你要选择汇编，甚至用刀子在硬盘上刻程序也在所不惜啊。语言之争之混乱，在于大家将目标和选择两者混为一谈，从而成功地将它们捣成了一桶浆糊。框架也是如此，我们现在的目标是什么？我们要自然，要快速开发，而且我们还需要能够扩展，那么我们评价框架的标准就很清楚了。你框架里头技术含量多么深厚，都到地核了，你用了三层架构，你共使用了23种不同的模式，你使用了微软到目前为止出现的所有技术，这些都没有意义。你做不到让我用起来那种如臂使指的感觉，你甚至阻碍我整体流的思考方式，你就说服不了我，你的框架是适用的。&lt;/p&gt;
&lt;p&gt;到达了虚的境界之后，是不是实就没有用了呢？不是的，年轻人，看问题不能那么片面。虚和实，就相当于战略和战术，你看清楚了目标，只能说明你最高能去到什么地方，这只是一种可能。而实实在在你能够达到什么高度，是由你的战术来决定的。眼界只能决定你看到的高度，而实操才真正决定了你达到的高度。虚实到头来要结合到一起，用虚指导实，用实来实现虚，相得益彰，互为阴阳。&lt;/p&gt;
&lt;p&gt;这个世界规律是虚的，推动世界发展实实在在的力量是实的。我们想想电灯，电脑，抽水马桶，哪一个不是实在的术创造出来的？我们看看下图的这张凳子，它就是传说中的“Aeron chair”，它具有出众的外观，具有领衔的人体工学设计，它能根据就座者不同的体重、姿势和动作进行精准的调节，与你的身体自然贴合，让你感受一整天不会疲倦的轻松自如，更有一小撮份子宣称，由于坐起来太舒服了，他们经常不知不觉加了好多次班还不知道！（广告！广告！赶快Cut掉！）对比一下我们平时坐的电脑椅呢？这就是术的差距，术的力量！当然，也在于他们把握了椅子不单只是用来坐的，而是要用来坐得非常舒服的这个道有关系。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic001.cnblogs.com/images/2011/1/2011042411333447.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;说了那么久深度，让我们也来聊聊广度。广度也是人认识中很重要的一部分。你只有掌握了很多东西，你才能够了解到什么时候应该用什么技术。有这么一句话：“假如你是一把锤子，那么所有东西在你眼中都是钉子”。假如你只会铁锤这项技能，你只能打桩用锤，砍树用锤，连吃饭你都用锤盛着吃。好吧，你锤子练到了最高境界，达到了刚极而柔的化境，你用来吃饭一点问题都没有，可是，你真……没觉得吃相有那么一点难看么？打桩用铁锤，砍树用斧头，吃饭用筷子，耶！这样就温文尔雅得多了。&lt;/p&gt;
&lt;p&gt;对广度的关注，也会促成转化为深度的思考，考虑不同东西的相同之处。对广度的探寻，常常会引出创新的主意，将不同的东西混合起来解决问题，是一种创新的做法；综合多种不同的思想，产生一种新的技术，就是创新的领域。近亲繁殖多产生怪胎，相距越远，就越能产生优良的品种。所以我们也要追求广度，不过要留意要达到创新的地步的话，至少在深度上面是要达到一定境界的。&lt;/p&gt;
&lt;p&gt;你看我扯了这么多方外之言，内心在颤抖，这个行业水太深了！我是不是应该转行？你这样想。完全不必要，假如你朝着深度这条路走下去，你最终也能有这样的感悟。而且即使是其他行业，也是要有深度的，我们最终走向的将会是同一条路。&lt;/p&gt;
&lt;p&gt;要往深度走下去，你应该怎么做呢？假如你抓住我，让我尽快提升你的境界，锤炼你的深度，我是做不到的。要做到这件事，只能靠你自己的不断思考，思考一切后面的原因。想象一个胖子需要减肥，有什么万试万灵的方式吗？假如他一天需要减十斤，我认为是搞不定的，我们只能从他身上切下一块肉，称一下——十斤！真正有效的办法是他自己运动起来，注意健康的饮食，然后长期下来，才能达到一个健康的体魄，才能有真正的精气神。&lt;/p&gt;
&lt;p&gt;所以你的思考，就是这么一个过程，只有你自己不断思考不断突破，最终才能达到一个较高的境界。别人说的再多，你没有经过思考消化吸收，最后也没能转化为你的肌肉，提供给你力量，只会变成你的脂肪，增加你的负担，阻碍你的行动，最后还影响你对其他营养的吸收。看书本怎么说，看我怎么说，然后教条主义去运用，是行不通的，你需要将这些东西真真正正变成你自己的东西。知难行易，你可能轻易就开始行动了，却惨不透其中的道理；知易行难，知道了跑步有益身心，你却很难去坚持它。这些都是你的障碍，只能靠你自己去突破。&lt;/p&gt;
&lt;p&gt;我们什么时候会思考？就我自己而言，我通常在看书的时候思考，在和人讨论的时候思考，在遇到困难的时候思考，在独处的时候，有时候也会发呆思考。基本上，都是思想遇到冲击的时候进行思考。所以，你如果要往更深的地方发展，要做的是从现在开始，珍惜看书的机会，珍惜和别人讨论的机会，创造机会和别人讨论（听君一席话，胜读十年书啊，八卦除外），去完成具有挑战性的任务。平时也要注意一些你觉得有思想的文章的微言大义，琢磨一下，都是能够对你思想进行冲击的，比如我之前推荐的《火星人的耳机》、《一百年后人类怎么编程》等貌似不着边际的文章。普通的解决问题的文章，讲究的是头痛医头脚痛医脚，违反中医之道，通常是很难促进你体质的提高的。书要挑经典的书，否则它说不定将你带进歧途深处，积重难返。眼中看着《金瓶梅》，脑中想着世界运转的道理，人间色相，尽是脂粉骷髅，这种境界，小弟目前修炼尚浅，是万万达不到的。&lt;/p&gt;
&lt;p&gt;最重要的是你认识到这一点，从今天开始觉得，你应该知道。上头再跟你说“你TMD不需要知道，你只需要做就行了”，你应该认识到他说这句话，他的意思其可能是：他很忙，没空跟你说；他自己也不知道。而绝对不是你不需要知道的意思。你需要知道，从现在开始思考，开始寻找为什么吧。&lt;/p&gt;</summary><category term="境界"></category><category term="程序员"></category></entry><entry><title>做一个有理想的程序猿</title><link href="http://hackecho.com/2011/04/be-programmer-best/" rel="alternate"></link><updated>2011-04-22T23:51:19-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-04-22:2011/04/be-programmer-best/</id><summary type="html">&lt;p&gt;我想，程序员只是一个代名词，我们是一群爱IT的人，希望通过自己的技术改变世界的人，我们是一群热爱生活、热爱世界的人。（蓝色文字皆为Troy注解）&lt;/p&gt;
&lt;p&gt;作为程序员，要取得非凡成就需要记住的15件事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.走一条不一样的路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在有利于自己的市场中竞争，如果你满足于“泯然众人矣”，那恐怕就得跟那些低工资国家的程序员们同场竞技了。&lt;/p&gt;
&lt;p&gt;“走一条不同的路”，“走自己喜欢的路”从来都是一个人成功的重要条件，但是更为重要的是，选定的一条路，一定要好好地、坚持地走下去。与其他半途而废的人来比，我们就是笑到最后的人。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.了解自己的公司&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以我在医院、咨询公司、物流企业以及大技术公司工作的经验来看，这一点所言不虚。&lt;/p&gt;
&lt;p&gt;不同公司的运营模式差异极大。如果你理解企业的运营模式，那你就不一样了！在这家公司中（或者对客户而言），你是参与业务运营的资产，你的工作能直接产生效益！&lt;/p&gt;
&lt;p&gt;如果一个人能够在他/她喜欢的公司工作，还用得着努力地去重新了解它吗？某种程度上我们喜欢某家公司的原因恰恰是我们喜欢它的运营理念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.与最优秀的人为伍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很早以前，我喜欢打篮球，被分配到一个水平比较高的队里。一开始适应的确很困难，但环境的压力越大（重大比赛），我的长进也就越明显。&lt;/p&gt;
&lt;p&gt;每个领域其实都一样：你周围人的水平（以及对你的期望）越高，你就会变得越优秀。&lt;/p&gt;
&lt;p&gt;谢谢你们，我的一起学习、一起参赛、一起讨论、一起走过同伴们，是你们让我变得优秀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.制造差异&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每年学习一门新编程语言。为什么不呢？不断尝试新事物，你关注的技术种类越多，脚下的路就越宽广，你的职业生涯就会日新月异。不知道几年后Java的趋势如何？那就学习Clojure。学Ruby还是Python？这两种语言都可以试试啊。然后你才能知道哪种语言更适合某个特定的项目。看，掌握的语言多了，才能在需要的时候信手拈来吧。&lt;/p&gt;
&lt;p&gt;趁着我们还年轻，抓紧时间吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.畏惧，是最大的敌人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还是直接从书中摘一句吧：“在畏惧中做出的职业规划，很可能会让自己后半辈子就一直被‘圈禁’在小隔断里，永远不会有创造明天辉煌的时刻。没错，那样是安全，但有意思吗？”&lt;/p&gt;
&lt;p&gt;什么是幸福？当你找到自己真正想要的生活是，那就是幸福。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.要成为多面手&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你掌握了所在领域的知识，那你只能是一名专业人士。用PHP编程？花点时间设置一台Apache服务器，让PHP和MySQL都跑起来。一直在用jQuery？试试Prototype。你懂了吧。&lt;/p&gt;
&lt;p&gt;不要被误导，前提是必须精通一门。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.一个字：做&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;别指望别人过来教你该怎么做，出去，自己学着去做！&lt;/p&gt;
&lt;p&gt;成功是&lt;strong&gt;做&lt;/strong&gt;出来的，不是说出来的，也不是听出来的，更不是想出来的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.找一位好老师&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;找一位好老师可以让你在学习技术的时候有的放矢。作者给我们讲述了别人是怎么指导他学习的（顺便说一句，作者在这本书里讲了很多个人经历的小故事，他居然从一位演奏家转行来做软件开发！）：“好好研究一下目录服务，熟悉一种UNIX变体，然后再掌握一门脚本语言。”&lt;/p&gt;
&lt;p&gt;请记住这句禅宗谚语：“循路觅宗师，形影不相离，师知吾亦知，吾乃成宗师。”&lt;/p&gt;
&lt;p&gt;谢谢你们，我敬爱的老师们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9.主动教会别人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;教会别人是一种最好的学习方式。写一篇博客能帮你搞清楚一个问题。为此，你必须先掌握很多材料，同时还要有条有理地讲给别人听（写作技能）。如书中所言：“要想知道自己是不是真的明白，你就讲给别人听听。”&lt;/p&gt;
&lt;p&gt;谁想学PHP的，我来讲给你，这对于我来讲也是一个学习过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10.实践，实践，再实践（训练）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只有进行大量实践（花大量的时间）才能掌握某种技术。看的很多，写的很少，遇到问题，改一改，又去读代码……（这样下去是不行的）。&lt;/p&gt;
&lt;p&gt;要特别警惕拖延症。其实，往往只要有了开头就好办了。&lt;/p&gt;
&lt;p&gt;自我加压，效果会更好。我曾在一篇博客中提到帕金森定律：紧张的时限可以让你提高工作效率。为什么不把这个定律用到学习上呢，比如说在y时间内学会x？&lt;/p&gt;
&lt;p&gt;拖延症是可怕的，必须改变自己。我今年对自己有个要求，就是要做成99件事，这些事都是我寒假写好的，其中有20件留空给新想法机会。年底的时候，做一次评估，来决定是否发布李昭谕Beta 1.0版。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11.从小处入手&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每天都取得一项小成果，每天都要坚持做（写在博客上？）。这样一来，你只能让自己比昨天更进步，而不能说自己比上星期进步了一点。&lt;/p&gt;
&lt;p&gt;集腋成裘，每天进步一点点，每天都在成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12.享受过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关注当下，而不是目标，享受那些在追逐未来目标的途中可能无暇顾及的小胜利。人总要生活在当下。我享受编程的过程，就像享受编程的结果一样。&lt;/p&gt;
&lt;p&gt;过程是比结果更重要的财富，但有时候，结果却是决定我们成败的关键。童鞋们，我们要看清这一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13.不要丧失危机感&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;越是成功，就越容易犯重大错误。永远不要忘了危机感，特别是要认识到你今天所知道的，到了明天可能就会一文不值。过去的荣耀不能保你永远无虞。&lt;/p&gt;
&lt;p&gt;据书中所说，你最好是要让自己能够“通用”，而不要对哪种技术或哪个公司产生依赖。你所掌握的某些技能，甚至你的工作，到了明天都可能会变得毫无价值。因此要不断提高/丰富/扩展自己的技能。&lt;/p&gt;
&lt;p&gt;居安思危。但不要杞人忧天。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14.推销自己&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为某个项目贡献自己的一份力量，写一篇博客，共享自己的源代码，成为对某个社区有用的人。&lt;/p&gt;
&lt;p&gt;当然，做这些事可能需要激情，要看你的爱好，但这些事也会间接地推广你的工作成果，证明你的实力，提高你的知名度。&lt;/p&gt;
&lt;p&gt;创造价值，当我们做一件事时可以想一下，如果我不做，怎么能证明我来过。我做了，本来应该那样的变成这样了，就是说，我改变了它，这个改变将影响后代几万甚至几亿年，或更长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;15.关注市场&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;书中还提到了“预警极客”，也就是那些始终引领技术发展的人。这些人说过的话往往带有预见性，他们提到事物也许过几天就会成为头条新闻。关注这些人，常看他们的Twitter和博客。&lt;/p&gt;
&lt;p&gt;对，要做一个有眼界的人。&lt;/p&gt;</summary><category term="改变自己"></category><category term="程序员"></category></entry><entry><title>传说中程序员的层次</title><link href="http://hackecho.com/2011/04/level-of-programmer/" rel="alternate"></link><updated>2011-04-11T21:52:32-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-04-11:2011/04/level-of-programmer/</id><summary type="html">&lt;p&gt;记得很久以前看过这篇文章，本以为当时的我怎么说也应该达到第三级了吧，可读完第一级就发现我已经落后了...&lt;/p&gt;
&lt;p&gt;自西方文艺复兴以来，中国在自然科学方面落后西方很多，软件领域也不例外。当然现在中国的许多程序员们对此可能有许多不同的意见，有些人认为中国的程序员水平远落后于西方，有些则认为中国的程序员个人能力并不比西方的程序员差，只是整个软件产业落后而已。&lt;/p&gt;
&lt;p&gt;那么，到底中国的程序员水平比西方程序员水平差，还是中国有许多优秀的程序员达到或超过了西方程序员同等水平呢？要解决这个问题，必须先知道程序员有多少种技术层级，每个层级需要什么样的技术水平，然后再比较中国和西方在各个技术层级的人数，就可以知道到底有没有差距，差距有多大。&lt;/p&gt;
&lt;p&gt;当然，对于如何划分程序员的技术层级，不同公司或不同人会有不同的划分标准，下面的划分仅代表个人的观点，如有不当之处，还请砸板砖予以纠正。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第1层  菜鸟&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第1层楼属于地板层，迈进这层楼的门槛是很低的。基本上懂计算机的基本操作，了解计算机专业的一些基础知识，掌握一门基本的编程语言如C/C++，或者Java，或者JavaScript，...，均可入门迈进这层。&lt;/p&gt;
&lt;p&gt;在这层上，中国有着绝对的优势，除了从计算机专业毕业的众多人数外，还有大量的通信、自动化、数学等相关专业的人士进入这一行，此外还有众多的其他专业转行的人士，人数绝对比西方多出甚多。并且还有一个优势就是我们这层人员的平均智商比西方肯定高。&lt;/p&gt;
&lt;p&gt;没有多少人愿意一辈子做菜鸟，因为做"菜鸟"的滋味实在是不咋的，整天被老大们吆喝着去装装机器，搭建一下测试环境，或者对照着别人写好的测试用例做一些黑盒测试，好一点的可以被安排去写一点测试代码。当然如果运气"好"的话，碰到了国内的一些作坊式的公司，也有机会去写一些正式的代码。&lt;/p&gt;
&lt;p&gt;所以，菜鸟们总是在努力学习，希望爬更高的一层楼去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第2层 大虾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从第1层爬到第2层相对容易一些，以C/C++程序员为例，只要熟练掌握C/C++编程语言，掌握C标准库和常用的各种数据结构算法，掌握STL的基本实现和使用方法，掌握多线程编程基础知识，掌握一种开发环境，再对各种操作系统的API都去使用一下，搞网络编程的当然对socket编程要好好掌握一下，然后再学习一些面向对象的设计知识和设计模式等，学习一些测试、软件工程和质量控制的基本知识，大部分人经过2～3年的努力，都可以爬到第2层，晋升为"大虾"。&lt;/p&gt;
&lt;p&gt;中国的"大虾"数量和"菜鸟"数量估计不会少多少，所以这层上仍然远领先于西方。&lt;/p&gt;
&lt;p&gt;大虾们通常还是有些自知之明，知道自己只能实现一些简单的功能，做不了大的东西，有时候还会遇到一些疑难问题给卡住，所以他们对那些大牛级的人物通常是非常崇拜的，国外的如Robert C. Martin、Linus Torvalds，国内的如求伯君、王志东等通常是他们崇拜的对象。其中的有些人希望有一天也能达到这些大牛级人物的水平，所以他们继续往楼上爬去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第3层 牛人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于"大虾"们经常被一些疑难问题给卡住，所以有了"大虾"们只好继续学习，他们需要将原来所学的知识进一步熟练掌握，比如以熟练掌握C++编程语言为例，除了学一些基础性的C++书籍如《C++ Primer》，《Effective C++》，《Think in C++》，《Exception C++》等之外，更重要的是需要了解C++编译器的原理和实现机制，了解操作系统中的内部机制如内存管理、进程和线程的管理机制，了解处理器的基础知识和代码优化的方法，此外还需要更深入地学习更多的数据结构与算法，掌握更深入的测试和调试知识以及质量管理和控制方法，对各种设计方法有更好的理解等。&lt;/p&gt;
&lt;p&gt;学习上面说的这些知识不是一挥而就的，不看个三五十本书并掌握它是做不到的。以数据结构算法来说，至少要看个5～10本这方面的著作；以软件设计来说，光懂结构化设计、面向对象设计和一些设计模式是不够的，还要了解软件架构设计、交互设计、面向方面的设计、面向使用的设计、面向数据结构算法的设计、情感化设计等，否则是很难进到这个楼层的。&lt;/p&gt;
&lt;p&gt;当然除了上面说的知识外，大虾们还需要去学习各种经验和技巧。当然这点难不倒他们，现在出版的书籍众多，网络上的技术文章更是不胜数，然后再去各种专业论坛里泡一泡，把这些书籍和文章中的各种经验、技能、技巧掌握下来，再去学习一些知名的开源项目如Apache或Linux操作系统的源代码实现等。此时对付一般的疑难问题通常都不在话下，菜鸟和大虾们会觉得你很"牛"，你也就爬到了第3层，晋升为"牛人"了。&lt;/p&gt;
&lt;p&gt;看了上面所讲的要求，可能有些大虾要晕过去了，成为牛人要学这么多东西啊！要求是不是太高了？其实要求一点也不高，这么点东西都掌握不了的话，怎么能让别人觉得你"牛"呢？&lt;/p&gt;
&lt;p&gt;需要提一下的是，进入多核时代后，从第2层爬到第3层增加了一道多核编程的门槛。当然要迈过这道门槛并不难，已经有很多前辈高人迈进了这道门槛，只要循着他们的足迹前进就可以了。想迈进这道门槛者不妨去学习一下TBB开源项目的源代码(链接：http://www.threadingbuildingblocks.org/)，然后上Intel的博客（http://softwareblogs-zho.intel.com/）和多核论坛（http://forum.csdn.net/Intel/IntelMulti-core/）去看看相关文章，再买上几本相关的书籍学习一下。&lt;/p&gt;
&lt;p&gt;在国内， 一旦成为"牛人"，通常可以到许多知名的公司里去，运气好者可以挂上一个架构师的头衔，甚至挂上一个"首席架构师"或者"首席xx学家"的头衔也不足为奇。有不少爬到这层的人就以为到了楼顶了，可以眼睛往天上看了，开始目空一切起来，以为自己什么都可以做了，什么都懂了，经常在网络上乱砸板砖是这个群体的最好写照。由此也看出，国内的牛人数量仍然众多，远多于西方的牛人数量，在这层上仍然是领先的。&lt;/p&gt;
&lt;p&gt;也有不少谦虚的"牛人"，知道自己现在还不到半桶水阶段。他们深知爬楼的游戏就像猴子上树一样，往下看是笑脸，往上看是屁股。为了多看笑脸，少看屁股，他们并没有在此停步不前，而是继续寻找到更上一层的楼梯，以便继续往上爬。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第4层 大牛&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从第3层爬到第4层可不像上面说过的那几层一样容易，要成为大牛的话，你必须要能做牛人们做不了的事情，解决牛人们解决不了问题。比如牛人们通常都不懂写操作系统，不会写编译器，不懂得TCP/IP协议的底层实现，如果你有能力将其中的任何一个实现得象模象样的话，那么你就从牛人升级为"大牛"了。&lt;/p&gt;
&lt;p&gt;当然，由于各个专业领域的差别，这里举操作系统、编译器、TCP/IP协议只是作为例子，并不代表成为"大牛"一定需要掌握这些知识，以时下热门的多核编程来说，如果你能比牛人们更深入地掌握其中的各种思想原理，能更加自如的运用，并有能力去实现一个象开源项目TBB库一样的东西，也可以成为"大牛"，又或者你能写出一个类似Apache一样的服务器，或者写出一个数据库，都可以成为"大牛"。&lt;/p&gt;
&lt;p&gt;要成为"大牛"并不是一件简单的事情，需要付出比牛人们多得多的努力，一般来说，至少要看过200~400本左右的专业书籍并好好掌握它，除此之外，还得经常关注网络和期刊杂志上的各种最新信息。&lt;/p&gt;
&lt;p&gt;当"牛人"晋升为"大牛"，让"牛人们"发现有比他们更牛的人时，对"牛人"们的心灵的震撼是可想而知的。由于牛人们的数量庞大，并且牛人对大虾和菜鸟阶层有言传身教的影响，所以大牛们通常能获得非常高的社会知名度，几乎可以用"引无数菜鸟、大虾、牛人竞折腰"来形容，看看前面提过的Linus Torvalds等大牛，应该知道此言不虚。&lt;/p&gt;
&lt;p&gt;虽然成为"大牛"的条件看起来似乎很高似的，但是这层楼并不是很难爬的一层，只要通过一定的努力，素质不是很差，还是有许多"牛人"可以爬到这一层的。由此可知，"大牛"这个楼层的人数其实并不像想像的那么少，例如比尔·盖茨之类的人好像也是属于这一层的。&lt;/p&gt;
&lt;p&gt;由于"大牛"这层的人数不少，所以也很难统计除到底是中国的"大牛"数量多还是西方的大牛数量多？我估计应该是个旗鼓相当的数量，或者中国的"大牛"们会更多一些。&lt;/p&gt;
&lt;p&gt;看到这里，可能会有很多人会以为我在这里说瞎话，Linus Torvalds写出了著名的Linux操作系统，我国并没有人写出过类似的东西啊，我国的"大牛"怎么能和西方的比呢? 不知大家注意到没有，Linus Torvalds只是写出了一个"象模象样"的操作系统雏形，Linux后来真正发展成闻名全球的开源操作系统期间，完全是因为许多支持开源的商业公司如IBM等，派出了许多比Linus Torvalds更高楼层的幕后英雄在里面把它开发出来的。&lt;/p&gt;
&lt;p&gt;可能有些菜鸟认为Linus Torvalds是程序员中的上帝，不妨说个小故事：&lt;/p&gt;
&lt;p&gt;Linus，Richard Stallman和Don Knuth（高德纳）一同参加一个会议。&lt;/p&gt;
&lt;p&gt;Linus 说："上帝说我创造了世界上最优秀的操作系统。"&lt;/p&gt;
&lt;p&gt;Richard Stallman自然不甘示弱地说："上帝说我创造了世界上最好用的编译器。"&lt;/p&gt;
&lt;p&gt;Don Knuth一脸疑惑的说："等等，等等，我什么时候说过这些话？"&lt;/p&gt;
&lt;p&gt;由此可以看出，Linus Torvalds的技术水平并不像想像中那么高，只是"牛人"和"大虾"觉得"大牛"比他们更牛吧了。在我国，有一些当时还处于"大虾"层的人物，也能写出介绍如何写操作系统的书，并且书写得非常出色，而且写出了一个有那么一点点象模象样的操作系统来。我想中国的"大牛"们是不会比西方差的，之所以没有人写出类似的商业产品来，完全是社会环境的原因，并不是技术能力达不到的原因。&lt;/p&gt;
&lt;p&gt;"大牛"们之所以成为大牛，主要的原因是因为把"牛人"给盖了下去，并不是他们自己觉得如何牛。也许有很多菜鸟、大虾甚至牛人觉得"大牛"这层已经到顶了，但大多数"大牛"估计应该是有自知之明的，他们知道自己现在还没有爬到半山腰，也就勉强能算个半桶水的水平，其中有些爬到这层没有累趴下，仍然能量充沛，并且又有志者，还是会继续往更上一层楼爬的。&lt;/p&gt;
&lt;p&gt;看到这里，也许有些菜鸟、大虾、牛人想不明白了，还有比"大牛"们更高的楼层，那会是什么样的楼层？下面就来看看第5层楼的奥妙。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第5层 专家&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当大牛们真正动手做一个操作系统或者类似的其他软件时，他们就会发现自己的基本功仍然有很多的不足。以内存管理为例，如果直接抄袭Linux或者其他开源操作系统的内存管理算法，会被人看不起的，如果自动动手实现一个内存管理算法，他会发现现在有关内存管理方法的算法数量众多，自己并没有全部学过和实践过，不知道到底该用那种内存管理算法。&lt;/p&gt;
&lt;p&gt;看到这里，可能有些人已经明白第5层楼的奥妙了，那就是需要做基础研究，当然在计算机里，最重要的就是"计算"二字，程序员要做基础研究，主要的内容就是研究非数值"计算"。&lt;/p&gt;
&lt;p&gt;非数值计算可是一个非常庞大的领域，不仅时下热门的"多核计算"与"云计算"属于非数值计算范畴，就是软件需求、设计、测试、调试、评估、质量控制、软件工程等本质上也属于非数值计算的范畴，甚至芯片硬件设计也同样牵涉到非数值计算。如果你还没有真正领悟"计算"二字的含义，那么你就没有机会进到这层楼来。&lt;/p&gt;
&lt;p&gt;可能有人仍然没有明白为什么比尔·盖茨被划在了大牛层，没有进到这层来。虽然比尔·盖茨大学未毕业，学历不够，但是家有藏书2万余册，进入软件这个行业比绝大部分人都早，撇开他的商业才能不谈，即使只看他的技术水平，也可以算得上是学富五车，顶上几个普通的计算机软件博士之和是没有问题的，比起Linus Torvalds之类的"大牛"们应该技高一筹才对，怎么还进不了这层楼呢？&lt;/p&gt;
&lt;p&gt;非常遗憾的是，从Windows操作系统的实现来看，其对计算的理解是很肤浅的，如果把Google对计算方面的理解比做大学生，比尔·盖茨只能算做一个初中生，所以比尔·盖茨永远只能做个大牛人，成不了"专家"。&lt;/p&gt;
&lt;p&gt;看到这里，也许国内的大牛们要高兴起来了，原来比尔·盖茨也只和我等在同一个层次，只要再升一层就可以超越比尔·盖茨了。不过爬到这层可没有从"牛人"升为"大牛"那么简单，人家比尔·盖茨都家有2万多册书，让你看个500~1000本以上的专业书籍并掌握好它应该要求不高吧。当然，这并不是主要的条件，更重要的是，需要到专业的学术站点去学习了，到ACM，IEEE，Elsevier，SpringerLink，SIAM等地方去下载论文应该成为你的定期功课，使用Google搜索引擎中的学术搜索更是应该成为你的日常必修课。此外，你还得经常关注是否有与你研究相关的开源项目冒出来，例如当听到有TBB这样针对多核的开源项目时，你应该第一时间到Google里输入"TBB"搜索一下，将其源代码下载下来好好研究一番，这样也许你的一只脚已经快迈进了这层楼的门槛。&lt;/p&gt;
&lt;p&gt;当你象我上面说的那样去做了以后，随着时间的推移，总会有某天，你发现，在很多小的领域里，你已经学不到什么新东西了，所有最新出来的研究成果你几乎都知道。此时你会发现你比在做"牛人"和"大牛"时的水平不知高出了多少，但是你一点也"牛"不起来，因为你学的知识和思想都是别人提出来的，你自己并没有多少自己的知识和思想分享给别人，所以你还得继续往楼上爬才行。&lt;/p&gt;
&lt;p&gt;我不知道国内的"专家"到底有多少，不过有一点可以肯定的是，如果把那些专门蒙大家的"砖家"也算上的话，我们的砖家比西方的要多得多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第6层 学者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当"专家"们想继续往上一层楼爬时，他们几乎一眼就可以看到楼梯的入口，不过令他们吃惊的是，楼梯入口处竖了一道高高的门槛，上面写着"创新"二字。不幸的是，大多数人在爬到第5层楼时已经体能消耗过度，无力翻过这道门槛。&lt;/p&gt;
&lt;p&gt;有少数体能充足者，可以轻易翻越这道门槛，但是并不意味着体力消耗过度者就无法翻越，因为你只是暂时还没有掌握恢复体能的方法而已，当掌握了恢复体能的方法，将体能恢复后，你就可以轻易地翻越这道门槛了。&lt;/p&gt;
&lt;p&gt;怎么才能将体能恢复呢？我们的老祖宗"孔子"早就教导过我们"温故而知新"，在英文里，研究的单词是"research"，其前缀"re"和"search"分别是什么意思不用我解释吧。或许有些人觉得"温故而知新"和"research"有些抽象，不好理解，我再给打个简单的比方，比如你在爬一座高山，爬了半天，中途体力不支，怎么恢复体力呢？自然是休息一下，重新进食一些食物，体力很快就可以得到恢复。&lt;/p&gt;
&lt;p&gt;由此可知，对体能消耗过度者，休息＋重新进食通常是恢复体能的最佳选择。可惜的是，国内的老板们并不懂得这点，他们的公司里不仅连正常国家规定的休息时间都不给足，有些公司甚至有员工"过劳死"出现。所以国内能翻越"创新"这道门槛的人是"少之又少"，和西方比起来估计是数量级的差别。&lt;/p&gt;
&lt;p&gt;再说说重新进食的问题，这个重新进食是有讲究的，需要进食一些基础性易消化的简单食物，不能进食山珍海味级的复杂食物，否则很难快速吸收。以查找为例，并不是去天天盯着那些复杂的查找结构和算法进行研究，你需要做的是将二分查找、哈希查找、普通二叉树查找等基础性的知识好好地复习几遍。&lt;/p&gt;
&lt;p&gt;以哈希查找为例，首先你需要去将各种冲突解决方法如链式结构、二次哈希等编写一遍，再试试不同种类的哈希函数，然后还需要试试在硬盘中如何实现哈希查找，并考虑数据从硬盘读到内存后，如何组织硬盘中的数据才能快速地在内存中构建出哈希表来，...，这样你可能需要将一个哈希表写上十几个不同的版本，并比较各个版本的性能、功能方面的区别和适用范围。&lt;/p&gt;
&lt;p&gt;总之，对任何一种简单的东西，你需要考虑各种各样的需求，以需求来驱动研究。最后你将各种最基础性的查找结构和算法都了然于胸后，或许某天你再看其他更复杂的查找算法，或者你在散步时，脑袋里灵光一现，突然间就发现了更好的方法，也就从专家晋升为"学者"了。&lt;/p&gt;
&lt;p&gt;学者所做的事情，通常都是在前人的基础上，进行一些小的优化和改进，例如别人发明了链式基数排序的方法，你第1个发现使用一定的方法，可以用数组替代链表进行基数排序，性能还能得到进一步提高。&lt;/p&gt;
&lt;p&gt;由于学者需要的只是一些小的优化改进，因此中国还是有一定数量的学者。不过和国外的数量比起来，估计少了一个数量级而已。&lt;/p&gt;
&lt;p&gt;也许有人会觉得现在中国许多公司申请专利的数量达到甚至超过西方发达国家了，我们的学者数量应该不会比他们少多少。因此，有必要把专利和这里说的创新的区别解释一下。&lt;/p&gt;
&lt;p&gt;所谓专利者，只要是以前没有的，新的东西，都可以申请专利；甚至是以前有的东西，你把他用到了一个新的领域的产品里去，也可以申请专利。比如你在房子里造一个水泥柱子，只要以前没有人就这件事申请专利，那么你就可以申请专利，并且下次你把水泥柱子挪一个位置，又可以申请一个新的专利；或者你在一个柜子上打上几个孔，下次又把孔的位置改一改，...，均可申请专利。&lt;/p&gt;
&lt;p&gt;这层楼里所说的创新，是指学术层面的创新，是基础研究方面的创新，和专利的概念是完全不同的，难度也是完全不同的。你即使申请了一万个象那种打孔一类的专利，加起来也够不到这层楼里的一个创新。&lt;/p&gt;
&lt;p&gt;当你爬到第6层楼时，你也许会有一种突破极限的快感，因为你终于把那道高高的写着"创新"二字的门槛给翻过去了，实现了"0"的突破。这时，你也许有一种"独上高楼，欲望尽天涯路"的感觉，但是很快你会发现看到的都是比较近的路，远处的路根本看不清楚。如果你还有足够的体力的话，你会想爬到更高一层的楼层去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第7层 大师&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从第6层楼爬到第7层楼，并没有多少捷径可走，主要看你有没有足够的能量。你如果能象Hoare一样设计出一个快速排序的算法；或者象Eugene W. Myers一样设计出了一个用编辑图的最短路径模型来解决diff问题的算法；或者象M.J.D. Powell一样提出了一个能够处理非线性规划问题的SQP方法；或者你发现基于比较的排序算法，它的复杂度下界为O(NLogN)；或者你发现用栈可以将递归的算法变成非递归的；或者你设计出一个红黑树或者AVL树之类的查找结构；或者你设计出一个象C++或Java一样的语言；或者你发明了UML；...，你就爬到了第7层，晋升为"大师"了。&lt;/p&gt;
&lt;p&gt;上面举的这些例子中，其中有些人站的楼层比这层高，这里只是为了形象说明而举例他们的某个成就。从上面列出的一些大师的贡献可以看出，成为大师必须要有较大的贡献。首先解决问题必须是比较重要的，其次你要比前辈们在某方面有一个较大的提高，或者你解决的是一个全新的以前没有解决过的问题；最重要的是，主要的思路和方法必须是你自己提供的，不再是在别人的思路基础上进行的优化和改进。&lt;/p&gt;
&lt;p&gt;看了上面这些要求，如果能量不够的话，你也许会觉得有些困难，所以不是每个人都能成为"大师"的。中国软件业里能称得上是"大师"的人，用屈指可数来形容，估计是绰绰有余。值得一提得是，国外的"大师"就象我们的"大牛"一样满天飞的多。&lt;/p&gt;
&lt;p&gt;我把我猜测本国有可能进到这层楼的大师列一下，以起个抛砖引玉的作用。汉王的"手写识别"技术由于是完全保密的，不知道它里面用了什么思想，原创思想占的比重有多少，因此不知道该把它划到这层楼还是更高一层楼去。原山东大学王小云教授破解DES和MD5算法时，用到的方法不知道是不是完全原创的，如果是的话也可进到这层楼来。&lt;/p&gt;
&lt;p&gt;陈景润虽然没有彻底解决哥德巴赫猜想，但他在解决问题时所用的方法是创新的，因此也可以进到这层楼来。当然，如果能彻底解决哥德巴赫猜想，那么可以算到更高的楼层去。&lt;/p&gt;
&lt;p&gt;求伯君和王志东等大牛们，他们在做WPS和表格处理之类的软件时，不知是否有较大的原创算法在里面，如果有的话就算我错把他们划到了大牛层。由于所学有限，不知道国内还有那些人能够得上"大师"的级别，或许有少量做研究的教授、院士们，可以达到这个级别，有知道的不妨回个帖子晾一晾。&lt;/p&gt;
&lt;p&gt;鉴于"大师"这个称号的光环效应，相信有不少人梦想着成为"大师"。或许你看了前面举的一些大师的例子，你会觉得要成为大师非常困难。不妨说一下，现在有一条通往"大师"之路的捷径打开了，那就是多核计算领域，有大量的处女地等待大家去挖掘。&lt;/p&gt;
&lt;p&gt;以前在单核时代开发的各种算法，现在都需要改写成并行的。数据结构与算法、图像处理、数值计算、操作系统、编译器、测试调试等各个领域，都存在大量的机会，可以让你进到这层楼来，甚至有可能让你进到更高一层楼去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第8层 科学家&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;科学家向来都是一个神圣的称号，因此我把他放在了“大师”之上。要成为科学家，你的贡献必须超越大师，不妨随便举一些例子。&lt;/p&gt;
&lt;p&gt;如果你象Dijkstra一样设计了ALGOL语言，提出了程序设计的三种基本结构：顺序、选择、循环，那么你可以爬到第8层楼来。顺便说一下，即使抛开这个成果，Dijkstra凭他的PV操作和信号量概念的提出，同样可以进到这层楼。&lt;/p&gt;
&lt;p&gt;如果你象Don Knuth一样，是数据结构与算法这门学科的重要奠基者，你也可以进到这层楼来。当然，数据结构和算法这门学科不是某个人开创的，是许多大师和科学家集体开创的。&lt;/p&gt;
&lt;p&gt;如果你象巴科斯一样发明了Fortran语言，并提出了巴科斯范式，对高级程序语言的发展起了重要作用，你也可以进到这层楼来。&lt;/p&gt;
&lt;p&gt;或者你象Ken Thompson、Dennis Ritchie一样发明了Unix操作系统和功能强大、高效、灵活、表达力强的C语言，对操作系统理论和高级编程语言均作出重大贡献，那么你也可以进到这层楼来。&lt;/p&gt;
&lt;p&gt;或者你有Frederick P. Brooks一样机会，可以去领导开发IBM的大型计算机System/360和OS/360操作系统，并在失败后反思总结，写出《人月神话》，对软件工程作出里程碑式的贡献，你也可以进到这层来。&lt;/p&gt;
&lt;p&gt;或者你提出了面向对象设计的基本思想，或者你设计了互联网的TCP/IP协议，或者你象Steven A.Cook一样奠定NP完全性的理论基础，或者你象Frances Allen一样专注于并行计算来实现编译技术，在编译优化理论和技术取得基础性的成就，…，均可进入这层。&lt;/p&gt;
&lt;p&gt;当然，如果你发明了C++语言或者Java语言，你进不到这层来，因为你用到的主要思想都是这层楼中的科学家提出的，你自己并没有没有多少原创思想在里面。&lt;/p&gt;
&lt;p&gt;看了上面列出的科学家的成就，你会发现，要成为“科学家”，通常要开创一门分支学科，或者是这个分支学科的奠基者，或者在某个分支学科里作出里程碑式的重大贡献。如果做不到这些的话，那么你能象Andrew C. Yao（姚期智）一样在对计算理论的多个方向如伪随机数生成，密码学与通信复杂度等各个方向上作出重要贡献，成为集大成者，也可以进入这层楼。&lt;/p&gt;
&lt;p&gt;成为“科学家”后，如果你有幸象Dijkstra一样，出现在一个非常重视科学的国度。当你去世时，你家乡满城的人都会自动地去为你送葬。不过如果不幸生错地方的话，能不挨“板砖”估计就算万幸了。&lt;/p&gt;
&lt;p&gt;从上面随便举的一些例子中，你可能能猜到，西方科学家的数量是非常多的，于是你会想中国应该也有少量的科学家吧？我可以很负责任地告诉你一个不幸的结果，中国本土产生的科学家的数量为0。目前在国内，软件领域的唯一的科学家就是上面提过的姚期智，还是国外请回来的，并不是本土产生的。&lt;/p&gt;
&lt;p&gt;可能你不同意我说的本土科学家数量为0的结论，因为你经常看到有许多公司里都有所谓“首席XX科学家”的头衔。我想说的是，这些所谓的“首席XX科学家”都是远远够不到这层楼的级别的，有些人的水平估计也就是一个“牛人”或“大牛”的级别，好一点的最多也就一个“学者”的级别。尤其是那些被称作“首席经X学家”的，基本上可以把称号改为“首席坑大家”。&lt;/p&gt;
&lt;p&gt;虽然我国没有人能爬到这层楼上来，但是西方国家仍然有许多人爬到了比这层更高的楼上。如果要问我们比西方落后多少？那么可以简单地回答为：“落后了三层楼”。下面就来看看我们做梦都没有到过的更高一层楼的秘密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第9层 大科学家&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入这层楼的门槛通常需要一些运气，比如某天有个苹果砸到你头上时，你碰巧发现了万有引力，那么你可以进到这层楼来。当然，万有引力几百年前就被人发现了，如果你现在到处嚷嚷着说你发现了万有引力，恐怕马上会有人打110，然后警察会把你送到不正常人类的聚集地去。因此，这里举万有引力的例子，只是说你要有类似的成就才能进到这层楼来。&lt;/p&gt;
&lt;p&gt;牛顿发现万有引力定律开创了经典物理运动力学这门学科，如果你也能开创一门大的学科，那么你就从科学家晋升为“大科学家”。比如爱因斯坦创建了相对论，从一个小职员变成了大科学家。当然大科学家可远不止这两人，数学界里比物理学界更是多得多，如欧几里得创建了平面几何，笛卡尔开创解析几何，还有欧拉、高斯、莱布尼茨等数不清的人物，跟计算相关的大科学家则有图灵等人。&lt;/p&gt;
&lt;p&gt;从上面列出的一些大科学家可以发现，他们的成就不仅是开创了一个大的学科，更重要的是他们的成就上升到了“公理”的层面。发现公理通常是需要一点运气的，如果你的运气不够好的话，另外还有一个笨办法也可以进到这层楼来，那就是成为集大成者。例如冯·诺伊曼，对数学的所有分支都非常了解，许多领域都有较大的贡献，即使撇开他对计算机的开创贡献，成为大科学家照样绰绰有余。&lt;/p&gt;
&lt;p&gt;当然，程序员们最关心的是自己有没有机会变成大科学家。既然计算机这门大学科的开创性成果早就被冯·诺伊曼、图灵等人摘走了，那么程序员们是不是没有机会变成大科学家了呢？我们的古人说得好：“江山代有才人出，各领风骚数百年”，现在在计算机这门学科下面诞生了许多非常重要的大的分支，所以你还是有足够的机会进到这层楼的。&lt;/p&gt;
&lt;p&gt;如果你能够彻底解决自然语言理解（机器翻译）这门学科中的核心问题， 或者你在人工智能或者机器视觉（图像识别）方面有突破性的发现，那么你同样可以轻易地晋升为“大科学家”。这样当某天你老了去世时，或许那天国人已经觉醒，你也能享受到如Dijkstra一样的待遇，有满城甚至全国的人去为你送葬。&lt;/p&gt;
&lt;p&gt;现在还剩下另外一个大家感兴趣的问题没有讨论，那就是这层中已经出现了牛顿、爱因斯坦、高斯等我们平常人都认为是顶级的科学家，是不是这层已经是楼顶了呢？相信还记得本文标题的人应该知道现在仅仅是第9层，还有第10层没有到达呢。可能不少人现在要感到困惑了，难道还有人站在比牛顿、爱因斯坦、高斯等人更高的楼层上？&lt;/p&gt;
&lt;p&gt;这个世界上确实存在可以用一只手的手指数得清的那么几个人，他们爬到了第10层楼上。因此，第10层楼不是虚构的，而是确实存在的。如果对此有疑惑或者认为我在胡诌一番的话，那么不妨继续往下看下去，窥一下第10层楼的秘密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第10层 大哲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看了这层楼的名字“大哲”，可能不少人已经猜到了这层楼的秘密，那就是你的成果必须要上升到哲学的高度，你才有机会能进到这层来。&lt;/p&gt;
&lt;p&gt;当然，上升到哲学高度只是一个必要条件，牛顿的万有引力似乎也上升到了哲学的高度，因为不知道引力到底是怎么来的，但是牛顿没有被划到这一层，因为进到这层还有另外的条件，那就是你的成果必须引起了哲学上的深度思考，并能让人们的世界观向前跨进一大步。窃以为牛顿、爱因斯坦等人的成就还达不到让人们世界观向前跨进一大步的程度。&lt;/p&gt;
&lt;p&gt;所以，这层楼中的人的成就对我们普通人认识世界非常重要，你可以不学相对论，但是你不可以不对这层楼的人所作出的成就不了解，否则你的世界观就是极其不完整的，会犯许多认识上的错误。不幸的是，中国的科普知识普及还不够到位，知道这层楼成就的人好像并不多，程序员中恐怕更少。下面就来看看这些用一只手的手指数得清的大哲们，到底有什么成就，能比万有引力定律和相对论还重要。&lt;/p&gt;
&lt;p&gt;1、希尔伯特 (1862～1943)&lt;/p&gt;
&lt;p&gt;第1位进到此楼层是一位名叫“希尔伯特”的大数学家，如果你学过《泛函分析》，那么你在学习希尔伯特空间时可能已经对这位大数学家有所了解；如果你不是学数学出身的，又对数学史不感兴趣的话，恐怕你从来没有听说过这个名字。不过如果我问一下，知不知道二次世界大战前世界数学中心在那里，你肯定会有兴趣想知道。&lt;/p&gt;
&lt;p&gt;不妨说一下，二战前整个世界的数学中心就在德国的哥廷根，而我们这位大数学家希尔伯特便是它的统帅和灵魂人物。即使在二战期间，希特勒和丘吉尔也有协定，德国不轰炸牛津和剑桥，作为回报，英国不轰炸海德堡和哥廷根。&lt;/p&gt;
&lt;p&gt;整个二十世纪上半期的超一流数学家，几乎都出自其门下。这里不妨举几个我们熟悉的人物，例如冯·诺伊曼就曾受到他和他的学生施密特和外尔的思想影响，还到哥廷根大学任过希尔伯特的助手，钱学森的老师冯·卡门是在哥廷根取得博士学位的。顺便提一下，这位大数学家发现当时物理学上出了很多大的成果如相对论和量子力学，但是这些物理学家的数学功力明显不足，因此有一段时间带领他的学生们研究过物理学，并独立发现了广义相对论，只是不好意思和物理学家争功劳，将广义相对论的功劳全部让给了爱因斯坦。&lt;/p&gt;
&lt;p&gt;广义相对论相对于这位大数学家在数学上的贡献，其实是算不了什么的，只是由此可看出这位大数学家品格的高尚之处。如果再去看看牛顿之流的人物的品行，整天和莱布尼茨、虎克等人争功劳，利用自己的优势地位打压他人，甚至闹得上法庭，和这位希尔伯特先生比起来，简直就是个小丑。&lt;/p&gt;
&lt;p&gt;说到这里，你可能对这位大数学家“希尔伯特”有了一些初步映象，感觉到了他的重要性，不过他在数学上的主要成就可不是几句话说得清楚的。首先，他是一位集大成者，精通当时数学所有分支领域，在数学的各个领域都有较大的贡献，当然这些成就只能让他成为一个大科学家，不能带他进入这层楼。事实上这位“希尔伯特”解决的任何一个数学问题都够不到这层楼的高度，那么他怎么混到这层楼来了呢？&lt;/p&gt;
&lt;p&gt;话得从1900年说起，当时还很年轻的希尔伯特在当时的世界数学大会上做了一个报告，高屋建瓯地提出了著名的23个未解决的数学问题，然后整个二十世纪上半期，全世界的数学家们都在这23个问题的指导下展开研究，直到现在仍然有许多数学家受这23个问题的指导在进行研究。例如我们熟知的哥德巴赫猜想，就属于其中第8个问题素数分布的一个子问题。&lt;/p&gt;
&lt;p&gt;如果用“高瞻远瞩”来形容这位大数学家的话，那么这个世界上恐怕没有第二个人再配得上“高瞻远瞩”这四个字，不论是欧拉、高斯、牛顿、爱因斯坦还是被誉为最有才华的数学家伽罗华，概不例外。&lt;/p&gt;
&lt;p&gt;虽然那23个问题是归纳总结出来的，并不全是原创，但是其中有不少问题是可以上升到哲学的高度，引起深度思考的。可能大多数人都会觉得希尔伯特是进不到这层楼的，我们知道提出问题的人和解决问题的人是一样伟大的，何况他提出的问题是如此之多，基于这点，个人觉得应该让希尔伯特跨进这层楼的门槛里。&lt;/p&gt;
&lt;p&gt;看完这位希尔伯特的成就，你可能会觉得对你的世界观并没有产生任何影响。确实如此，他提出的问题不是用来影响你的，而是用来影响其他大科学家和大哲的，下面再来说说另一位对他提出的23个问题中的第2个问题有杰出贡献的大哲，你就会感觉到大哲们的成果的威力了。&lt;/p&gt;
&lt;p&gt;2、哥德尔 (1906~1978)&lt;/p&gt;
&lt;p&gt;这位大哲的名字叫“哥德尔 (G?del) ”，你可能从来也没有听说过这个名字，即使你读了一个数学系的博士学位，如果你的研究方向不和这位大哲对口的话，你也不一定了解这位大哲的成就，更不知道他的成果对我们这个世界有何意义。&lt;/p&gt;
&lt;p&gt;简单地说，这位大哲20多岁时就证明了两个定理，一个叫做“哥德尔完全性定理”，另一个更重要的叫做“哥德尔不完全性定理”。你也许会觉得奇怪，第9层楼的成就就已经上升到了公理的高度，这种证明定理的事情不是学者和大师们做的事情吗？怎么能比第9层楼的成就还高呢？下面就来简单说一下这两个定理的含义，你就会明白这属于系统级的定理，绝不是普通的定理和公理所能比拟的。&lt;/p&gt;
&lt;p&gt;“哥德尔完全性定理”证明了逻辑学的几条公理是完备的，即任何一个由这些公理所产生出的问题，在这个公理系统内可以判定它是真的还是假的，这个结论表明了我们人类所拥有的逻辑思维能力是完备的。这条定理并不能将其带入这层楼来，带其进入这层楼的是另一条定理。&lt;/p&gt;
&lt;p&gt;“哥德尔不完全性定理”是在1930年证明的，它证明了现有数学的几条公理（ZF公理系统）是不完备的，即由这些公理产生出的问题，无法由这几条公理判断它是真的还是假的。例如希尔伯特23个问题中的第1个问题，也就是著名的康托尔连续统假设，哥德尔在1938年证明了现有公理系统中不能证明它是“假”的，科恩（Cohen，或许也可以称得上是“半”个大哲）在1963年证明了现有公理系统不能证明它是“真”的。最有趣的是，即使你将某个不可判定的问题，作为一条新的公理加入进去，所组成的新的公理系统仍然是不完备的，即你无法构造一个有限条公理的系统，让这个公理系统是完备的。&lt;/p&gt;
&lt;p&gt;也许你仍然无法理解上面这段话的含义，不妨先说一下它对我们现实世界的影响。你可能知道1936年出现的图灵机是现代计算机的理论模型，如果没有哥德尔不完全性定理的思想，图灵机什么时候能出来是很难说的，所以这位哥德尔可以算作计算机理论的奠基者的奠基者。计算机对我们这个世界产生的影响比原子弹大了多少，我想不用我说大家也都清楚。当然，对现实世界的影响只能把哥德尔同图灵等人一样划到大科学家那一层去，能进入这层乃是另有原因。&lt;/p&gt;
&lt;p&gt;可能你看过《未来战士》、《黑客帝国》、《I，Robot》之类的科幻电影，于是你产生制造一个和人一样或者比人更高一级的智能机器人的想法，这就引入了一个达到哲学高度的问题，“人到底能不能制造出具有和人一样的思维能力的机器来？”。&lt;/p&gt;
&lt;p&gt;我只能告诉你，“你的愿望是良好的，但现实是残酷的”。如果你仔细思考一下不完全性定理的含义，并结合现代计算机所具有的能力分析一下，你会发现这个问题的答案暂时是否定的。如果你想造出和人一样思维能力的机器，那么你需要去好好学习这位大哲及其后续研究者的成果，并在他们的基础上有新的突破才行。&lt;/p&gt;
&lt;p&gt;为了说明这位大哲所研究领域的重要性，这里顺便再讨论一个我们日常争议不休的问题，那就是孔夫子的“人之初、性本善”以及西方认为“人之初、性本恶”的观点孰优孰劣的问题。可能有许多人发现西方社会现在领先我们，于是就认为“性本恶”是对的，“性本善”是错的，中国应该抛弃以前的旧思想，改用西方的思想。当然也有一些老学究们，认为中国的人文思想是领先于西方的，自然而然地认为“性本善”是对的，“性本恶”是错的。&lt;/p&gt;
&lt;p&gt;如果你学过大哲用过的公理化的分析方法，你就知道一套系统的多条公理间只要不会推导出矛盾的地方，即可以自圆其说，那么它可以看作是对的。这样你可以很轻易地给这个问题下一个结论，即“性本善”和“性本恶”是对等的，不存在孰优孰劣的问题，更不存在谁对谁错的问题。只要你不同时将“性本善”和“性本恶”放入一个系统内，那么是不会有问题的，甚至你也可以认为“人之初、既无善、亦无恶”，或者认为“人之初、部分善、部分恶”，都是可以自圆其说的，所以我们的老祖宗提出的思想并没有问题，之所以落后乃是其他原因造成的。这个问题其实在高斯所处的时代就有了结论，那时有人提出了非欧几何，即平行线公理问题，有人认为过一点可以作多条平行线，还有人认为平行线在无穷远点是相交的，和欧氏几何关于过一点只能作一条平行线的公理都是矛盾的，但是他们各自的系统内推导出的结论都是正确的。&lt;/p&gt;
&lt;p&gt;上面说的只是对哥德尔不完全性定理的一些粗浅解析，实际上如果深入思考一下它的含义的话，你会发现它对物理学等许多学科有重大影响，包含的道理实在是深刻，远非一般的思想所能比拟，有兴趣者不妨“google”或“百度”一下“哥德尔”。或许只有我们的老祖宗“老子”提出的哲学思想，深度可以有得一比。&lt;/p&gt;
&lt;p&gt;哥德尔不完全性定理也给那些认为科学是严谨的人当头一棒，原来连数学这样的纯理论学科都是不严谨的，其他学科就更不用说了。&lt;/p&gt;
&lt;p&gt;至此，已经说完数学上的大哲，下面不妨再看看物理学上的大哲，物理学上好像只出过一位叫“海森堡”的大哲（注：由于本人对物理学不甚了解，不知道“霍金”够不够得上大哲的称号）。&lt;/p&gt;
&lt;p&gt;3、海森堡 (1901~1976)&lt;/p&gt;
&lt;p&gt;海森堡这个名字相信没有几个人不知道的，大部分人在学习物理时都学过他的“测不准关系”，也就是因为这个“测不准关系”，海森堡爬到了第十层楼。&lt;/p&gt;
&lt;p&gt;如果你看过《时间简史》和《霍金讲演录－黑洞、婴儿宇宙及其他》，你也许已经了解测不准关系的威力，所以这里不想做过多的讨论，只谈一些和本土产生的哲学思想相关的东西。&lt;/p&gt;
&lt;p&gt;首先看看争论了几千年，并且现在仍然有人在争论不休的“宿命论”问题。霍金认为，只要这个宇宙有一个初始状态，粒子的运动是按照一定物理定律进行的（比如相对论、量子力学属于这些物理定律的一部分），那么所有的粒子运动轨迹将是确定的，然后只要你承认唯物论，即精神是由物质决定的，那么宿命论就是“对”的。当然由于测不准关系的存在，对人而言，又是无法准确预测的，因此也可以将其看作是“不对”的。简单的说，可以认为宿命论是“对”的是绝对的，宿命论是“不对”的是相对的。&lt;/p&gt;
&lt;p&gt;可能上面这段话你现在仍然难以理解，或许你又觉得你的命运并不是上天注定的，而是可以通过自己的努力可以改变的。我要告诉你的是，你在想什么也是事先已注定的，包括你在预测本身也是事先注定的，因为大脑思考问题最终是基本粒子运动的结果，而这些粒子的运动必然要遵循物理定律进行，所以你会不会努力，想不想努力，包括你在想你该不该努力这件事本身也是事先注定的。顺便说一下，你现在正在看这篇文章，可能正在想这个宿命论问题值得怀疑，或者觉得写得不够好，准备砸个板砖上来；或者你在想这篇问题写得有点意思，准备看完后转给朋友看一看；又或者你看到这里，觉得很累了，准备休息一下；…；这些都是上天事先就注定的。从你自身的相对角度看，因为你事先不知道后来会发生什么，也可以认为不是事先注定的，可能这句话有些不好理解，不妨好好理解前面说过的公理化思想。&lt;/p&gt;
&lt;p&gt;如果你没看过《霍金讲演录－黑洞、婴儿宇宙及其他》，你可能会觉得很惊讶，宿命论历来不都被认为是唯心论吗，怎么由唯物论推导出了宿命论呢？现实就是这样和你开了一个大的玩笑，不过这个玩笑也是事先注定的。如果你再仔细用公理化的方法思考一下唯物论和唯心论的矛盾性，就像前面分析性善论和性恶论一样，你会发现唯物论、唯心论不一定就是冲突的，矛盾的双方是可以统一的，只要你不要同时将唯物和唯心放进同一个系统中就行。&lt;/p&gt;
&lt;p&gt;当然也有聪明者仍然会怀疑宿命论问题的正确性，因为这里有一个前提条件，即宇宙要有一个初始状态。宇宙有没有初始状态，我们并不知道啊，虽然有大爆炸学说，但那也只是假说而已，并没有得到确证，有些人就认为宇宙是一直都存在的。这样看来似乎你又有合理的理由在怀疑宿命论了，不过我仍然要告诉你，你现在在怀疑宿命论仍然是事先注定的，不相信的话就来看看下面的分析。&lt;/p&gt;
&lt;p&gt;虽然宇宙的初始状态值得怀疑，但是这个宇宙至少已经存在了一段时间，这点我想是毋庸置疑的。我们可以在我们已知的宇宙存在的这段时间内，任意取一个时间点t0，那么在这个时间点t0上，所有的粒子都有一个运动状态。在时间点t0之后的时间里，由于粒子运动是按照物理定律进行的，因此粒子运动轨迹由时间点t0的状态决定。说白一点，如果取100年前的一个时间点作为t0，那么现在的所有粒子运动状态100年前就已经确定了，如果取10000年前一个时间点作为t0，那么最近10000年内所有粒子运动的轨迹在10000年前就确定了，当然，你可以取更早的时间，比如100亿年前的时间点。&lt;/p&gt;
&lt;p&gt;总之，现在你会发现宇宙有没有初始状态并不会影响宿命论的正确性，所以这个世界的一切都是注定的。只不过由于粒子间相互影响过于复杂，我们无法知道这些粒子的运动轨迹而已。当然，如果将测不准关系用上的话，那么就是这个运动轨迹对人来说是无法准确预测的，所以不妨开个玩笑：“算命先生经常算得不准大概是测不准关系的缘故吧”。&lt;/p&gt;
&lt;p&gt;如果你再深入思考一下测不准关系，你会发现这是一个测量系统的问题。由于宿命论的存在，这个世界本身实际上是确定的，是“准“的，之所以测不准乃是我们人类所具有的测量能力依赖于基本粒子造成的。所以我在前面说宿命论是“不对”的是相对的，它是相对于我们人类的测量能力而言的。根岑（Gentzen，曾任希尔伯特的助手）在一个更强的系统内证明了ZF系统内的问题都是可判定的，从一个侧面说明这个世界本身是确定的。（注：它和哥德尔不完全性定理并不矛盾，由于数学上的复杂性，这里就不详细解释了）&lt;/p&gt;
&lt;p&gt;不妨再想想我们老祖宗提出的“是庄周梦见了蝴蝶？还是蝴蝶梦见了庄周？”，“风动？幡动？还是心动？”之类的问题，当然以前你都认为这是纯粹的唯心主义，甚至认为是封建糟粕，但是如果结合测不准关系的内涵，再结合前面所说的公理化分析方法进行分析，估计你现在不敢轻易地下结论。&lt;/p&gt;
&lt;p&gt;也许到现在你仍然无法理解为什么把大哲们划在了大科学家的上一层，你可能仍然觉得万有引力、相对论等成果是最伟大的。下面就来谈谈为什么大哲比大科学家高一层。&lt;/p&gt;
&lt;p&gt;如果把人类在现有能力情况下，将来所能够拥有的知识总集看成是一个集合A，人类现在已有的知识总集看成是集合B，显然，集合B只是集合A的一个子集，并且是很小的一个子集。牛顿力学、相对论这些理论只能算作集合B里的一个子集，相对于集合A，只能算作是沧海一粟。 换句话说，在人类现有能力可做的事情集合中，牛顿力学和相对论等理论给出了详细的办法让你可以做其中的一些事情，当然剩下的更多的事情是牛顿力学和相对论所无法解决的。&lt;/p&gt;
&lt;p&gt;哥德尔不完全性定理和测不准关系的意义在于，它指出集合A的范围，即将人类现有能力发挥到极限的情况下，那些事情是你能做到的，那些是你不能做到的。当然，它并没有给出具体的方法让你去做你能做到的事情，它只是告诉我们我们人类现在发现的能力所能达到的极限。或许将来发现人类有其他新的未发现的能力，那么这个极限就被打破了。比如将来能发现不依赖于基本粒子的其他测量方法，并且测量过程中不会改变其他粒子的状态，那么测不准关系就被打破了。&lt;/p&gt;
&lt;p&gt;看到这里，估计你已经发现了一些秘密，科学兜了一大圈，最终还是回到了哲学，也就是我们所认为的玄学上。同时你也会发现，我们老祖宗提出的所谓玄学，原来和现代科学是相通的，并非象某些人想像的那样全是糟粕。如果有人认为西方现代暂时领先我们，进而就认为西方古代就已经超越我们，我们老祖宗就已经落后西方，他们的思想都是糟粕的话，那么我认为他可能犯了崇洋媚外的毛病。我不得不化用一句周杰伦在春晚上的歌词送给他：“你不妨抓一副我们祖传的中医良方，治一治你那崇洋媚外的内伤”。顺便告诉他一下，中医用的阴阳五行理论，它的前提假设就是宿命论。&lt;/p&gt;
&lt;p&gt;上面说的这几位大哲的成果，可能对你的世界观会有很大的影响，于是你可能会羡慕起这些大哲们的成果来。如果你有大志的话，你会希望有朝一日你也能变成大哲，但是你发现上面的大哲是研究数学和物理学的，而你是学计算机的程序员，那么是不是没有机会变成大哲呢？&lt;/p&gt;
&lt;p&gt;如果你能将NP难题给彻底解决掉，意味着计算机内的计算的奥秘基本被揭开，或许你可以进到这层楼来；或者你能发现另外一套计算机可以理解的数学公理系统，并且这个公理系统是完备的，那么计算机取代人类进行思维的一个必要条件就满足了，计算机将具有真正意义上的“逻辑思维和推理能力”，你可以轻松地进到这层楼来。如果你发现了新的方法可以打破测不准关系，同样你也可以轻松地进到这层楼来。&lt;/p&gt;
&lt;p&gt;如果你能彻底揭开人类抽象思维的奥妙，并让计算机懂得了如何创建抽象，具备抽象思维能力，那么也就具备了“设计能力”，可以取代人类进行各种设计了，你也可以轻松地进到这层楼来。顺便说一下，如果你对软件设计有真正深刻理解的话，就会明白这不是在写科幻小说。对此感兴趣者，不妨好好地研究一下程序切片方面的技术，会让你对软件设计和测试等方面的理解有质的提高，或许有一天你能打开这扇大门。&lt;/p&gt;
&lt;p&gt;当然，计算机要完全取代人还有其他必要条件，后面还会提及。&lt;/p&gt;
&lt;p&gt;值得一提的是，虽然第10层楼是本文中所写的最高层，但是大哲们并没有觉得他们到了顶层，他们通常都还会努力寻找通往更高一层的楼梯。如果你也有成为天下第一的想法，那么你或许会想要做什么事情才能超越大哲们的成就，当然，这都得依赖于找到更高一层楼的楼梯。&lt;/p&gt;
&lt;p&gt;个人认为，再往上一层楼的楼梯是通往天堂的道路，也就是说第11层楼的名字叫“天堂”，是“上帝”住的地方，而不是人住的地方。如果将来某天有人能爬到天堂的话，那么他已经不是人了，而是由人变成了“上帝”。&lt;/p&gt;
&lt;p&gt;你也许会怀疑这个世界到底有没有“天堂”，“上帝”是否根本就不存在，我也很有同感。因此有必要再写上一段文字，讨论一下“上帝”的问题。如果你想了解天堂的奥妙，有没有办法让你变成“上帝”，不妨看看继续往下看看第11层楼的玄妙。注意我这里用的是“玄妙”二字，因为上帝在大部分人眼里估计都是“玄之又玄”的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第11层 上帝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看了上面的小标题，你可能会觉得奇怪，这篇文章不是讲“程序员的十层楼”吗？怎么冒出了第11层来了？&lt;/p&gt;
&lt;p&gt;其实这并不矛盾，程序员确实只有十层楼，因为爬到第11层时，已经变成上帝，不再是程序员了；所以超出10层楼本身并不重要，关键的问题是看你有没有能力变成上帝。&lt;/p&gt;
&lt;p&gt;1、谁是上帝？&lt;/p&gt;
&lt;p&gt;菜鸟们认为Linus Torvalds是程序员中的上帝，看完了前面各层楼的介绍，此时再看到这句话，相信你要忍不住在心里笑起来。当然，你会不会笑起来是事先注定的。Don Knuth也不是上帝，他离上帝还有三层楼的距离。即使是大哲们，他们离天堂也还差一层楼，因此这个世界上有史以来还没有任何一个人变成过上帝。&lt;/p&gt;
&lt;p&gt;我们感兴趣的是，将来会不会有人爬到比大哲们更高的楼层上，变成了上帝。&lt;/p&gt;
&lt;p&gt;要变成上帝，你得有上帝一样的能力，上帝会造人，你会吗？&lt;/p&gt;
&lt;p&gt;你也许会怯生生地问：“我可以和爱人生小孩，算不算造人？”，你可能还会理直气壮地说：“现在生物学上都可以克隆人了，早就有人掌握了造人的方法”。&lt;/p&gt;
&lt;p&gt;事实上克隆人需要有人的体细胞，必须要先有人才会有体细胞。上帝造人时，这个世界上并没有人，是从无生命的物质“尘土”中创造出的人。因此，用最原始的方法生人和克隆人都是从有生命信息的物质中生人，不能算作造人。&lt;/p&gt;
&lt;p&gt;这样看来，你根本不会造人，不过我可以告诉你一个“玄方”，让你有机会学会如何造人。&lt;/p&gt;
&lt;p&gt;如果你揭开了人类情感的奥秘，让计算机也可以拥有和人类一样的情感，那么计算机将可以理解人类的需求，具有了“情商”，将具有完整的和人一样的能力。此时，人类进化到了机器人，科幻小说将变成现实，也就是说你已经掌握了真正的造人能力，晋升为“上帝”了。&lt;/p&gt;
&lt;p&gt;未来到底有没有人能变成“上帝”，人能不能进化到机器人，这是宿命论中事先注定了的。说到这里，不妨再告诉你一个打破宿命论的方法，这个方法就是你要爬到比上帝还要高的楼层。&lt;/p&gt;
&lt;p&gt;“还有比上帝还高的楼层？”，你可能会第1时间内冒出这个问题，其实我也有同样的怀疑。因此在写第12层楼前，有必要弄清楚它到底存不存在，即你可不可以骑到上帝的头上的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;骑到上帝的头上？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了解决是否可以骑到上帝的头上这个问题，不妨先假设存在比上帝高的楼层，也就是存在打破宿命论的方法。&lt;/p&gt;
&lt;p&gt;宿命论的本质原因是因为时间是单向运行，不可逆转造成的。如果你找到一种可以使时间逆转的方法，那么你就打破了宿命论，爬到了比上帝还高的楼层。&lt;/p&gt;
&lt;p&gt;看到这里，你也许会摆脱刚才陷于宿命论的困惑情绪，变得充满希望般高兴起来。不过，如果你的逻辑思维能力足够好，仔细思考一下，会发现存在一个逻辑上的悖论。&lt;/p&gt;
&lt;p&gt;在你找到时间逆转的方法之前，显然这个世界仍然是需要服从宿命论的，也就是说你能不能找到打破宿命论的方法是事先注定的。假设你在某个时间点t0处找到了打破宿命论的方法，你在打破宿命论后，想利用时间逆转的方法回到某个时间点t2。下面来看看你到底能不能回到时间点t2。&lt;/p&gt;
&lt;p&gt;取位于t0和t2之间的任意一个时间点t1，你在回到时间点t2之前，必须先经过时间点t1，考虑你到达t1的那一时刻，由于t1比t0要早，这个时间点上你还没有找到时间逆转的方法，所以到了时间t1点后，你无法再使用时间逆转的能力回到时间点t2去，所以你永远也回不到时间点t2，由于时间点t2是任意取的，因此，你永远也无法使时间逆转，或者说你根本就没打破过宿命论，这与你在时间点t0打破了宿命论产生了矛盾。&lt;/p&gt;
&lt;p&gt;上面这段话看起来似乎有点像“人永远迈不出一步”的诡辩一样，你可能会想返回到时间点t1时，仍然可以拥有时间逆转能力啊。不过你又会发现一个新的问题，时间点t1本来是没有时间逆转能力的，现在又认为时间点t1又有时间逆转能力，那时间点t1到底是有还是没有时间逆转能力呢？或者说在时间点t0前，宿命论注定了时间点t1是没有时间逆转能力的，现在你又认为时间点t1具有时间逆转能力，那么这两个时间点t1究竟是不是同一个时间点？如果不是同一个时间点，说明你没有回到过去；如果是同一个时间点的话，岂不是自相矛盾吗？&lt;/p&gt;
&lt;p&gt;为了说得更形象一些，不妨假设你坐一艘超光速飞船，准备从时间点t0回到时间点t2去，假设你回到t2后，随着时间的流逝，又达到了时间点t0，如果这时你又再次坐超光速飞船返回时间点t2，那么一个值得思考的问题就出现了，“你在时间点t2能不能看到上次返回时间点t2的飞船？”&lt;/p&gt;
&lt;p&gt;如果回答不能看到飞船，那么上次返回的飞船那里去了呢？显然很难解释通。如果回答能看到飞船，那么你可以到达时间点t2后，下次时间到达t0时，你又坐飞船返回t2，这次你将可以看到上两次的两艘飞船。如果这样一直循环下去，最后你会发现你可以在时间点t2看到无穷多的飞船。用程序员的术语说，叫做“程序陷入了死循环”，最后系统必然会出现“Out of Memory”现象而崩溃。&lt;/p&gt;
&lt;p&gt;当然，你也可以认为有其他的方法，不需要飞船，可以一次性从时间点t0直接跳跃到时间点t2，并不需要经过时间点t1。下面不妨来分析一下这个方法是否可行。&lt;/p&gt;
&lt;p&gt;既然是直接跳跃到时间点t2，那么你必然是在一个无穷小的时间里出现在时间点t2的某个空间里，例如你要在时间点t2回到某个广场上。首先说明一下为什么是无穷小的时间里出现的，因为如果不是无穷小的时间里出现的话，那么必然可以取到一个时间点t1，会导致前面所说的时间点t1上出现悖论。&lt;/p&gt;
&lt;p&gt;你在广场上出现的时，广场上的空气必然要为你让开空间，而这是在无穷小的时间里完成的，那么很容易推导出你周围的空气获得的加速度和速度都是无穷大，因而它具有的动能也是无穷大，无穷大的能量和无穷大的速度意味着什么？一只鸟都可以将飞机撞下来，如果宇宙是有限大的话，它可以让这个宇宙炸毁无穷次；即使宇宙是无限大，它也足以让宇宙炸毁一次。宇宙都毁灭了，又何来的时间？还能说你回到了时间点t2吗？&lt;/p&gt;
&lt;p&gt;也许上面说的这些你仍然难以相信，不妨再说得更现实一些，假设你要回到100年前的一个时间点，这100年中，天上有多少流星湮灭了？有多少新星生成了？宇宙膨胀了多少？你有能力让湮灭的流星复原、生成的新星重新返回未生成前的状态，膨胀的宇宙收缩回去吗？如果这些东西的状态没有回复到100年前，又怎么能说明你回到的是100年前的时间点呢?&lt;/p&gt;
&lt;p&gt;根据上面的推导和分析，个人认为使时间逆转的方法是不存在的，所以第12层楼是不存在的，自然没有人可以骑到“上帝”的头上。&lt;/p&gt;
&lt;p&gt;宿命论将在有时间的时间里永远统治这个世界。&lt;/p&gt;</summary><category term="程序员"></category></entry><entry><title>补习一下开源软件协议的知识</title><link href="http://hackecho.com/2011/04/open-source-knowledge/" rel="alternate"></link><updated>2011-04-02T19:03:06-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-04-02:2011/04/open-source-knowledge/</id><summary type="html">&lt;p&gt;近日接触到很多开源的东西，都有各自的开源协议。记得以前Linux操作系统老师讲过一些，但已记不大清楚。为了更好的使用这些开源软件，只好再补习一下了。&lt;/p&gt;
&lt;p&gt;下面只是一些常见的协议，具体的详解请参照&lt;a href="http://www.opensource.org/licenses/alphabetical"&gt;http://www.opensource.org/licenses/alphabetical&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mozilla Public License&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MPL License，允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。这种授权维护了商业软件的利益，，它要求基于这种软件得修改无偿贡献版权给该软件。这样，围绕该软件得所有代码得版权都集中在发起开发人得手中。但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BSD开源协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BSD开源协议是一个给于使用者很大自由的协议。可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。 当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：&lt;/p&gt;
&lt;p&gt;1． 如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。&lt;/p&gt;
&lt;p&gt;2． 如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。&lt;/p&gt;
&lt;p&gt;3． 不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。&lt;/p&gt;
&lt;p&gt;BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Apache Licence 2.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布(作为开源或商业软件)。需要满足的条件：&lt;/p&gt;
&lt;p&gt;1． 需要给代码的用户一份Apache Licence&lt;/p&gt;
&lt;p&gt;2． 如果你修改了代码，需要再被修改的文件中说明。&lt;/p&gt;
&lt;p&gt;3． 在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。&lt;/p&gt;
&lt;p&gt;4． 如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。&lt;/p&gt;
&lt;p&gt;Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GPL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GPL许可证是自由软件的应用最广泛的软件许可证，人们可以修改程式的一个或几个副本或程式的任何部分，以此形成基於这些程式的衍生作品。必须在修改过的档案中附有明显的说明：您修改了此一档案及任何修改的日期。 您必须让您发布或出版的作品，包括本程式的全部或一部分，或内含本程式的全部或部分所衍生的作品，允许第三方在此许可证条款下使用，并且不得因为此项授权行为而收费。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LGPL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。&lt;/p&gt;
&lt;p&gt;GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。&lt;/p&gt;
&lt;p&gt;由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。&lt;/p&gt;
&lt;p&gt;其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Public Domain&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公共域授权。将软件授权为公共域，这些软件包没有授权协议，任何人都可以随意使用它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;zlib/libpng&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要不误传该软件的起源并保留原始发布的公告，任何人可以以任何目的使用该软件，包括商业应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Artistic许可&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使作者保持对进一步开发的控制。&lt;/p&gt;</summary><category term="开源协议"></category></entry><entry><title>用HP Scrawlr检测数据库SQL注入漏洞</title><link href="http://hackecho.com/2011/03/sql-injection-with-hp-scrawlr/" rel="alternate"></link><updated>2011-03-30T22:32:33-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-03-30:2011/03/sql-injection-with-hp-scrawlr/</id><summary type="html">&lt;p&gt;您需要是不是正要检测在线数据库的漏洞呢？正好，HP为我们提供了一个免费工具来检测网站是否存在SQL注入漏洞。HP Scrawlr能够爬行您的站点，以查找代码中的安全漏洞。这款软件是免费的，并且很容易上手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQL数据库是目前世界上最快的一种数据库，每秒钟可以完成数百万次的事务处理。使用PHP和ASP代码处理SQL连接的时候，如果代码写的不好的 话，就会为网站的安全留下隐患：黑客可以通过插入代码来获得您的服务器上数据库的控制权。所以，一定要保护好您的SQL数据库。测试软件和网络的安全性应 该成为安全审计的一部分。HP为我们提供了扫描网站的SQL漏洞的免费软件。Scrawlr只可用于合法地扫描您自己的站点，而不得用于您的组织之外的站 点。安全分析人员进行渗透测试时，应当将这款软件也纳入到他们的安全工具库中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HP Scrawlr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hewlett  Packard公司提供了一款免费的工具，供人们用来爬行他们的站点，并从中查找安全漏洞。Scrawlr是由HP的web安全研究团队开发的，可用于对 单独的网页进行SQL注入漏洞的检测和利用。这个程序运行速度非常快；在运行期间，它可以利用HP的智能引擎技术来创建和动态执行SQL注入。最后，它还 能提高一份简单的报告来供管理员分析有关结果。如果该程序成功的话，您就会看到数据库和各种表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scrawlr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是Scrawlr的两个截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://images.51cto.com/files/uploadimg/20091009/1527390.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://images.51cto.com/files/uploadimg/20091009/1527391.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL注入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;黑客可以使用简单的SQL命令来进行插入、删除操作，甚至能控制整个数据库。黑客可以先在web中查找数据库，然后通过简单的注入命令来返回机密数据，并将其复制粘贴到自己的机器中。下面是一个简单的SQL注入范例：&lt;/p&gt;
&lt;p&gt;下面我们来绕过登录表单。这里是来自实际应用代码片段：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;SQLQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT Username FROM Users WHERE&lt;/span&gt;
&lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;amp;amp;&lt;/span&gt;
&lt;span class="n"&gt;strUsername&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‘ AND Password = ‘&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;strPassword&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‘&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;strAuthCheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetQueryResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;strAuthCheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;Then&lt;/span&gt;
    &lt;span class="n"&gt;boolAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;Else&lt;/span&gt;
    &lt;span class="n"&gt;boolAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个典型的登录处理，终端用户来到站点，然后提交他们的用户名和口令。随后，这个查询从“Users”表中寻找是否有与提供的用户名和口令匹配的记录。对于糟糕的ASP代码或者PHP代码，黑客将能使用下列类型的代码来发动进攻。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注入代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;用户名：‘&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="err"&gt;‘‘&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;
&lt;span class="err"&gt;口令：‘&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="err"&gt;‘‘&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个会使SQLQuery变成下面的样子：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="n"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘‘&lt;/span&gt;
&lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="err"&gt;‘‘&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‘‘&lt;/span&gt; &lt;span class="n"&gt;AND&lt;/span&gt;
&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘‘&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="err"&gt;‘‘&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‘‘&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，黑客只是在应该输入有效用户名的地方键入了一个字符串：‘ OR ‘‘=‘，就轻而易举地绕过了登录屏。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结束语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行SQL注入的方法数以千计，这里介绍的并不是理想的“黑客”代码。本文不是关于黑客技术的，而是关于如何保护您的网站的。  HP只是众多能够保护您的网站中的工具之一。对于保护您的信息资产来说，渗透测试是一种重要的手段。它不仅有助于测试代码，而且还能帮您测试防火墙。不过 Scrawlr软件也有其不足之处，例如：&lt;/p&gt;
&lt;p&gt;•最多只能爬行1500个URL地址&lt;/p&gt;
&lt;p&gt;•在爬行期间无法进行脚本解析&lt;/p&gt;
&lt;p&gt;•在爬行期间无法解析Flash&lt;/p&gt;
&lt;p&gt;•在爬行期间无法提交表单&lt;/p&gt;
&lt;p&gt;•仅有简单的代理支持&lt;/p&gt;
&lt;p&gt;•没有身份验证或者登录功能&lt;/p&gt;
&lt;p&gt;•不能检测SQL盲注&lt;/p&gt;
&lt;p&gt;任何软件都不是十全十美的，但是它们对于安全漏洞和漏洞利用测试来说确实是非常有帮助的。如果站点仅通过了一种安全软件的测试，就以为高枕无忧那就太盲目了。感谢HP有为我们带来了一个软件“帮手”！&lt;/p&gt;</summary><category term="SQL"></category></entry><entry><title>如何分辨极客与伪极</title><link href="http://hackecho.com/2011/03/how-to-recognize-false-geek/" rel="alternate"></link><updated>2011-03-26T18:37:31-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-03-26:2011/03/how-to-recognize-false-geek/</id><summary type="html">&lt;p&gt;有着非常强健的体魄，或者非常专业的某项体育技能的，100%不是极客。极客没有时间也没有兴趣刻意锻炼身体。身体非常虚弱的，100%不是极 客，70%是伪极，呆极客或者宅。极客虽然不会进行长期稳定的体育运动，但是他们享受户外的活动。绝不会始终宅在家里。所以身体一定是健康的，却不是好坏 两个极端。&lt;/p&gt;
&lt;p&gt;不戴眼镜的，100%不是极客。&lt;/p&gt;
&lt;p&gt;出门站在衣柜犹豫不知穿什么衣服的，80%不是极客。极客们讲求效率，不会在穿衣戴帽等事情上浪费时间。另一方面，他们也没有太多的衣物供不同场合的选择。出门随手拽两件衣服披上就走的，90%是极客。&lt;/p&gt;
&lt;p&gt;拥有一辆不错的个人车的，70%不是极客。极客开车的机会不多，也不会下血本买费钱费油的好车。&lt;/p&gt;
&lt;p&gt;酒量特别好的，100%不是极客。极客们饮酒的机会不多。不过由于常常帮朋友修理电脑导致被请客在外就餐的机会也不少，所以酒量比宅要高很多。&lt;/p&gt;
&lt;p&gt;经常哭穷的，100%不是极客。极客们手头都是相对宽裕的。他们的心态比较中置，对于不同的家庭背景或者收入状况不会加以打击或者憧憬，因为他们所追求的不是纯物质生活，更多的在于精神上。他们自己的经济条件完全可以覆盖他们的支出，所以经常抱怨富二代的，90%是伪极。&lt;/p&gt;
&lt;p&gt;掌握多门外语的，80%是极客。原因是先进的技术等他们感兴趣的东西大多来自不同的国家，第一手掌握的消息往往都是外语的文章。这迫使他们潜移默化 的接触外语，从而提高了自己的外语水平；同时，受过高等教育的他们往往喜欢做一些利于别人的无偿的翻译工作。掌握多门外语同时有过从事无偿翻译工作经历 的，90%是极客。只掌握部分特定场合使用的日语（类似于一代以及雅蠛蝶）是宅的几率达到100%。&lt;/p&gt;
&lt;p&gt;声称能帮你盗号的，100%不是极客。80%是伪极。凭借现在的互联网安全背景来看，能凭借木马病毒钓肉鸡骗取账号密码的，只有专搞破坏的骇客 （hacker）。真正的极客不屑于从事破坏活动。他们关心的是如何进一步巩固互联网安全。如果声称能帮你加强计算机安全或者通过长篇大论给你普及安全意 识的，100%是极客。&lt;/p&gt;
&lt;p&gt;玩网络游戏的，诸如WOW或者EVE的，100%不是极客。极客绝对喜欢玩游戏，同时也会拥有移动或者家用主机，但是绝对不会玩儿需要大量精力和时间的游戏。包括DoTA。所以，玩深度游戏却自称极客的人，100%是伪极。&lt;/p&gt;
&lt;p&gt;帮你修理电脑，结果看都不看直接告诉你重装系统的，70%是伪极。能够帮你弄好电脑并且告诉你哪个硬件需要升级的，90%是极客。&lt;/p&gt;
&lt;p&gt;使用两个显示器分屏显示的，60%是极客。超过三个显示器的，80%是伪极，100%是富二代的宅或者呆极客。&lt;/p&gt;
&lt;p&gt;拥有个人互联网站点的（并非托管型博客类似于新浪百度等等）80%是极客。使用WordPress平台构建站点的，90%是极客。&lt;/p&gt;
&lt;p&gt;使用Android或者iOS等平台的手机（勉强包括MeeGo以及黑莓RIM等），那么他有80%以上的可能性是极客或者呆极客。使用诺基亚s60等系统的，100%不是极客。&lt;/p&gt;
&lt;p&gt;用上网本的，100%不是极客。极客要求的是效率和速度，上网本绝对会让他们发疯。出门背着超过两公斤的电脑和相关装备的，90%是极客。带着硬盘以及移动电源一起出门的，100%是呆极客。&lt;/p&gt;
&lt;p&gt;查看他的个人电脑，使用Chrome或者FireFox浏览器的，80%是极客。浏览器中插件数量多于5个的，这个百分比提升到90%。插件多于20个的，90%是伪极或者呆极客。使用IE，360，腾讯TT等浏览器的，100%不是极客。&lt;/p&gt;
&lt;p&gt;查看他们的书签，其中包含瘾科技或者cnBeta之类的业界新闻网站的，80%是极客。有一本道草榴小狼窝之类的网站书签并拥有账号的，100%是伪极或者宅。&lt;/p&gt;
&lt;p&gt;查看他的软件版本，有很多beta版本的，是极客的可能性很高。Beta版多于stable版本的，是伪极的几率比较高。使用苹果 MacOS，Linux以及衍生系统ubuntu等等操作系统的，80%是极客或者呆极客。同时使用Windows系统作为主要系统的，不是极客的几率增 加。如果在MacOS或linux系统下安装了VM等虚拟windows使用的，90%是极客。查看他的硬件，使用7200转以上的机械硬盘的，40%是 极客。使用混合硬盘的，几率提高到60%。使用性价比高的固态硬盘的，100%是极客。使用最高端和昂贵的固态硬盘的，80%是伪极，100%是富二代或 者呆极客。硬盘里面拥有诸多1080p和720p大片片源的，60%是极客。拥有大量高清日本爱情动作片的，100%是宅。（因为极客的片子普通人找不 到）硬盘中充斥大量动画片的，100%是宅。70%是伪极。&lt;/p&gt;
&lt;p&gt;经过前文以及上面的描述的排查，如果你发现你的生活中真的有这么一位极客朋友，那么恭喜你，你有着别人无法比拟的精神财富。你现在和以后要做的是， 多邀请他一起吃饭一起旅行，在精神和物质上对其无微不至的照料，争取通过一切手段维护并且发展你们之间的友谊，比如经常来往，经常送他礼物之类。&lt;/p&gt;
&lt;p&gt;当然，没有人一出生就是极客；所谓的极客也是通过后天的兴趣培养出来的。所以，遇到伪极不要打击或者挖苦，你要做的是耐下心来鼓励他，帮助他转职成为一名准极客，甚至真正的极客。&lt;/p&gt;</summary><category term="极客"></category></entry><entry><title>对MVC架构的简单解读</title><link href="http://hackecho.com/2011/03/intro-of-mvc-structure/" rel="alternate"></link><updated>2011-03-05T23:42:16-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-03-05:2011/03/intro-of-mvc-structure/</id><summary type="html">&lt;p&gt;因最近开发的需要，开始自学PHP，学习中的一些心得和技巧将会记录在博客里。作为一名初学者，我选择了使用SpeedPHP开发框架，因为它是个轻量级的框架。这篇文章是SP教程里的，简单摘录一下，以加深理解。&lt;/p&gt;
&lt;p&gt;本文将讲述在网络系统（WEB系统）开发中，MVC（模型-视图-控制器）架构的理念、设计以及在sp框架中的实际应用方式等。&lt;/p&gt;
&lt;p&gt;首先我们来看看MVC架构的示意图：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.hackecho.com/?attachment_id=139"&gt;&lt;img alt="MVC" src="/static/images/2011/03/捕获-300x118.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从上图我们可以将MVC简单地理解成：&lt;/p&gt;
&lt;p&gt;和访问者交互的是控制层（Controller层），控制器（controller）是同类交互的集合，每一个交互的操作，都对应了一个动作（action）。在sp框架中，全部的控制器类都必须继承于spController。&lt;/p&gt;
&lt;p&gt;对数据库进行存取的是模型层（Model层），在sp框架中，全部的模型器类都必须继承于spModel。&lt;/p&gt;
&lt;p&gt;显示页面模板的是视图层（View层），在sp框架中，视图层被集成到了控制器内，所以在实际开发中，视图层所要制作的只有页面模板。&lt;/p&gt;
&lt;p&gt;上面简单描述了MVC架构的理解。下面讲述一下关于sp框架中的MVC理念，可能比较抽象而不好理解，但是还请耐心去阅读，毕竟在实际开发中，对MVC理念的理解是非常必要和重要的。&lt;/p&gt;
&lt;p&gt;sp框架中的MVC理念，是将网络系统划分为三个关注点：交互、数据、页面模板；也就是我们设计或分析一个网络系统，就可以从这三个角度去进行：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交互：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表现在系统提供了哪些功能，这些功能可以划分为哪些大类，每一个大类的功能分别都有些什么操作等等。&lt;/p&gt;
&lt;p&gt;比如PHP论坛系统，我们可以粗略划分成板块、帖子、用户、站内信息、后台管理等几大类的功能，然后用户的功能里面又包括了注册、登录、修改用户信息等等的多个操作。&lt;/p&gt;
&lt;p&gt;对应sp框架的控制层（controller层）而言，一个功能大类可以说是一个控制器类（当然，如果该类型概况的范围比较大，那么还需要继续拆分成多个控制器类），单个类型内的每一个功能就是一个动作（action，控制器类的方法函数）。然后根据访问者对系统的每一次操作，sp框架都会自动选择对应控制器类中的对应动作进行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表现在系统对数据库进行了那些操作。网络系统几乎都需要和数据库打交道。那么，在进行对交互的分析和对系统本身的分析后，我们也大致上可以归纳系统需要哪些数据了。然后我们将这些数据整理归类，最终可以得出系统需要的数据表是哪些。&lt;/p&gt;
&lt;p&gt;就刚才的PHP论坛，按照“板块、帖子、用户、站内信息、后台管理”这五个分类功能，我们可以基本归纳出它们需要：板块记录表、帖子记录表、用户表、站内信息表、后台设置表等等。&lt;/p&gt;
&lt;p&gt;对应sp框架的模型层（Model层）而言，一个表可以说就是对应了一个模型类。而sp框架中的模型父类（spModel）为这些模型类提供大部分与数据库存取的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页面模板：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个网络系统的开发中，我们都将需要制作相当数量的页面。简单来说，控制器的每一个动作（action）都有可能产生一个页面，所以在理清所有交互，完成控制器的设计后（未写代码前），我们就可以得到需要的页面模板的清单了。然后在模板引擎的帮助下，页面模板的制作可以与控制器的开发同时进行，以提高开发效率。&lt;/p&gt;
&lt;p&gt;按照上面的PHP论坛交互的设计，那么我们可以得到的页面模板有许多，比如板块方面，有首页模板、分区模板、板块模板等；帖子方面有帖子内容模板、发帖模板、回帖模板等。&lt;/p&gt;
&lt;p&gt;sp框架将视图层（View层）集成到了控制器内，所以在开发中，控制器将会把需要的数据发送到模板上面。而视图层所需要的开发，就仅是按照模板的语法进行页面模板的制作即可。&lt;/p&gt;
&lt;p&gt;根据“交互、数据、页面模板”这三个关注点，那么我们就可以比较全面地去分析和设计一个网络系统了。请注意这三个关注点并非孤立的，而“交互”正是“数据”与“页面模板”的基础，所以对“交互”的分析务必要做到正确并且完善。如果您希望了解更多关于系统分析与设计方面的知识，请到sp网站上面阅读相关文章。&lt;/p&gt;
&lt;p&gt;当我们理解了MVC后，下一步我们可以开始进入实战，来制作一个简单的留言本程序了。&lt;/p&gt;
&lt;p&gt;关于留言板程序，如果有机会，我会再做一个详细分析放上来的。PHP框架开发非常重要的基础就是理解MVC架构，这只是一个简单的入门介绍而已，深入的学习还在后头。&lt;/p&gt;</summary><category term="MVC"></category><category term="PHP"></category></entry><entry><title>交大一软通 V2.0 开发完毕</title><link href="http://hackecho.com/2011/02/finish-of-bjtuer/" rel="alternate"></link><updated>2011-02-19T20:45:02-06:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2011-02-19:2011/02/finish-of-bjtuer/</id><summary type="html">&lt;p&gt;首先感谢大家对1.0版本的支持，收到大家的意见反馈后，经过努力，V2.0版交大一软通发布！&lt;/p&gt;
&lt;p&gt;更新啦~~~：&lt;/p&gt;
&lt;p&gt;1.增加“知行快读”模块，可以快速、方便地在软件内阅读知行论坛热门板块，以及晨光BT的资源，让你第一时间获得最新信息，体验酣畅淋漓的“刷论坛”阅读感受！&lt;/p&gt;
&lt;p&gt;2.修正“免流量上网通道”无法使用的问题，更换了代理地址并且增加为两条通道，通道1无法使用时可以使用通道2。修复了其导致的无法上网的问题，程序退出时将自动关闭通道。&lt;/p&gt;
&lt;p&gt;3.主页增加了“快捷启动”栏目，直达各个常用功能，方便快捷！&lt;/p&gt;
&lt;p&gt;4.一软通内置了网络浏览系统，不再调用系统默认浏览器。&lt;/p&gt;
&lt;p&gt;5.增加“实用工具”模块，混在交大，这些工具少得了？！工具还在不断添加中！&lt;/p&gt;
&lt;p&gt;6“交大导航”新增许多地址，而且还在不断增加，导航更齐全！&lt;/p&gt;
&lt;p&gt;7.增加的功能详细介绍如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知行快读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想体验什么叫酣畅淋漓，就使用知行快读！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IP地址切换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以保存多组地址配置信息，让你的笔记本不管在宿舍还是在机房，都能迅速切换IP；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAC地址修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以快捷修改网卡的MAC地址（非物理），同时可以查看网卡各项具体配置信息；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“流量查询”更改为“Dr.COM流量管理”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;登陆后，不但可以查询剩余流量，还可以查询账户余额，登录记录，充值记录，账单详情，上行和下行的具体流量等等；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;局域网聊天、传文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要两个人（或多个）同时使用，则可以高速、不计流量地传文件、聊天等等；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其它功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;增加“交大校园常用软件下载”导航，增加“研究生选课”导航，增加“MIS系统”导航，增加“校历”导航，增加各学院主页导航，修复北邮人BT的bug，修复安装ipv6的bug，增加内置网络系统等等等等……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载地址：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（知行，需注册下载）&lt;a href="http://zhixing.bjtu.edu.cn/thread-279824-1-1.html"&gt;http://zhixing.bjtu.edu.cn/thread-279824-1-1.html&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（晨光，需ipv6支持）&lt;a href="http://zhixing.bjtu.edu.cn/thread-284809-1-1.html"&gt;http://zhixing.bjtu.edu.cn/thread-284809-1-1.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="界面预览图片" src="/static/images/2011/04/主页.png" /&gt;&lt;/p&gt;</summary><category term="交大一软通"></category></entry><entry><title>春风化雨——初涉网站建设领域</title><link href="http://hackecho.com/2009/07/start-of-web-dev/" rel="alternate"></link><updated>2009-07-22T22:11:00-05:00</updated><author><name>Zhaoyu Li</name></author><id>tag:hackecho.com,2009-07-22:2009/07/start-of-web-dev/</id><summary type="html">&lt;p&gt;近来没有写过日志，主要是因为忙于自己的网站。今天完成了当天的任务，便写一些近来做网站的一些感受吧！­&lt;/p&gt;
&lt;p&gt;个人站长很少有独立开发整站程序的人，我也算是一个，一方面没有相关的技术，二来没有时间和精力来学习、编写和调试。所以我便很佩服DEDECMS的开发者柏拉图，因为著名的DEDECMS起初便是由他一人独立开发的。网上流行的CMS很多，但运行于PHP环境的就屈指可数了，因为我的空间是UNIX型，只能使用基于PHP的CMS。下面说一下我认识CMS的过程吧。­&lt;/p&gt;
&lt;p&gt;我接触的第一款CMS是DEDECMS，但那还是一年前，出于好奇，也并没有想去建一个自己的网站，即使想，那时也没有时间。当初没有怎么深入研究，只迷迷糊糊知道CMS可以进行网站内容管理。现在，高考结束，在北交大的录取通知书马上就要到来的情况下，我便购置了空间和域名，将身心全部投入到我的爱好中来。­&lt;/p&gt;
&lt;p&gt;大约是6月二十几号，我开始挑选自己的CMS，遍历了国内几家知名企业产品。一开始的时候，我主要注重的是模版的易用和制作难易，但“游来游去”，发现对我来说每个都是那么的难。我还以为CMS就和现在网上流行的Blog换模板一样简单。后来事实证明，情况并非如此，否则网络上的相同的网站就应该有无数个了！渐渐的，我了解到现在流行的一种网页设计方法——CSS，即层叠样式表。出于需要，只好自己买书，下载教程，争取自学成才！学习的过程中，不得已又学习了HTML语言，了解了Javescript、Ajax、XML等等，就像那句话所说：“人的知识好比一个圆，圆内是已知的知识，圆外则是未知世界。人的知识圆越大，面对的未知数越多”。这段时间，每天都埋首代码的海洋，但随着学习的深入，竟然发现，原来这些曾经那么吓人的程序设计，也是这样的有趣和精妙！现在我已经着手自己设计网站的模板了，至于为什么要自己设计，后面我在说。­&lt;/p&gt;
&lt;p&gt;经过漫长的苦苦寻求，最终我选择了DEDECMS，因为用它很上手，而且模板制作采用div+css加dede标签就可以完成。这里我对用过的几款CMS简单做一下评价，仅代表我自己的观点，因为萝卜白菜，各有所爱嘛。­&lt;/p&gt;
&lt;p&gt;1.PHPCMS：听说phpcms被ku6收购，而且前不久它的开发者辞职的消息后，不免对PHPCMS的未来产生了几许担忧。也许我的担忧是多余的，因为ku6也有很优秀的开发团队。phpcms留给我最大的印象就是数据承载能力很强，但个人站长一般不会达到巨大的数据量。另外，它的响应速度也是一流的，这一点值得推荐。­&lt;/p&gt;
&lt;p&gt;2.php168：看到php168的后台，我的第一感觉便是“好强大”，后台编排密度很高，功能也很齐全。虽然有模板可视化编辑，但个人认为还需较大改进。­&lt;/p&gt;
&lt;p&gt;3.帝国CMS（ECMS）：这是最强大的一款CMS，但不适合新手使用，模板标签比较麻烦。前不久，帝国实现了全面开源，竞争力大大加强，扩展性和模型的开发都是非常的方便。建议熟悉PHP编程的人使用。­&lt;/p&gt;
&lt;p&gt;4.DEDECMS：我自己现在在用，不再过多点评。另外，他是目前中国站长们最常用的cms。­&lt;/p&gt;
&lt;p&gt;其他的基于php的cms不再点评，而像动易、新云、风讯等asp类程序我没有用过，不做点评。­&lt;/p&gt;
&lt;p&gt;今天一整天都在设计模板，用photoshop合成了网页背景和导航栏背景，完善了代码，一个字：累。其实这里有我悟出的一条真理：虽然在网上的cms模板满天飞，但真正适合你自己的，没有！每个人的口味都不同，而且免费的模板有时还会有病毒或恶意代码。要想的得到好的模板只有两个途径：一是掏钱请人订做，二便是自己做了！永远不要迷恋于“免费”，天下没有免费的午餐！­&lt;/p&gt;
&lt;p&gt;我的网站域名暂且不透露，再有几天等制作完成再告诉大家。­&lt;/p&gt;
&lt;p&gt;我被录取的专业是软件工程，现在还没有开学。北交大的软件学院也属于教育部国家示范性软件学院，实力应该不错。据说现在阻碍中国国内软件业发展的一大因素就是软件工程类的综合性人才太少，印度软件业的飞速发展和美国已有的软件实力都给我们国家软件产业的发展带来空前压力。我更希望的是这种压力能够变成一种动力，使中国软件产业尽快进入快车道，尽快造福于国家，造福于人类！­&lt;/p&gt;</summary><category term="CMS"></category><category term="PHP"></category></entry></feed>